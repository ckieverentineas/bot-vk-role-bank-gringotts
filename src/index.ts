import { VK, Keyboard, IMessageContextSendOptions, ContextDefaultState, MessageContext, VKAppPayloadContext } from 'vk-io';
import { HearManager } from '@vk-io/hear';
import { PrismaClient } from '@prisma/client'
import {
    QuestionManager,
    IQuestionMessageContext
} from 'vk-io-question';
import { randomInt } from 'crypto';
import { timeStamp } from 'console';
import { registerUserRoutes } from './engine/player'
import { InitGameRoutes } from './engine/init';
import { send } from 'process';
import { Keyboard_Index } from './engine/core/helper';
import * as dotenv from 'dotenv' // see https://github.com/motdotla/dotenv#how-do-i-use-dotenv-with-import
import { env } from 'process';
import { Image_Random } from './engine/core/imagecpu';
dotenv.config()

export const token: string = String(process.env.token)
export const root: number = Number(process.env.root) //root user
export const chat_id: number = Number(process.env.chat_id) //chat for logs
export const group_id: number = Number(process.env.group_id)//clear chat group
export const timer_text = { answerTimeLimit: 300_000 } // –æ–∂–∏–¥–∞—Ç—å –ø—è—Ç—å –º–∏–Ω—É—Ç
export const answerTimeLimit = 300_000 // –æ–∂–∏–¥–∞—Ç—å –ø—è—Ç—å –º–∏–Ω—É—Ç
//–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
export const vk = new VK({ token: token, pollingGroupId: group_id, apiMode: "sequential", apiLimit: 1 });
//–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
const questionManager = new QuestionManager();
const hearManager = new HearManager<IQuestionMessageContext>();
export const prisma = new PrismaClient()

/*prisma.$use(async (params, next) => {
	console.log('This is middleware!')
	// Modify or interrogate params here
	console.log(params)
	return next(params)
})*/

//–Ω–∞—Å—Ç—Ä–æ–π–∫–∞
vk.updates.use(questionManager.middleware);
vk.updates.on('message_new', hearManager.middleware);

//—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ä–æ—É—Ç–æ–≤ –∏–∑ –¥—Ä—É–≥–∏—Ö –∫–ª–∞—Å—Å–æ–≤
InitGameRoutes(hearManager)
registerUserRoutes(hearManager)

let blocker: Array<1> = []
//–º–∏–¥–¥–ª–µ–≤–∞—Ä –¥–ª—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
vk.updates.on('message_new', async (context: any, next: any) => {
	if (context.peerType == 'chat') { 
		try { 
			await vk.api.messages.delete({'peer_id': context.peerId, 'delete_for_all': 1, 'cmids': context.conversationMessageId, 'group_id': group_id})
			console.log(`User ${context.senderId} sent message and deleted`)
			//await vk.api.messages.send({ peer_id: chat_id, random_id: 0, message: `‚úÖüö´ @id${context.senderId} ${context.text}`})  
		} catch (error) { 
			console.log(`User ${context.senderId} sent message and can't deleted`)
			//await vk.api.messages.send({ peer_id: chat_id, random_id: 0, message: `‚õîüö´ @id${context.senderId} ${context.text}`}) 
		}  
		return
	}
	if (context.text.toLowerCase() == `–ø–æ–∑–≤–∞—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞`) {
		if (!blocker.includes(context.senderId)) {
			blocker.push(context.senderId)
			await context.send(`‚Åâ –í–∫–ª—é—á–µ–Ω —Ä–µ–∂–∏–º —É–¥–µ—Ä–∂–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞, –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –Ω–æ—Ä–º–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º, –ø–∏—à–∏—Ç–µ: –ø–æ–∑–≤–∞—Ç—å –±–æ—Ç–∞`)
			console.log(`User ${context.senderId} activated mode for talk with employee`)
		}
	}
	if (context.text.toLowerCase() == `–ø–æ–∑–≤–∞—Ç—å –±–æ—Ç–∞`) {
		if (blocker.includes(context.senderId)) {
			blocker.splice(blocker.indexOf(context.senderId))
			await context.send(`üí° –ë–∞–Ω–∫–æ–≤—Å–∫–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–æ –≤ —à—Ç–∞—Ç–Ω—ã–π —Ä–µ–∂–∏–º.`)
			console.log(`User ${context.senderId} return in mode for talk with bot`)
		}
	}
	if (blocker.includes(context.senderId)) { return }
	//–ø—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–∞—Ö –¥–∞–Ω–Ω—ã—Ö
	const user_check = await prisma.user.findFirst({ where: { idvk: context.senderId } })
	//–µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç, —Ç–æ –Ω–∞—á–∏–Ω–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
	if (!user_check) {
		//—Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É
		const answer = await context.question(`‚åõ –ö–∞–∫ —Ç–æ–ª—å–∫–æ –≤—ã –æ—Ç–∫—Ä—ã–ª–∏ –¥–≤–µ—Ä—å –±–∞–Ω–∫–∞ –ì—Ä–∏–Ω–≥–æ—Ç—Ç—Å üè¶, –∏–∑ –Ω–∏–æ—Ç–∫—É–¥–∞ –ø–µ—Ä–µ–¥ –≤–∞–º–∏ –ø—Ä–µ–¥—Å—Ç–∞–ª–∏ –¥–≤–∞ –≥–æ–±–ª–∏–Ω–∞ –∏ –Ω–∞–¥–º–µ–Ω–Ω–æ —Å–∫–∞–∑–∞–ª–∏: \n ‚Äî –í–∏–¥–∏–º–æ, –≤—ã –∑–¥–µ—Å—å –≤–ø–µ—Ä–≤—ã–µ. –ü—Ä–µ–∂–¥–µ —á–µ–º –≤–æ–π—Ç–∏, —Ä–∞—Å–ø–∏—à–∏—Ç–µ—Å—å –∑–¥–µ—Å—å –æ —Å–≤–æ–µ–º —Å–æ–≥–ª–∞—Å–∏–∏ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö. \n –í —Ç–æ—Ç –∂–µ –º–∏–≥ –≤ –∏—Ö —Ä—É–∫–∞—Ö –º–∞–≥–∏—á–µ—Å–∫–∏–º –æ–±—Ä–∞–∑–æ–º –ø–æ—è–≤–∏–ª—Å—è –ø–µ—Ä–≥–∞–º–µ–Ω—Ç. \n üí° –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ, –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã –≤ –±–∞–Ω–∫–æ–≤—Å–∫–æ–π —Å–∏—Å—Ç–µ–º–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω—ã 5 –º–∏–Ω—É—Ç–∞–º–∏ –Ω–∞ –≤–∞—à–∏ –æ—Ç–≤–µ—Ç—ã –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è!`,
			{	
				keyboard: Keyboard.builder()
				.textButton({ label: '‚úè', payload: { command: '–°–æ–≥–ª–∞—Å–∏—Ç—å—Å—è' }, color: 'positive' }).row()
				.textButton({ label: 'üë£', payload: { command: '–û—Ç–∫–∞–∑–∞—Ç—å—Å—è' }, color: 'negative' }).oneTime(),
				answerTimeLimit
			}
		);
		if (answer.isTimeout) { return await context.send(`‚è∞ –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–æ–≥–ª–∞—Å–∏—è –∏—Å—Ç–µ–∫–ª–æ!`) }
		if (!/–¥–∞|yes|–°–æ–≥–ª–∞—Å–∏—Ç—å—Å—è|–∫–æ–Ω–µ—á–Ω–æ|‚úè/i.test(answer.text|| '{}')) {
			await context.send('‚åõ –í—ã –æ—Ç–∫–∞–∑–∞–ª–∏—Å—å –¥–∞—Ç—å —Å–≤–æ–µ —Å–æ–≥–ª–∞—Å–∏–µ, –∞ –∂–∏–≤—ã–º –æ—Ç—Å—é–¥–∞ –Ω–∏–∫—Ç–æ –Ω–µ —É—Ö–æ–¥–∏–ª, –≤–∞—Å —É–ø–∞–∫–æ–≤–∞–ª–∏!');
			return;
		}
		//–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏–≥—Ä–æ–∫–∞
		const counter_players = await prisma.user.count()
		const visit = await context.question(`‚åõ –ü–æ—Å—Ç–∞–≤–∏–≤ —Å–≤–æ—é –ø–æ–¥–ø–∏—Å—å, –≤—ã, —Å—Ç–∞—Ä–∞—è—Å—å –Ω–µ —Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ—Å–æ –Ω–∞ –≥–æ–±–ª–∏–Ω–æ–≤, –≤–æ—à–ª–∏ –≤ –∑–¥–∞–Ω–∏–µ –±–∞–Ω–∫–∞, –ø–æ–¥–æ—à–ª–∏ –∫ —Å—Ç–æ–π–∫–µ, –≥–¥–µ –∑–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π —Å–∏–¥–µ–ª–∞ –ø–æ–ª–Ω–∞—è –≥–æ–±–ª–∏–Ω—à–∞ —Å –±–æ—Ä–æ–¥–∞–≤–∫–æ–π –Ω–∞ –Ω–æ—Å—É.`,
			{ 	
				keyboard: Keyboard.builder()
				.textButton({ label: '–ü–æ–¥–æ–π—Ç–∏ –∏ –ø–æ–∑–¥–æ—Ä–æ–≤–∞—Ç—å—Å—è', payload: { command: '–°–æ–≥–ª–∞—Å–∏—Ç—å—Å—è' }, color: 'positive' }).row()
				.textButton({ label: '–ñ–¥–∞—Ç—å, –ø–æ–∫–∞ –æ–Ω–∞ –∑–∞–∫–æ–Ω—á–∏—Ç', payload: { command: '–û—Ç–∫–∞–∑–∞—Ç—å—Å—è' }, color: 'negative' }).oneTime().inline(),
				answerTimeLimit
			}
		);
		if (visit.isTimeout) { return await context.send(`‚è∞ –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏—Å—Ç–µ–∫–ª–æ!`) }
		let name_check = false
		let datas: any = []
		while (name_check == false) {
			const name = await context.question( `üß∑ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é –≤ –ë–∞–Ω–∫–µ –ì—Ä–∏–Ω–≥–æ—Ç—Ç—Åüè¶! –°—É–¥—è –ø–æ –≤—Å–µ–º—É, –≤—ã –∑–¥–µ—Å—å –≤–ø–µ—Ä–≤—ã–µ. –ù–∞–∑–æ–≤–∏—Ç–µ –≤–∞—à–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é. \n ‚ùó –í–Ω–∏–º–∞–Ω–∏–µ! –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ–¥–æ–º–æ –ª–æ–∂–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø—Ä–µ—Å–ª–µ–¥—É—é—Ç—Å—è –∑–∞–∫–æ–Ω–æ–º!`, timer_text)
			if (name.isTimeout) { return await context.send(`‚è∞ –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ –∏—Å—Ç–µ–∫–ª–æ!`) }
			if (name.text.length <= 64) {
				name_check = true
				datas.push({name: `${name.text}`})
				if (name.text.length > 32) { await context.send(`‚ö† –í–∞—à–∏ –§–ò–û –Ω–µ –≤–ª–µ–∑–∞—é—Ç –Ω–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –±–ª–∞–Ω–∫ (32 —Å–∏–º–≤–æ–ª–∞)! –ì–æ–±–ª–∏–Ω –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–ª–∞–Ω–∫ –ø–æ–≤—ã—à–µ–Ω–Ω–æ–π —à–∏—Ä–∏–Ω—ã, –Ω–æ –Ω—É–∂–Ω–æ –¥–æ–ø–ª–∞—Ç–∏—Ç—å 1G –∑–∞ –∫–∞–∂–¥—ã–π –Ω–µ –ø–æ–º–µ—Å—Ç–∏–≤—à–∏–π—Å—è —Å–∏–º–≤–æ–ª.`) }
			} else { await context.send(`‚õî –í–∞—à–∏ –§–ò–û –Ω–µ –≤–ª–µ–∑–∞—é—Ç –Ω–∞ –±–ª–∞–Ω–∫ –ø–æ–≤—ã—à–µ–Ω–Ω–æ–π —à–∏—Ä–∏–Ω—ã (64 —Å–∏–º–≤–æ–ª–∞), –∏ –≤–æ–æ–±—â–µ, –∑–∞–ø—Ä–µ—â–µ–Ω—ã –º–∞–≥–∏—á–µ—Å–∫–∏–º –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–æ–º! –í—ã–ø–ª–∞—Ç–∏—Ç–µ —à—Ç—Ä–∞—Ñ –≤ 30G –∏–ª–∏ –º—ã –±—É–¥–µ–º –≤—ã–Ω—É–∂–¥–µ–Ω—ã –ø–æ–∑–≤–∞—Ç—å —Å—Ç—Ä–∞–∂–µ–π –ø–æ—Ä—è–¥–∫–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–∞—Å –≤ –ê–∑–∫–∞–±–∞–Ω.`) }
		}
		let answer_check = false
		while (answer_check == false) {
			const answer1 = await context.question(`üß∑ –£–∫–∞–∂–∏—Ç–µ –≤–∞—à–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ –≤ –•–æ–≥–≤–∞—Ä—Ç—Å –û–Ω–ª–∞–π–Ω`,
				{	
					keyboard: Keyboard.builder()
					.textButton({ label: '–£—á–µ–Ω–∏–∫', payload: { command: 'student' }, color: 'secondary' })
					.textButton({ label: '–ü—Ä–æ—Ñ–µ—Å—Å–æ—Ä', payload: { command: 'professor' }, color: 'secondary' })
					.textButton({ label: '–ñ–∏—Ç–µ–ª—å', payload: { command: 'citizen' }, color: 'secondary' })
					.oneTime().inline(), answerTimeLimit
				}
			)
			if (answer1.isTimeout) { return await context.send(`‚è∞ –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –≤—ã–±–æ—Ä–∞ –ø–æ–ª–æ–∂–µ–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ!`) }
			if (!answer1.payload) {
				await context.send(`üí° –ñ–º–∏—Ç–µ —Ç–æ–ª—å–∫–æ –ø–æ –∫–Ω–æ–ø–∫–∞–º —Å –∏–∫–æ–Ω–∫–∞–º–∏!`)
			} else {
				datas.push({class: `${answer1.text}`})
				answer_check = true
			}
		}
		let spec_check = false
		while (spec_check == false) {
			const name = await context.question( `üß∑ –£–∫–∞–∂–∏—Ç–µ –≤–∞—à—É —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –≤ –•–æ–≥–≤–∞—Ä—Ç—Å –û–Ω–ª–∞–π–Ω. –ï—Å–ª–∏ –≤—ã –ø—Ä–æ—Ñ–µ—Å—Å–æ—Ä/–∂–∏—Ç–µ–ª—å, –≤–≤–µ–¥–∏—Ç–µ –¥–æ–ª–∂–Ω–æ—Å—Ç—å. –ï—Å–ª–∏ –≤—ã —Å—Ç—É–¥–µ–Ω—Ç, —É–∫–∞–∂–∏—Ç–µ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç`, timer_text)
			if (name.isTimeout) { return await context.send(`‚è∞ –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –≤—ã–±–æ—Ä–∞ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∏—Å—Ç–µ–∫–ª–æ!`) }
			if (name.text.length <= 30) {
				spec_check = true
				datas.push({spec: `${name.text}`})
			} else { await context.send(`üí° –í–≤–≤–µ–¥–∏—Ç–µ –¥–æ 30 —Å–∏–º–≤–æ–ª–æ–≤ –≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ!`) }
		}
		const save = await prisma.user.create({	data: {	idvk: context.senderId, name: datas[0].name, class: datas[1].class, spec: datas[2].spec, id_role: 1, gold: 65 } })
		await context.send(`‚åõ –ë–ª–∞–≥–æ–¥–∞—Ä—é –∑–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ ${save.class} ${save.name}, ${save.spec}. \n ‚öñ–í—ã –ø–æ–ª—É—á–∏–ª–∏ –±–∞–Ω–∫–æ–≤—Å–∫—É—é –∫–∞—Ä—Ç—É UID: ${save.id}. \n üè¶–í–∞–º –∑–∞—á–∏—Å–ª–µ–Ω–æ ${save.gold} –≥–∞–ª–ª–µ–æ–Ω–æ–≤`)
		console.log(`Success save user idvk: ${context.senderId}`)
		await context.send(`‚Äº –°–ø–∏—Å–æ–∫ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –≤–µ—â–µ–π: \n 1. –í–æ–ª—à–µ–±–Ω–∞—è –ø–∞–ª–æ—á–∫–∞ \n 2. –°–æ–≤–∞, –∫–æ—à–∫–∞ –∏–ª–∏ –∂–∞–±–∞ \n 3. –ö–æ–º–ø–ª–µ–∫—Ç —É—á–µ–±–Ω–∏–∫–æ–≤ \n \n –ü–æ—Å–µ—Ç–∏—Ç–µ –ö–æ—Å–æ–π –ø–µ—Ä–µ—É–ª–æ–∫ –∏ –ø—Ä–∏–æ–±—Ä–µ—Ç–∏—Ç–µ –∏—Ö –ø–µ—Ä–≤—ã–º –¥–µ–ª–æ–º!`)
		const check_bbox = await prisma.blackBox.findFirst({ where: { idvk: context.senderId } })
		const ans_selector = `‚Åâ ${save.class} @id${save.idvk}(${save.name}) ${save.spec} ${!check_bbox ? "–ª–µ–≥–∞–ª—å–Ω–æ" : "–ù–ï–õ–ï–ì–ê–õ–¨–ù–û"} –ø–æ–ª—É—á–∞–µ—Ç –±–∞–Ω–∫–æ–≤—Å–∫—É—é –∫–∞—Ä—Ç—É!`
		await vk.api.messages.send({
			peer_id: chat_id,
			random_id: 0,
			message: ans_selector
		})
		await Keyboard_Index(context, `üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞: –ö–æ–≥–¥–∞ –≤—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª–∏ –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –Ω–µ—Ç, –Ω–∞–ø–∏—à–∏—Ç–µ –∫–ª–∞–≤–∞!`)
	} else {
		const user_count = await prisma.user.count()
		const sums: any = await prisma.user.aggregate({ _sum: { gold: true, lvl: true, xp: true } })
		const artefacts: any = await prisma.artefact.count()
		await Image_Random(context, "bank")
		if (user_check.id_role != 1) {
			await Keyboard_Index(context, `üè¶ –ë–∞–Ω–∫ –ì—Ä–∏–Ω–≥–æ—Ç—Ç—Å –û–Ω–ª–∞–π–Ω 0.76v: \n ${user_count}üë• ${sums._sum.gold}üí∞ ${sums._sum.lvl*150+sums._sum.xp}üßô ${artefacts}üîÆ \n\n üí° –î–ª—è —Å–≤—è–∑–∏ —Å –Ω–∞–º–∏ –Ω–∞–ø–∏—à–∏—Ç–µ: –ø–æ–∑–≤–∞—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞`)
		} else {
			await Keyboard_Index(context, `üè¶ –ë–∞–Ω–∫ –ì—Ä–∏–Ω–≥–æ—Ç—Ç—Å –û–Ω–ª–∞–π–Ω 0.76v: \n\n üí° –î–ª—è —Å–≤—è–∑–∏ —Å –Ω–∞–º–∏ –Ω–∞–ø–∏—à–∏—Ç–µ: –ø–æ–∑–≤–∞—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞`)
		}
	}
	return next();
})

vk.updates.start().catch(console.error);