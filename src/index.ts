import { VK, Keyboard, IMessageContextSendOptions, ContextDefaultState, MessageContext } from 'vk-io';
import { HearManager } from '@vk-io/hear';
import { PrismaClient } from '@prisma/client'
import {
    QuestionManager,
    IQuestionMessageContext
} from 'vk-io-question';
import { randomInt } from 'crypto';
import { timeStamp } from 'console';
import { registerUserRoutes } from './engine/player'
import { InitGameRoutes } from './engine/init';
import { send } from 'process';

//–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
export const vk = new VK({
	token: "b603c7efd00e1ce663d70a18c8915686bbdfee594a2f8d66d77620c712df5e9c2ae9e211c4164b80df6f9",
	pollingGroupId: 207638246
	//token: "vk1.a.A4bwKWEBoC3HFdmknXnayrmO4_FR9i7SRB5hNWx0JbA8PDAtZBMQ11HY_aBQfS9l7BGfXvi6z7iGFoitiOKjouy5Ewsdt8oVC1K2zFeOn4ucbwfquLSRJfXQ0jo6Ixhp7vRXG7vchkCIuiP3bh2XjeqRh66ezpvX4ohqgdiOGJhobuy_413JY_GrBrAcJ40o",
	//pollingGroupId: 214352744
	//token: 'd0d096ed5933ced08bc674c08134e4e47603a0443f4972d6595024ae32f8677b62032ec53ebfddc80ff16'
});

//–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
const questionManager = new QuestionManager();
const hearManager = new HearManager<IQuestionMessageContext>();
const prisma = new PrismaClient()
export const root = 590776444
/*prisma.$use(async (params, next) => {
	console.log('This is middleware!')
	// Modify or interrogate params here
	console.log(params)
	return next(params)
})*/

//–Ω–∞—Å—Ç—Ä–æ–π–∫–∞
vk.updates.use(questionManager.middleware);
vk.updates.on('message_new', hearManager.middleware);

//—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ä–æ—É—Ç–æ–≤ –∏–∑ –¥—Ä—É–≥–∏—Ö –∫–ª–∞—Å—Å–æ–≤
InitGameRoutes(hearManager)
registerUserRoutes(hearManager)


//–º–∏–¥–¥–ª–µ–≤–∞—Ä –¥–ª—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
vk.updates.on('message_new', async (context: any, next: any) => {
	//–ø—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–∞—Ö –¥–∞–Ω–Ω—ã—Ö
	const user_check = await prisma.user.findFirst({
		where: {
			idvk: context.senderId
		}
	})
	//–µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç, —Ç–æ –Ω–∞—á–∏–Ω–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
	if (!user_check) {
		//—Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É
		const answer = await context.question(
			`–ö–∞–∫ —Ç–æ–ª—å–∫–æ –≤—ã –æ—Ç–∫—Ä—ã–ª–∏ –¥–≤–µ—Ä—å –±–∞–Ω–∫–∞ –ì—Ä–∏–Ω–≥–æ—Ç—Ç—Åüè¶, –∏–∑ –Ω–∏–æ—Ç–∫—É–¥–∞ –ø–µ—Ä–µ–¥ –≤–∞–º–∏ –ø—Ä–µ–¥—Å—Ç–∞–ª–∏ –¥–≤–∞ –≥–æ–±–ª–∏–Ω–∞ –∏ –Ω–∞–¥–º–µ–Ω–Ω–æ —Å–∫–∞–∑–∞–ª–∏:
			- –í–∏–¥–∏–º–æ, –≤—ã –∑–¥–µ—Å—å –≤–ø–µ—Ä–≤—ã–µ. –ü—Ä–µ–∂–¥–µ —á–µ–º –≤–æ–π—Ç–∏, —Ä–∞—Å–ø–∏—à–∏—Ç–µ—Å—å –∑–¥–µ—Å—å –æ —Å–≤–æ–µ–º —Å–æ–≥–ª–∞—Å–∏–∏ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.
			–í —Ç–æ—Ç –∂–µ –º–∏–≥ –≤ –∏—Ö —Ä—É–∫–∞—Ö –º–∞–≥–∏—á–µ—Å–∫–∏–º –æ–±—Ä–∞–∑–æ–º –ø–æ—è–≤–∏–ª—Å—è –ø–µ—Ä–≥–∞–º–µ–Ω—Ç.`,
			{
				keyboard: Keyboard.builder()
				.textButton({
					label: '–¥–∞',
					payload: {
						command: '–°–æ–≥–ª–∞—Å–∏—Ç—å—Å—è'
					},
					color: 'positive'
				})
				.row()
				.textButton({
					label: '–û—Ç–∫–∞–∑–∞—Ç—å—Å—è',
					payload: {
						command: '–û—Ç–∫–∞–∑–∞—Ç—å—Å—è'
					},
					color: 'negative'
				}).oneTime()
			}
		);
		
		if (!/–¥–∞|yes|–°–æ–≥–ª–∞—Å–∏—Ç—å—Å—è|–∫–æ–Ω–µ—á–Ω–æ/i.test(answer.text|| '{}')) {
			await context.send('–í—ã –æ—Ç–∫–∞–∑–∞–ª–∏—Å—å –¥–∞—Ç—å —Å–≤–æ–µ —Å–æ–≥–ª–∞—Å–∏–µ, –∞ –∂–∏–≤—ã–º –æ—Ç—Å—é–¥–∞ –Ω–∏–∫—Ç–æ –Ω–µ —É—Ö–æ–¥–∏–ª, –≤–∞—Å —É–ø–∞–∫–æ–≤–∞–ª–∏!');
			return;
		}

		//–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏–≥—Ä–æ–∫–∞
		const counter_players = await prisma.user.count()
		await context.question(`–ü–æ—Å—Ç–∞–≤–∏–≤ —Å–≤–æ—é –ø–æ–¥–ø–∏—Å—å, –≤—ã, —Å—Ç–∞—Ä–∞—è—Å—å –Ω–µ —Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ—Å–æ –Ω–∞ –≥–æ–±–ª–∏–Ω–æ–≤, –≤–æ—à–ª–∏ –≤ –∑–¥–∞–Ω–∏–µ –±–∞–Ω–∫–∞ –ì—Ä–∏–Ω–≥–æ—Ç—Ç—Å, –ø–æ–¥–æ—à–ª–∏ –∫ —Å—Ç–æ–π–∫–µ, –≥–¥–µ –∑–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π —Å–∏–¥–µ–ª–∞ –ø–æ–ª–Ω–∞—è –≥–æ–±–ª–∏–Ω—à–∞ —Å –±–æ—Ä–æ–¥–∞–≤–∫–æ–π –Ω–∞ –Ω–æ—Å—É.`,
			{
				keyboard: Keyboard.builder()
				.textButton({
					label: '–ü–æ–¥–æ–π—Ç–∏ –∏ –ø–æ–∑–¥–∞—Ä–æ–≤–∞—Ç—å—Å—è',
					payload: {
						command: '–°–æ–≥–ª–∞—Å–∏—Ç—å—Å—è'
					},
					color: 'positive'
				})
				.row()
				.textButton({
					label: '–ñ–¥–∞—Ç—å, –ø–æ–∫–∞ –æ–Ω–∞ –∑–∞–∫–æ–Ω—á–∏—Ç',
					payload: {
						command: '–û—Ç–∫–∞–∑–∞—Ç—å—Å—è'
					},
					color: 'negative'
				}).oneTime().inline()
			}
		);
		let name_check = false
		let datas: any = []
		while (name_check == false) {
			const name = await context.question(`
			–ü—Ä–∏–≤–µ—Ç—Å–≤—É—é –≤ –ë–∞–Ω–∫–µ –ì—Ä–∏–Ω–≥–æ—Ç—Ç—Åüè¶. –°—É–¥—è –ø–æ –≤—Å–µ–º—É, –≤—ã –∑–¥–µ—Å—å –≤–ø–µ—Ä–≤—ã–µ. –ù–∞–∑–æ–≤–∏—Ç–µ –≤–∞—à–µ –ø–æ–ª–Ω–æ–µ –∏–º—è.
			‚ùó–í–Ω–∏–º–∞–Ω–∏–µ! –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ–¥–æ–º–æ –ª–æ–∂–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø—Ä–µ—Å–ª–µ–¥—É—é—Ç—Å—è –∑–∞–∫–æ–Ω–æ–º!
			`)
			if (name.text.length <= 30) {
				name_check = true
				datas.push({name: `${name.text}`})
			} else {
				context.send(`–ù—É–∂–Ω–æ –±—ã–ª–æ –≤–µ—Å—Ç–∏ –§–ò–û –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –¥–æ 30 —Å–∏–º–≤–æ–ª–æ–≤ –≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ!`)
			}
		}
		let answer_check = false
		while (answer_check == false) {
			const answer1 = await context.question(`
				–£–∫–∞–∂–∏—Ç–µ –≤–∞—à–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ –≤ –•–æ–≥–≤–∞—Ä—Ç—Å–µ –û–Ω–ª–∞–π–Ω
				`,
				{
					keyboard: Keyboard.builder()
					.textButton({
						label: '–£—á–µ–Ω–∏–∫',
						payload: {
							command: 'grif'
						},
						color: 'secondary'
					})
					.textButton({
						label: '–ü—Ä–æ—Ñ–µ—Å—Å–æ—Ä',
						payload: {
							command: 'coga'
						},
						color: 'secondary'
					})
					.textButton({
						label: '–ñ–∏—Ç–µ–ª—å',
						payload: {
							command: 'sliz'
						},
						color: 'secondary'
					}).oneTime().inline()
				}
			)
			if (!answer1.payload) {
				context.send(`–ñ–º–∏—Ç–µ —Ç–æ–ª—å–∫–æ –ø–æ –∫–Ω–æ–ø–∫–∞–º —Å –∏–∫–æ–Ω–∫–∞–º–∏!`)
			} else {
				datas.push({class: `${answer1.text}`})
				answer_check = true
			}
		}
		
		let spec_check = false
		while (spec_check == false) {
			const name = await context.question(`
				–£–∫–∞–∂–∏—Ç–µ –≤–∞—à—É —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –≤ –•–æ–≥–≤–∞—Ä—Ç—Å –û–Ω–ª–∞–π–Ω. –ï—Å–ª–∏ –≤—ã –ø—Ä–æ—Ñ–µ—Å—Å–æ—Ä/–∂–∏—Ç–µ–ª—å, –≤–≤–µ–¥–∏—Ç–µ –¥–æ–ª–∂–Ω–æ—Å—Ç—å. –ï—Å–ª–∏ –≤—ã —Å—Ç—É–¥–µ–Ω—Ç, —É–∫–∞–∂–∏—Ç–µ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç
			`)
			if (name.text.length <= 30) {
				spec_check = true
				datas.push({spec: `${name.text}`})
			} else {
				context.send(`–í–≤–≤–µ–¥–∏—Ç–µ –¥–æ 30 —Å–∏–º–≤–æ–ª–æ–≤ –≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ!`)
			}
		}
		
		const save = await prisma.user.create({
			data: {
				idvk: context.senderId,
				name: datas[0].name,
				class: datas[1].class,
				spec: datas[2].spec,
				id_role: 1
			}
		})
		context.send(`
			–ë–ª–∞–≥–æ–¥–∞—Ä—é –∑–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ ${save.class} ${save.name}, ${save.spec}.
			‚öñ–í—ã –ø–æ–ª—É—á–∏–ª–∏ –±–∞–Ω–∫–æ–≤—Å–∫—É—é –∫–∞—Ä—Ç—É UID: ${save.id}.
			üè¶–í–∞–º –∑–∞—á–∏—Å–ª–µ–Ω–æ ${save.gold} –≥–∞–ª–ª–µ–æ–Ω–æ–≤
		`)
		console.log(`Success save user idvk: ${context.senderId}`)
		console.log(save)
		context.send(`–°–ø–∏—Å–æ–∫ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –≤–µ—â–µ–π:
		1. –í–æ–ª—à–µ–±–Ω–∞—è –ø–∞–ª–æ—á–∫–∞
		2. –°–æ–≤–∞, –∫–æ—à–∫–∞ –∏–ª–∏ –∂–∞–±–∞
		3. –ö–æ–º–ø–ª–µ–∫—Ç —É—á–µ–±–Ω–∏–∫–æ–≤
		
		–ü–æ—Å–µ—Ç–∏—Ç–µ –ö–æ—Å–æ–π –ø–µ—Ä–µ—É–ª–æ–∫ –∏ –ø—Ä–∏–æ–±—Ä–µ—Ç–∏—Ç–µ –∏—Ö –ø–µ—Ä–≤—ã–º –¥–µ–ª–æ–º!`)
		context.send(`–ü–æ–¥—Å–∫–∞–∑–∫–∞: –ö–æ–≥–¥–∞ –≤—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª–∏ –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –Ω–µ—Ç, –Ω–∞–ø–∏—à–∏—Ç–µ –∫–ª–∞–≤–∞!`)
	} else {
		if (user_check.idvk == root && user_check.id_role === 2) {
			context.send(`Bank system 1.0v –ø—Ä–∏–≤–µ—Ç—Å–≤—É–µ—Ç –≤–∞—Å, —á—Ç–æ —É–≥–æ–¥–Ω–æ?`,
				{
					keyboard: Keyboard.builder()
					.textButton({
						label: '–∫–∞—Ä—Ç–∞',
						payload: {
							command: 'grif'
						},
						color: 'secondary'
					})
					.textButton({
						label: '–∏–Ω–≤–µ–Ω—Ç–∞—Ä—å',
						payload: {
							command: 'sliz'
						},
						color: 'secondary'
					}).row()
					.textButton({
						label: '–∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã',
						payload: {
							command: 'coga'
						},
						color: 'secondary'
					})
					.textButton({
						label: '–∞–¥–º–∏–Ω—ã',
						payload: {
							command: 'coga'
						},
						color: 'secondary'
					}).row()
					.textButton({
						label: '–ö–æ—Å–æ–π –ø–µ—Ä–µ—É–ª–æ–∫',
						payload: {
							command: 'sliz'
						},
						color: 'secondary'
					}).row()
					.textButton({
						label: '–æ–ø–µ—Ä–∞—Ü–∏–∏',
						payload: {
							command: 'sliz'
						},
						color: 'secondary'
					})
					.textButton({
						label: '–ø—Ä–∞–≤–∞',
						payload: {
							command: 'sliz'
						},
						color: 'secondary'
					}).oneTime()
				}
			)
		}else if (user_check.id_role === 2) {
			context.send(`Bank system 1.0v –ø—Ä–∏–≤–µ—Ç—Å–≤—É–µ—Ç –≤–∞—Å, —á—Ç–æ —É–≥–æ–¥–Ω–æ?`,
				{
					keyboard: Keyboard.builder()
					.textButton({
						label: '–∫–∞—Ä—Ç–∞',
						payload: {
							command: 'grif'
						},
						color: 'secondary'
					})
					.textButton({
						label: '–∏–Ω–≤–µ–Ω—Ç–∞—Ä—å',
						payload: {
							command: 'sliz'
						},
						color: 'secondary'
					}).row()
					.textButton({
						label: '–∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã',
						payload: {
							command: 'coga'
						},
						color: 'secondary'
					})
					.textButton({
						label: '–∞–¥–º–∏–Ω—ã',
						payload: {
							command: 'coga'
						},
						color: 'secondary'
					}).row()
					.textButton({
						label: '–ö–æ—Å–æ–π –ø–µ—Ä–µ—É–ª–æ–∫',
						payload: {
							command: 'sliz'
						},
						color: 'secondary'
					}).row()
					.textButton({
						label: '–æ–ø–µ—Ä–∞—Ü–∏–∏',
						payload: {
							command: 'sliz'
						},
						color: 'secondary'
					}).oneTime()
				}
			)
		} 
		if (user_check.id_role === 1) {
			context.send(`Bank system 1.0v –ø—Ä–∏–≤–µ—Ç—Å–≤—É–µ—Ç –≤–∞—Å, —á—Ç–æ —É–≥–æ–¥–Ω–æ?`,
				{
					keyboard: Keyboard.builder()
					.textButton({
						label: '–∫–∞—Ä—Ç–∞',
						payload: {
							command: 'grif'
						},
						color: 'secondary'
					}).row()
					.textButton({
						label: '–∏–Ω–≤–µ–Ω—Ç–∞—Ä—å',
						payload: {
							command: 'sliz'
						},
						color: 'secondary'
					}).row()
					.textButton({
						label: '–∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã',
						payload: {
							command: 'coga'
						},
						color: 'secondary'
					}).row()
					.textButton({
						label: '–ö–æ—Å–æ–π –ø–µ—Ä–µ—É–ª–æ–∫',
						payload: {
							command: 'sliz'
						},
						color: 'secondary'
					}).oneTime()
				}
			)
		}
	}
	prisma.$disconnect()
	return next();
})

vk.updates.startPolling().catch(console.error);