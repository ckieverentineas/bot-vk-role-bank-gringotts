import { PrismaClient } from "@prisma/client"
import { randomInt } from "crypto"
import { Attachment, Keyboard, KeyboardBuilder } from "vk-io"
import { answerTimeLimit, chat_id, root, vk } from "../.."
import { Image_Interface, Image_Random } from "./imagecpu"
import { readFileSync, promises as fsPromises } from 'fs'

const prisma = new PrismaClient()

export async function Gen_Inline_Button(context: any, weapon_type: any) {
    let checker = false
    let counter = 0
    let current = 0
    let modif = 0
    let skill:any = {}
    while (checker == false) {
        let keyboard = Keyboard.builder()
        counter = 0
        current = modif
        const limit = 6
        let weapon_list = ''
        while (current < weapon_type.length && counter < limit ) {
            keyboard.textButton({
                label: weapon_type[current].label,
                payload: {
                    command: weapon_type[current].id
                },
                color: 'primary'
            })
            weapon_list += `- ${weapon_type[current].description} \n`
            counter++
            current++
            if (counter%2 == 0) {
                keyboard.row()
            }
        }
        keyboard.row()
        .textButton({
            label: '<',
            payload: {
                command: "left"
            },
            color: 'primary'
        })
        .textButton({
            label: '–Ω–∞–∑–∞–¥',
            payload: {
                command: 'back'
            },
            color: 'primary'
        })
        .textButton({
            label: '>',
            payload: {
                command: 'right'
            },
            color: 'primary'
        })
        
        skill = await context.question(`${weapon_list}`, { keyboard: keyboard.inline(), answerTimeLimit } )
        if (skill.isTimeout) { return await context.send(`‚è∞ –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –≤–∞—à–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏—Å—Ç–µ–∫–ª–æ!`) }
        if (!skill.payload) {
            context.send('–ñ–º–∏—Ç–µ –ø–æ inline –∫–Ω–æ–ø–∫–∞–º!')
        } else {
            if (skill.payload.command == 'back') {
                context.send('–í—ã –Ω–∞–∂–∞–ª–∏ –Ω–∞–∑–∞–¥')
                modif = 0
                continue
            }
            if (skill.payload.command == 'left') {
                modif-limit >= 0 && modif < weapon_type.length ? modif-=limit : context.send('–ü–æ–∑–∞–¥–∏ –Ω–∏—á–µ–≥–æ –Ω–µ—Ç!')
                continue
            }
            if (skill.payload.command == 'right') {
                console.log('test ' + modif + ' total:' + weapon_type.length)
                modif+limit < weapon_type.length ? modif+=limit: context.send('–í–ø–µ—Ä–µ–¥–∏ –Ω–∏—á–µ–≥–æ –Ω–µ—Ç')
                continue
            }
            checker = true
            return skill
        }
    }
}

export async function Accessed(context: any) {
    const role: any = await prisma.user.findFirst({
        where: {
            idvk: context.senderId
        }
    })
    return role.id_role
}

export async function Book_Random_String(filename: string) {
    try {
        const contents = await fsPromises.readFile(filename, 'utf-8');
        const arr: any = contents.split(/\r?\n/);
        const clear = await arr.filter((value: any) => value !== undefined && value.length > 5);
        return clear[randomInt(0, clear.length - 1)];
    } catch (err) {
        console.log(err);
    }
}
export async function Keyboard_Index(context: any, messa: any) {
    const user_check: any = await prisma.user.findFirst({ where: { idvk: context.senderId } })
    const data = await Book_Random_String('./src/book/title.txt')
    context.send(`üìú ${data}`, {
        keyboard: new KeyboardBuilder().callbackButton({
            label: 'üîî –î–∑–∏–Ω—å',
            payload: {
                command: 'buy',
                item: 'coffee'
            }
        }).inline()
    })
    if (user_check.idvk == root && user_check.id_role === 2) {
        await context.send(`${messa}`,
            {
                keyboard: Keyboard.builder()
                .textButton({ label: '–∫–∞—Ä—Ç–∞', payload: { command: 'grif' }, color: 'secondary' })
                .textButton({ label: '–∏–Ω–≤–µ–Ω—Ç–∞—Ä—å', payload: { command: 'sliz' }, color: 'secondary' }).row()
                .textButton({ label: '–∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã', payload: { command: 'coga' }, color: 'secondary' })
                .textButton({ label: '–∞–¥–º–∏–Ω—ã', payload: { command: 'coga' }, color: 'secondary' }).row()
                .textButton({ label: '–ö–æ—Å–æ–π –ø–µ—Ä–µ—É–ª–æ–∫', payload: { command: 'sliz' }, color: 'positive' })
                .textButton({ label: '–£—Å–ª—É–≥–∏', payload: { command: 'sliz' }, color: 'primary' }).row()
                .textButton({ label: '–æ–ø–µ—Ä–∞—Ü–∏–∏', payload: { command: 'sliz' }, color: 'negative' })
                .textButton({ label: '–ø—Ä–∞–≤–∞', payload: { command: 'sliz' }, color: 'negative' }).oneTime()
            }
        )
    }else if (user_check.id_role === 2) {
        await context.send(`${messa}`,
            {
                keyboard: Keyboard.builder()
                .textButton({
                    label: '–∫–∞—Ä—Ç–∞',
                    payload: {
                        command: 'grif'
                    },
                    color: 'secondary'
                })
                .textButton({
                    label: '–∏–Ω–≤–µ–Ω—Ç–∞—Ä—å',
                    payload: {
                        command: 'sliz'
                    },
                    color: 'secondary'
                }).row()
                .textButton({
                    label: '–∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã',
                    payload: {
                        command: 'coga'
                    },
                    color: 'secondary'
                })
                .textButton({
                    label: '–∞–¥–º–∏–Ω—ã',
                    payload: {
                        command: 'coga'
                    },
                    color: 'secondary'
                }).row()
                .textButton({
                    label: '–ö–æ—Å–æ–π –ø–µ—Ä–µ—É–ª–æ–∫',
                    payload: {
                        command: 'sliz'
                    },
                    color: 'positive'
                })
                .textButton({
                    label: '–£—Å–ª—É–≥–∏',
                    payload: {
                        command: 'sliz'
                    },
                    color: 'primary'
                }).row()
                .textButton({
                    label: '–æ–ø–µ—Ä–∞—Ü–∏–∏',
                    payload: {
                        command: 'sliz'
                    },
                    color: 'negative'
                }).oneTime()
            }
        )
    } 
    if (user_check.id_role === 1) {
        await context.send(`${messa}`,
            {
                keyboard: Keyboard.builder()
                .textButton({
                    label: '–∫–∞—Ä—Ç–∞',
                    payload: {
                        command: 'grif'
                    },
                    color: 'secondary'
                }).row()
                .textButton({
                    label: '–∏–Ω–≤–µ–Ω—Ç–∞—Ä—å',
                    payload: {
                        command: 'sliz'
                    },
                    color: 'secondary'
                }).row()
                .textButton({
                    label: '–∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã',
                    payload: {
                        command: 'coga'
                    },
                    color: 'secondary'
                }).row()
                .textButton({
                    label: '–ö–æ—Å–æ–π –ø–µ—Ä–µ—É–ª–æ–∫',
                    payload: {
                        command: 'sliz'
                    },
                    color: 'positive'
                }).textButton({
                    label: '–£—Å–ª—É–≥–∏',
                    payload: {
                        command: 'sliz'
                    },
                    color: 'primary'
                }).oneTime()
            }
        )
    }
    if (randomInt(0, 100) < 5) {
        const user_list: any = await prisma.user.findMany({ where: { private: false} })
        const location_list: any = {
            "–•–æ–≥–≤–∞—Ä—Ç—Å": [ "–ë–æ–ª—å—à–æ–π –ó–∞–ª", "–ê—Å—Ç—Ä–æ–Ω–æ–º–∏—á–µ—Å–∫–∞—è –ë–∞—à–Ω—è", "–ì—Ä–µ–º—É—á–∞—è –ò–≤–∞", "–ß–∞—Å–æ–≤–∞—è –ë–∞—à–Ω—è", "–ö—É—Ö–Ω—è", "–¢—É–∞–ª–µ—Ç –ü–ª–∞–∫—Å—ã –ú–∏—Ä—Ç–ª", "–ö—É—Ö–Ω—è", "–ó–∞–ª –ù–∞–∫–∞–∑–∞–Ω–∏–π", "–í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –î–≤–æ—Ä", "–ó–∞–ø—Ä–µ—Ç–Ω—ã–π –ª–µ—Å", "–ü—Ä–∞–≤—ã–π –∫–æ—Ä–∏–¥–æ—Ä | –ü—è—Ç—ã–π —ç—Ç–∞–∂", "–î–µ—Ä–µ–≤—è–Ω–Ω—ã–π –º–æ—Å—Ç", "–°–æ–≤—è—Ç–Ω—è", "–í—ã—Ä—É—á–∞–π-–∫–æ–º–Ω–∞—Ç–∞", "–ö–æ–º–Ω–∞—Ç–∞ –ü–∏–≤–∑–∞", "–ß–µ—Ä–¥–∞–∫", "–ë–æ–ª—å–Ω–∏—á–Ω–æ–µ –∫—Ä—ã–ª–æ", "–í–µ—Å—Ç–∏–±—é–ª—å", "–û–ø—É—à–∫–∞ –ª–µ—Å–∞", "–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ –•–æ–≥–≤–∞—Ä—Ç—Å–∞", "–ß—ë—Ä–Ω–æ–µ –û–∑–µ—Ä–æ", "–õ–µ—Å—Ç–Ω–∏—á–Ω—ã–µ –ø—Ä–æ–ª—ë—Ç—ã", "–ö–∞–º–µ–Ω–Ω—ã–π –ö—Ä—É–≥", "–ö–∞–±–∏–Ω–µ—Ç –ó–µ–ª—å–µ–≤–∞—Ä–µ–Ω–∏—è", "–ü–æ–¥–∑–µ–º–µ–ª—å—è –•–æ–≥–≤–∞—Ä—Ç—Å–∞", "–ü—Ä–∞—á–µ—á–Ω–∞—è", "–ó–∞–ª –°–ª–∞–≤—ã", "–£—á–µ–±–Ω—ã–π –ó–∞–ª", "–¢–µ–ø–ª–∏—Ü—ã", "–¢–∞–π–Ω–∞—è –ö–æ–º–Ω–∞—Ç–∞", "–ö–ª–∞–¥–±–∏—â–µ", "–õ–æ–¥–æ—á–Ω—ã–π —Å–∞—Ä–∞–π", "–ö–∞–±–∏–Ω–µ—Ç —à–∫–æ–ª—å–Ω–æ–≥–æ –ø—Å–∏—Ö–æ–ª–æ–≥–∞", "–ö–æ—Ä–∏–¥–æ—Ä –û–¥–Ω–æ–≥–ª–∞–∑–æ–π –í–µ–¥—å–º—ã", "–ö–æ–º–Ω–∞—Ç–∞ 234-00", "–£—á–∏—Ç–µ–ª—å—Å–∫–∞—è", "–•–∏–∂–∏–Ω–∞ –•–∞–≥—Ä–∏–¥–∞", "–ö–æ—Ä–∏–¥–æ—Ä—ã", "–£—á–∏—Ç–µ–ª—å—Å–∫–∞—è"],
            "–ë—Ä–∏—Å—Ç–æ–Ω": [ '–°—Ç—Ä–∏–ø-–∫–ª—É–± "MurMur angels-club"', "–§–∏–ª–∏–∞–ª –ù–µ–∫—Ä–æ–º–∞–Ω—Ç–∏–∏ –∏ –ë–µ—Å–æ–∏–∑–≥–Ω–∞–Ω–∏—è", "–°—É–¥", "–ó–∞–ú–£–†—á–∞—Ç–µ–ª—å–Ω–æ–µ –∫–∞—Ñ–µ", "–ü–∞—Ä–∫", "–ë–æ–ª—å–Ω–∏—Ü–∞", "–ú—Ä–∞–∫–æ–±–æ—Ä—á–µ—Å–∫–∏–π —É—á–∞—Å—Ç–æ–∫", "–ó–∞–ø–æ–≤–µ–¥–Ω–∏–∫", "–¢–æ—Ä–≥–æ–≤—ã–π —Ü–µ–Ω—Ç—Ä", "–õ–∞–≤–∫–∞ –∑–µ–ª–∏–π –∏ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤", '–ë–∞—Ä "–£ –ü—å—é—Å–∏ –∏ –í–∏–Ω—Ç–µ—Ä"', "–ú–∞–≥–∏—á–µ—Å–∫–∞—è –∞–ø—Ç–µ–∫–∞", "–ë—É—Ö—Ç–∞ –ò–Ω–≥–µ—Ä–Ω–∞—Ö", "–§–∏–ª–∏–∞–ª –ì–∏–ª—å–¥–∏–∏ –ê—Ä—Ç–µ—Ñ–∞–∫—Ç–æ—Ä–æ–≤", '–û—Ç–µ–ª—å "–ú–µ–ª–ª–æ—É –ë—Ä—É–∫"', "–ó–∞–∫—Ä—ã—Ç–∞—è –ø–∏—Ü—Ü–µ—Ä–∏—è", "–í–æ–ª—à–µ–±–Ω—ã–π –∑–≤–µ—Ä–∏–Ω–µ—Ü",],
            "–ü–∏–≤–æ –∏–∑ –•–æ–≥—Å–º–∏–¥–∞": [ '–ü–∞–± "–¢—Ä–∏ –º–µ—Ç–ª—ã"', '–¢—Ä–∞–∫—Ç–∏—Ä "–ö–∞–±–∞–Ω—å—è –≥–æ–ª–æ–≤–∞"']
        }
        const location_name : any = ["–•–æ–≥–≤–∞—Ä—Ç—Å", "–ë—Ä–∏—Å—Ç–æ–Ω"]
        const selector = randomInt(0, location_name.length)
        const tara = randomInt(0, location_list[location_name[selector]].length)
        const rana = randomInt(0, user_list.length)
        const rana2 = randomInt(0, user_list.length)
        const reward: number = randomInt(5,50)
        const reward2: number = randomInt(1,5)
        const task_list: any = { "–ë–æ–ª—å—à–æ–π –∑–∞–ª": ["–ü–æ–ø—ã—Ç–∞—Ç—å—Å—è —É–∫—Ä–∞—Å—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–≤–µ—á–µ–∫ —Å –ø–æ—Ç–æ–ª–∫–∞", "–û–∫–∫—É–ø–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–æ–ª –¥—Ä—É–≥–æ–≥–æ –§–∞–∫—É–ª—å—Ç–µ—Ç–∞", "–ü–æ–¥–∫–∏–Ω—É—Ç—å –≤ —Ç–∞—Ä–µ–ª–∫—É —Å —á—É–∂–∫–æ–π –µ–¥–æ–π –≥–æ—Ä—Å—Ç–∫—É —Å–æ–ª–∏", "–ü—Ä–∏–¥—É–º–∞—Ç—å –ø–ª–∞–Ω –ø–æ –∑–∞—Ö–≤–∞—Ç—É –º–∏—Ä–∞", "–ü—Ä–∏–¥—É–º–∞—Ç—å –Ω–æ–≤—ã–π –ø—Ä–∞–∑–¥–Ω–∏–∫ –∏ –æ—Ç–º–µ—Ç–∏—Ç—å –µ–≥–æ", "–°–æ–∑–¥–∞—Ç—å —Å–µ–º—å—é —è–±–ª–æ–∫ –∏ –±–∞–Ω–∞–Ω–∞" ],
                            "–ê—Å—Ç—Ä–æ–Ω–æ–º–∏—á–µ—Å–∫–∞—è –ë–∞—à–Ω—è": ["–°–ø–µ—Ç—å –ø–µ—Å–Ω—é ¬´–ò –∫–∞–º–Ω–µ–º –≤–Ω–∏–∑...¬ª", "–°–∫–∏–Ω—É—Ç—å –≤–æ–¥–Ω—ã–µ –±–æ–º–±–æ—á–∫–∏ —Å –±–∞—à–Ω–∏", "–ü–æ–¥—É–º–∞—Ç—å, –ø–æ—á–µ–º—É —Å–æ–ª–Ω—Ü–µ –Ω–∞–∑–≤–∞–ª–∏ —Å–æ–ª–Ω—Ü–µ–º", "–ü–æ–∏–≥—Ä–∞—Ç—å –≤ –¥–æ–≥–æ–Ω–∏ –º–µ–Ω—è –∫–∏—Ä–ø–∏—á", "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–µ—Ä–∏–ª–∞ –Ω–∞ –ø—Ä–æ—á–Ω–æ—Å—Ç—å" ],
                            "–ì—Ä–µ–º—É—á–∞—è –ò–≤–∞": [ "–ü–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –≤–µ—Ç–≤—è–º–∏ –¥–µ—Ä–µ–≤–∞", "–£—Ç—Ä–æ–∏—Ç—å –±–æ–π —Å –¥–µ—Ä–µ–≤–æ–º", "–ü–æ–≤–µ—Å–∏—Ç—å –∫–æ–Ω—Ñ–µ—Ç—ã –Ω–∞ –¥–µ—Ä–µ–≤–æ", "–£—Å—Ç—Ä–æ–∏—Ç—å –ø–æ–∫–∞–∑ –º–æ–¥", "–°–æ–≥—Ä–µ—Ç—å –∏–≤—É —Å –ø–æ–º–æ—â—å—é —à–∞—Ä—Ñ–æ–≤" ],
                            "–ß–∞—Å–æ–≤–∞—è –ë–∞—à–Ω—è": [ "–ü–æ—Å—á–∏—Ç–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–¥–∞—Ä–æ–≤ —á–∞—Å–æ–≤ –∑–∞ –ø–æ–ª–¥–Ω—è", "–°–æ—á–∏–Ω–∏—Ç—å —Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏–µ", "–ò–∑—É—á–∏—Ç—å –º–µ—Ö–∞–Ω–∏–∑–º —á–∞—Å–æ–≤", "–ó–∞—Ä–∏—Å–æ–≤–∞—Ç—å –º–µ—Ö–∞–Ω–∏–∑–º —á–∞—Å–æ–≤", "–ù–∞–π—Ç–∏ —á–∞—Å–æ–≤–æ–≥–æ –º–æ–Ω—Å—Ç—Ä–∞" ],
                            "–ö—É—Ö–Ω—è": ["–ü—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å —à–∞—Ä–ª–æ—Ç–∫—É", "–ü–æ–º–æ—á—å —ç–ª—å—Ñ–∞–º", "–ü–µ—Ä–µ–º—ã—Ç—å –≤—Å—é –ø–æ—Å—É–¥—É", "–ü—Ä–∏–¥—É–º–∞—Ç—å –Ω–æ–≤–æ–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –±–ª—é–¥–æ", "–°–æ—Å—Ç–∞–≤–∏—Ç—å –º–µ–Ω –¥–ª—è –ø—Ä–æ—Ñ–µ—Å—Å–æ—Ä–æ–≤ –Ω–∞ –¥–µ–Ω—å" ],
                            "–¢—É–∞–ª–µ—Ç –ü–ª–∞–∫—Å—ã –ú–∏—Ä—Ç–ª": [ "–ü–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –º–µ—Å—Ç–Ω—ã–º –ø—Ä–∏–∑—Ä–∞–∫–æ–º", "–í—ã–ø–ª–∞–∫–∞—Ç—å—Å—è –º–∏—Å—Å –ú–∏—Ä—Ç–ª", "–ü–æ–≥–∞–¥–∞—Ç—å –Ω–∞ –∫–∞—Ä—Ç–∞—Ö —Ç–∞—Ä–æ –Ω–∞ —Å–≤–æ—é —Å—É–¥—å–±—É", "–ü–æ–∏–≥—Ä–∞—Ç—å –≤ –∫–∞—Ä—Ç—ã —Å –ú–∏—Ä—Ç–ª", "–£–∑–Ω–∞—Ç—å –æ —Å—É–¥—å–±–µ –ø—Ä–∏–∑—Ä–∞–∫–∞" ],
                            "–ó–∞–ª –Ω–∞–∫–∞–∑–∞–Ω–∏–π": [ "–ò—Å–ø—Ä–æ–±–æ–≤–∞—Ç—å –Ω–∞ —Å–µ–±–µ –æ—Ä—É–¥–∏—è –ø—ã—Ç–æ–∫", "–ù–∞–π—Ç–∏ –º–µ—Å—Ç–Ω—ã—Ö –¥—É—Ö–æ–≤", "–ü–æ–≥–æ–≤–æ—Ä–∏—Ç—å —Å —Ö–æ–ª–æ–¥–Ω–æ–π —Å—Ç–µ–Ω–æ–π", "–ó–∞—Å—É–Ω—É—Ç—å –∞—Ä–±—É–∑ –≤ –≥–∏–ª—å–æ—Ç–∏–Ω—É" ],
                            "–í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –¥–≤–æ—Ä": [ "–ü–æ—Å—á–∏—Ç–∞—Ç—å –∫–∞–º–Ω–∏ –Ω–∞ —Ç—Ä–æ–ø–∏–Ω–∫–µ", "–û–±–Ω—è—Ç—å –∫–∞–∂–¥–æ–≥–æ –≤—Å—Ç—Ä–µ—á–Ω–æ–≥–æ", "–ò—Å–∫—É–ø–∞—Ç—å—Å—è –≤ –î–æ–º", "–í—ã–ª–æ–≤–∏—Ç—å –Ω–∞ —Ñ–æ–Ω—Ç–∞–Ω–∞ –≤—Å–µ –º–æ–Ω–µ—Ç–∫–∏", "–£—Å—Ç—Ä–æ–∏—Ç—å –¥–µ–Ω—å –æ—Ç–¥—ã—Ö–∞ –∏ –ø–æ–∑–∞–≥–æ—Ä–∞—Ç—å" ],
                            "–ó–∞–ø—Ä–µ—Ç–Ω—ã–π –ª–µ—Å": [ "–ü—Ä–æ—Å–ª–µ–¥–∏—Ç—å –∑–∞ –Ω–µ–∑–Ω–∞–∫–æ–º—Ü–µ–º", "–í—Å—Ç—Ä–µ—Ç–∏—Ç—å –∑–∞—Ö–æ–¥ —Å–æ–ª–Ω—Ü–∞", "–£—Å—Ç—Ä–æ–∏—Ç—å –æ—Ö–æ—Ç—É –Ω–∞ –∑–∞–π—Ü–µ–≤", "–ù–∞—Ä–∏—Å–æ–≤–∞—Ç—å –ø–µ–π–∑–∞–∂ –≤–µ—á–µ—Ä–Ω–µ–≥–æ –ª–µ—Å–∞", "–ù–∞–π—Ç–∏ –æ—Ç–ª–∏—á–Ω–æ–µ –º–µ—Å—Ç–æ –¥–ª—è –∫–æ–ª–¥–æ–≥—Ä–∞—Ñ–∏–π" ],
                            "–ü—Ä–∞–≤—ã–π –∫–æ—Ä–∏–¥–æ—Ä | –ü—è—Ç—ã–π —ç—Ç–∞–∂": [ "–ù–∞—Ä–∏—Å–æ–≤–∞—Ç—å –Ω–∞ –ø–æ–ª—É –ø–æ—Ä—Ç—Ä–µ—Ç –ø—Ä–æ—Ñ–µ—Å—Å–æ—Ä–∞ –ú–∞–∫–≥–æ–Ω–∞–≥–∞–ª–¥", "–ü–æ–∏–≥—Ä–∞—Ç—å –≤ –∫–ª–∞—Å—Å–∏–∫–∏", "–ü–æ–∫—Ä–∏–≤–ª—è—Ç—å—Å—è –∏ –ø–æ—Å—Ç—Ä–æ–∏—Ç—å —Å–º–µ—à–Ω—ã–µ —Ä–æ–∂–∏—Ü—ã" ],
                            "–î–µ—Ä–µ–≤—è–Ω–Ω—ã–π –º–æ—Å—Ç": [ "–°–ø—Ä—ã–≥–Ω—É—Ç—å —Å –º–æ—Å—Ç–∞ –≤ –≤–æ–¥—É", "–ü–æ—Å–∏–¥–µ—Ç—å –Ω–∞ –ø–µ—Ä–∏–ª–∞—Ö", "–ü–æ–∏–≥—Ä–∞—Ç—å –≤ —à–∞—à–∫–∏", "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –º–æ—Å—Ç –Ω–∞ –ø—Ä–æ—á–Ω–æ—Å—Ç—å", "–°–∫–∞—Ç–∏—Ç—å—Å—è —Å –º–æ—Å—Ç–∞ –Ω–∞ —Å–∫–µ–π—Ç–µ" ],
                            "–°–æ–≤—è—Ç–Ω—è": [ "–ù–∞–ø–∏—Å–∞—Ç—å –ø–∏—Å—å–º–æ –¥–æ–º–æ–π", "–ü–æ–∫–æ—Ä–º–∏—Ç—å –ø—Ç–∏—Ü", "–£–±—Ä–∞—Ç—å –ø–æ–º–µ—Ç", "–£—Å—Ç—Ä–æ–∏—Ç—å —Ç—É—Å—É –ø—Ç–∏—Ü–∞–º", "–°—à–∏—Ç—å —Å–æ–≤–∞–º –æ–¥–µ–∂–¥—É" ],
                            "–í—ã—Ä—É—á–∞–π-–∫–æ–º–Ω–∞—Ç–∞": [ "–£—Å—Ç—Ä–æ–∏—Ç—å –≤–µ—á–µ—Ä —Å–∫–∞–∑–æ–∫", "–ü–æ—Å—Ç—Ä–æ–∏—Ç—å –¥–æ–º –∏–∑ –æ–¥–µ—è–ª –∏ –∫—Ä–µ—Å–µ–ª", "–£—Å—Ç—Ä–æ–∏—Ç—å –±–æ–π –ø–æ–¥—É—à–∫–∞–º–∏" ],
                            "–ö–æ–º–Ω–∞—Ç–∞ –ü–∏–≤–∑–∞": [ "–ü—Ä–∏–±—Ä–∞—Ç—å—Å—è –≤ –∫–æ–º–Ω–∞—Ç–µ", "–ü–æ–∑–∞–∏–º—Å—Ç–≤–æ–≤–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–Ω–∏–≥ —É —Å—ç—Ä–∞ –ü–∏–≤–∑–∞", "–ü–æ–∫–æ—Ä–º–∏—Ç—å —Ö–æ–º—è–∫–æ–≤ —Å—ç—Ä–∞ –ü–∏–≤–∑–∞" ],
                            "–ß–µ—Ä–¥–∞–∫": [ "–°–¥–µ–ª–∞—Ç—å –≥–µ–Ω–µ—Ä–∞–ª—å–Ω—É—é —É–±–æ—Ä–∫—É", "–ù–∞–π—Ç–∏ —Å—Ç–∞—Ä–∏–Ω–Ω—ã–µ —É–∫—Ä–∞—à–µ–Ω–∏—è", "–ü—Ä–æ—Ä–µ–ø–µ—Ç–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç –Ω–∞ —É—Ä–æ–∫–µ –∑–µ–ª—å–µ–≤–∞—Ä–µ–Ω–∏—è" ],
                            "–ë–æ–ª—å–Ω–∏—á–Ω–æ–µ –∫—Ä—ã–ª–æ": [ "–ü–µ—Ä–µ–≤—è–∑–∞—Ç—å –ø–æ—Ä–µ–∑–∞–Ω–Ω—É—é —Ä—É–∫—É", "–û—Å—Ç–∞–≤–∏—Ç—å –¥–ª—è –±–æ–ª—å–Ω—ã—Ö —Å–ª–∞–¥–æ—Å—Ç–∏", "–ù–∞–≤–µ—Å—Ç–∏—Ç—å –º–∞–¥–∞–º –ü–æ–º—Ñ—Ä–∏", "–ù–∞—Ä–∏—Å–æ–≤–∞—Ç—å —Å–µ–±–µ —Å–∏–Ω—è–∫ –ø–æ–¥ –≥–ª–∞–∑–æ–º" ],
                            "–í–µ—Å—Ç–∏–±—é–ª—å": [ "–ü–æ—Ü–µ–ª–æ–≤–∞—Ç—å —Å—Ç–µ–Ω—É", "–ü—Ä–æ–∫–∞—Ç–∏—Ç—å—Å—è –Ω–∞ —Ä–æ–ª–∏–∫–∞—Ö", "–°—Ç–∞–Ω—Ü–µ–≤–∞—Ç—å –ª–µ–∑–≥–∏–Ω–∫—É", "–°–¥–µ–ª–∞—Ç—å —Å–µ–±–µ –±–æ–µ–≤–æ–π —Ä–∞—Å–∫—Ä–∞—Å" ],
                            "–û–ø—É—à–∫–∞ –ª–µ—Å–∞": [ "–£—Å—Ç—Ä–æ–∏—Ç—å –ø–∏–∫–Ω–∏–∫ —Å –ª–µ—Å–Ω—ã–º–∏ –¥—É—Ö–∞–º–∏", "–ü–æ–∏–≥—Ä–∞—Ç—å –≤ –º—è—á", "–°—ä–µ—Å—Ç—å —Ç—Ä–∞–≤—É", "–ü–æ–π–º–∞—Ç—å –±–∞–±–æ—á–µ–∫" ],
                            "–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ –•–æ–≥–≤–∞—Ä—Ç—Å–∞": [ "–ü—Ä–∏–Ω–µ—Å—Ç–∏ –º–∞–¥–∞–º –ü–∏–Ω—Å –≤ –ø–æ–¥–∞—Ä–æ–∫ –∫–æ—Ä–æ–±–∫—É –∫–æ–Ω—Ñ–µ—Ç", "–ó–∞–∫–ª–µ–∏—Ç—å –ø–æ—Ä–≤–∞–Ω–Ω—ã–µ –∫–Ω–∏–≥–∏" , "–ü–æ–ª–æ–∂–∏—Ç—å –≤ –æ–¥–Ω—É –∏–∑ –∫–Ω–∏–≥ –Ω–µ–±–æ–ª—å—à–æ–π –ø–æ–¥–∞—Ä–æ—á–µ–∫", "–û—Å—Ç–∞–≤–∏—Ç—å –≤ –æ–¥–Ω–æ–π –∏–∑ –∫–Ω–∏–≥ –∑–∞–ø–∏—Å–∫—É" ],
                            "–ß—ë—Ä–Ω–æ–µ –û–∑–µ—Ä–æ": [ "–ü—É—Å—Ç–∏—Ç—å –≤ –¥–∞–ª—å–Ω–µ–µ –ø–ª–∞–≤–∞–Ω–∏–µ –º—è–≥–∫—É—é –∏–≥—Ä—É—à–∫—É", "–ó–∞–ø—É—Å—Ç–∏—Ç—å –±—É–º–∞–∂–Ω—ã–µ –∫–æ—Ä–∞–±–ª–∏–∫–∏", "–ü–æ–∏–≥—Ä–∞—Ç—å –≤ –±–ª–∏–Ω—á–∏–∫–∏", "–ü–æ–ø–ª–µ—Å–∫–∞—Ç—å—Å—è –≤ –≤–æ–¥–µ", "–ü–æ–∫—Ä–∞—Å–æ–≤–∞—Ç—å—Å—è —Å–≤–æ–∏–º–∏ –Ω–æ–≤—ã–º–∏ –ø–ª–∞–≤–∫–∞–º–∏/–∫—É–ø–∞–ª—å–Ω–∏–∫–æ–º" ],
                            "–õ–µ—Å—Ç–Ω–∏—á–Ω—ã–µ –ø—Ä–æ–ª—ë—Ç—ã": [ "–°–ø–æ—Ç–∫–Ω—É—Ç—å—Å—è –æ —Å—Ç—É–ø–µ–Ω—å–∫—É –∏ —Ä–∞–∑–±–∏—Ç—å –∫–æ–ª–µ–Ω–∫—É", "–ü–æ–≥–æ–≤–æ—Ä–∏—Ç—å —Å –∫–∞—Ä—Ç–∏–Ω–∞–º–∏", "–ü—Ä–æ–∫–∞—Ç–∏—Ç—å—Å—è –Ω–∞ –ª–µ—Å—Ç–Ω–∏—Ü–∞—Ö –ø–æ –≤—Å–µ–º—É –∑–∞–º–∫—É" ],
                            "–ö–∞–º–µ–Ω–Ω—ã–π –ö—Ä—É–≥": [ "–°–æ—Å—á–∏—Ç–∞—Ç—å –≤—Å–µ –∫–∞–º–Ω–∏ –≤ –∫—Ä—É–≥—É", "–ü—Ä–∏–¥—É–º–∞—Ç—å –ª–µ–≥–µ–Ω–¥—É –æ –∫–∞–º–µ–Ω–Ω–æ–º —á–µ–ª–æ–≤–µ–∫–µ", "–†–∞–∑–≤–µ—Å—Ç–∏ –∫–æ—Å—Ç–µ—Ä, —á—Ç–æ–±—ã —Å–æ–≥—Ä–µ—Ç—å—Å—è " ],
                            "–ö–∞–±–∏–Ω–µ—Ç –ó–µ–ª—å–µ–≤–∞—Ä–µ–Ω–∏—è": [ "–û—Å—Ç–∞–≤–∏—Ç—å –ø—Ä–æ—Ñ–µ—Å—Å–æ—Ä—É –°–Ω–µ–π–ø—É —Ç–µ—Ç—Ä–∞–¥—å —Å –µ–≥–æ –∫–∞—Ä–∏–∫–∞—Ç—É—Ä–æ–π", "–í–∑–æ—Ä–≤–∞—Ç—å –∫–æ—Ç–µ–ª", "–ü–æ–º–µ–Ω—è—Ç—å –±–∞–Ω–∫–∏ —Å –∏–≥—Ä–∏–¥–∏–µ–Ω—Ç–∞–º–∏ –º–µ—Å—Ç–∞–º–∏" ],
                            "–ü–æ–¥–∑–µ–º–µ–ª—å—è –•–æ–≥–≤–∞—Ä—Ç—Å–∞": [ "–û—Å—Ç–∞–≤–∏—Ç—å –ø–æ—Å–ª–∞–Ω–∏–µ –∑–º–µ–π–∫–∞–º", "–ò–∑–º–∞–∑–∞—Ç—å –ø–æ–ª –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–π –∫—Ä–æ–≤—å—é", "–ü–æ—Å–∞–¥–∏—Ç—å –ø–ª—é—à–µ–≤—É—é –∏–≥—Ä—É—à–∫—É –Ω–∞ –ø–æ—Ç—É—Ö—à–∏–π —Ñ–∞–∫–µ–ª" ],
                            "–ü—Ä–∞—á–µ—á–Ω–∞—è": [ "–ó–∞–∫–∏–Ω—É—Ç—å –≤ —Å—Ç–∏—Ä–∫—É —á—É–∂–∏–µ –±–µ–ª—ã–µ –≤–µ—â–∏ —Å —Ä–æ–∑–æ–≤—ã–º–∏ –Ω–æ—Å–∫–∞–º–∏", "–ó–∞—Ç–æ–ø–∏—Ç—å –∑–∞–º–æ–∫", "–†–∞–∑–ª–∏—Ç—å –∞–º–æ—Ä—Ç–µ–Ω—Ü–∏—é –Ω–∞ –ø–æ–ª", "–ü–æ—Ä–≤–∞—Ç—å —á—å—é-—Ç–æ —Ç–æ–ª—å–∫–æ —á—Ç–æ —Å—Ç–∏—Ä–∞–Ω–Ω—É—é —Ñ—É—Ç–±–æ–ª–∫—É", "–ù–∞—Ä–∏—Å–æ–≤–∞—Ç—å –Ω–∞ –≤—Å–µ–π –æ–¥–µ–∂–¥–µ —á–µ—Ä–Ω—ã–º –º–∞—Ä–∫–µ—Ä–æ–º –ª–∏—Ü–æ –ø—Ä–æ—Ñ–µ—Å—Å–æ—Ä–∞ –ú–∞–∫–≥–æ–Ω–∞–≥–∞–ª–ª" ],
                            "–ó–∞–ª –°–ª–∞–≤—ã": [ "–ù–µ–∑–∞–º–µ—Ç–Ω–æ —É–∫—Ä–∞—Å—Ç—å –æ–¥–∏–Ω –∏–∑ –∫—É–±–∫–æ–≤", "–ü–æ—Å—Ç–∞–≤–∏—Ç—å —Å–≤–æ—é —à—É—Ç–æ—á–Ω—É—é –≥—Ä–∞–º–æ—Ç—É –∫ –æ—Å—Ç–∞–ª—å–Ω—ã–º ", "–ù–∞–ª–∏—Ç—å –≤ –∫—É–±–æ–∫ —Å–æ–∫ –∏ —Ä–∞—Å–ø–∏–≤–∞—Ç—å, –ø–æ–¥–Ω–∏–º–∞—è —Ç–æ—Å—Ç—ã " ],
                            "–£—á–µ–±–Ω—ã–π –ó–∞–ª": [ "–í—ã–∫–∏–Ω—É—Ç—å –∫–Ω–∏–≥—É –≤ –æ–∫–Ω–æ", "–ü–æ–¥–∂–µ—á—å —à—Ç–æ—Ä—ã", "–£–¥–∏–≤–∏—Ç—å –≤—Å–µ—Ö –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –≤ –∑–∞–ª–µ —Å–≤–æ–∏–º–∏ –∂–æ–Ω–≥–ª—ë—Ä—Å–∫–∏–º–∏ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—è–º–∏" ],
                            "–¢–µ–ø–ª–∏—Ü—ã": [ "–°–ø–∞—Ä–æ–¥–∏—Ä–æ–≤–∞—Ç—å –º–∞–Ω–¥—Ä–∞–≥–æ—Ä—É", "–ü–æ—Å–∞–¥–∏—Ç—å –º–æ–Ω–µ—Ç–∫—É –≤ –∑–µ–º–ª—é", "–ó–∞–∫–æ–ø–∞—Ç—å –∫—É—Å–æ–∫ –ø–∏—Ü—Ü—ã –≤ –≥–æ—Ä—à–æ–∫", "–°—Ç–∞–Ω—Ü–µ–≤–∞—Ç—å –Ω–∞ —Å—Ç–æ–ª–µ —Ç–∞–Ω–≥–æ" ],
                            "–¢–∞–π–Ω–∞—è –ö–æ–º–Ω–∞—Ç–∞": [ "–ü–æ–ø—Ä—ã–≥–∞—Ç—å –ø–æ –ª—É–∂–∞–º", "–ù–∞–π—Ç–∏ —á—å–∏-—Ç–æ –∫–æ—Å—Ç–∏", "–í–æ–æ–±—Ä–∞–∑–∏—Ç—å —Å–µ–±—è —Å—É–ø–µ—Ä–≥–µ—Ä–æ–µ–º", "–í–æ–æ—Ä—É–∂–∏—Ç—å—Å—è –≤–∏–ª–∫–æ–π –∏ –ø–æ–π—Ç–∏ –≤ –±–æ–π —Å —Å–∞–º–∏–º —Å–æ–±–æ–π " ],
                            "–ö–ª–∞–¥–±–∏—â–µ": [ "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –º–æ–≥–∏–ª—ã ", "–í—ã–∫–æ–ø–∞—Ç—å –º–∞–ª–µ–Ω—å–∫—É—é –º–æ–≥–∏–ª–∫—É –¥–ª—è —Å–≤–æ–µ–π –ø—Å–∏—Ö–∏–∫–∏", "–ù–∞–ø–∏—Å–∞—Ç—å –Ω–∞ –≤—Ö–æ–¥–µ –≤ –∫–ª–∞–¥–±–∏—â–µ ¬´—Ç—É—Ç –±—ã–ª —è¬ª", "–í—ã–∑–≤–∞—Ç—å –∫–æ–Ω—Ñ–µ—Ç–Ω–æ–≥–æ –≥–Ω–æ–º–∏–∫–∞" ],
                            "–õ–æ–¥–æ—á–Ω—ã–π —Å–∞—Ä–∞–π": [ "–£—Å—Ç—Ä–æ–∏—Ç—å –≥–æ–Ω–∫–∏ –Ω–∞ –ª–æ–¥–∫–∞—Ö –±–µ–∑ –≤–æ–¥—ã", "–ü–æ–∫—Ä–∞—Å–∏—Ç—å –ª–æ–¥–∫—É –≤ –∫—Ä–∞—Å–Ω—ã–π —Ü–≤–µ—Ç", "–í—ã—Ä–µ–∑–∞—Ç—å –≤ –ª–æ–¥–∫–µ –¥–Ω–æ", "–ü–µ—Ä–µ–∫—Ä—ã—Ç—å –≤—Ö–æ–¥ –≤ —Å–∞—Ä–∞–π" ],
                            "–ö–∞–±–∏–Ω–µ—Ç —à–∫–æ–ª—å–Ω–æ–≥–æ –ø—Å–∏—Ö–æ–ª–æ–≥–∞": [ "–û—Å—Ç–∞–≤–∏—Ç—å –ø—Å–∏—Ö–æ–ª–æ–≥—É –ø–æ–¥ –¥–≤–µ—Ä—å—é –æ—Ç–∫—Ä—ã—Ç–∫—É", "–°–ª–æ–º–∞—Ç—å –¥–≤–µ—Ä—å –≤ –∫–∞–±–∏–Ω–µ—Ç –ø—Å–∏—Ö–æ–ª–æ–≥–∞ ", "–ó–∞–π—Ç–∏ –≤ –∫–∞–±–∏–Ω–µ—Ç –ø—Å–∏—Ö–æ–ª–æ–≥–∞ –≤ –æ–¥–Ω–æ–º —Ö–∞–ª–∞—Ç–µ", "–í—ã–ø–∏—Ç—å –≤–µ—Å—å —á–∞–π" ],
                            "–ö–æ—Ä–∏–¥–æ—Ä –û–¥–Ω–æ–≥–ª–∞–∑–æ–π –í–µ–¥—å–º—ã": [ "–ù–∞–π—Ç–∏ –ø–æ—Ç–∞–π–Ω–æ–π –ø—Ä–æ—Ö–æ–¥ –≤ –•–æ–≥—Å–º–∏–¥", "–û—Å—Ç–∞–≤–∏—Ç—å –∫–æ—Ä–æ–±–∫—É —Å–æ –∑–Ω–∞—á–∫–∞–º–∏ —Å –ø—è—Ç–æ–π —Ç–æ—á–∫–æ–π –∫–æ—Ç–∞", "–£–∫—Ä–∞—Å—Ç—å –æ–¥–∏–Ω –∏–∑ —Ñ–∞–∫–µ–ª–æ–≤ –∏ —Å–ø—Ä—è—Ç–∞—Ç—å –µ–≥–æ" ],
                            "–ö–æ–º–Ω–∞—Ç–∞ 234-00": [ "–ó–∞–±—Ä–∞—Ç—å —Ç—Ä—É—Å—ã –§–∏–ª—á–∞, –ø–æ–∫–∞ –µ–≥–æ –Ω–µ—Ç", "–ü–æ–¥–º–µ–Ω–∏—Ç—å –º–∏—Å—Å–∏—Å –ù–æ—Ä–∏—Å", "–ü–æ–¥–ª–æ–∂–∏—Ç—å –§–∏–ª—á—É –ø–æ–¥ –º–∞—Ç—Ä–∞—Å –≥–æ—Ä–æ—à–∏–Ω—É", "–ö–∏–Ω—É—Ç—å –Ω–∞ —Å—Ç–æ–ª –ø–æ–¥ –º—É—Å–æ—Ä –∫—É—Å–æ–∫ –º—è—Å–∞" ],
                            "–£—á–∏—Ç–µ–ª—å—Å–∫–∞—è": [ "–ü—Ä–∏–Ω–µ—Å—Ç–∏ –ø—Ä–æ—Ñ–µ—Å—Å–æ—Ä–∞–º –∑–∞–≤—Ç—Ä–∞–∫ –≤ –∫–∞–±–∏–Ω–µ—Ç", "–£–∫—Ä–∞—Å—Ç—å —Ä–∞–±–æ—Ç—ã –ø–æ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏—è–º", "–°–ª—É—á–∞–π–Ω–æ –ø—Ä–æ–ª–∏—Ç—å –∫–æ—Ñ–µ –Ω–∞ —Ä–∞–±–æ—Ç—ã —Ç—Ä–µ—Ç—å–µ–≥–æ –∫—É—Ä—Å–∞" ],
                            "–•–∏–∂–∏–Ω–∞ –•–∞–≥—Ä–∏–¥–∞": [ "–°—Ö–æ–¥–∏—Ç—å –Ω–∞ —á–∞–π –∫ –ø—Ä–æ—Ñ–µ—Å—Å–æ—Ä—É –•–∞–≥—Ä–∏–¥—É ", "–ü–æ–¥–∞—Ä–∏—Ç—å –ø—Ä–æ—Ñ–µ—Å—Å–æ—Ä—É –∂–∏–≤–æ—Ç–Ω–æ–µ", "–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –ø—Ä–æ—Ñ–µ—Å—Å–æ—Ä–∞ –•–∞–≥—Ä–∏–¥–∞ –Ω–∞ –ø—Ä–æ–≥—É–ª–∫—É –≤–æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –¥–≤–æ—Ä" ],
                            "–ö–æ—Ä–∏–¥–æ—Ä—ã": [ "–ü—Ä–∏–º–µ—Ä–∏—Ç—å –Ω–∞ —Å–µ–±–µ –¥–æ—Å–ø–µ—Ö–∏", "–ü—Ä–æ–π—Ç–∏—Å—å –ø–æ —Å—Ç–µ–Ω–µ", "–†–∞—Å—Å—Ç–∞–≤–∏—Ç—å –ø–æ –≤—Å–µ–º –∫–æ—Ä–∏–¥–æ—Ä–∞–º –∑–µ—Ä–∫–∞–ª–∞", "–ü–æ–±–µ–≥–∞—Ç—å –±–æ—Å–∏–∫–æ–º" ],
                            //–ë—Ä–∏—Å—Ç–æ–Ω
                            '–°—Ç—Ä–∏–ø-–∫–ª—É–± "MurMur angels-club"': [ "–ü–æ–¥–∞—á–∞ —Ä–µ–∑—é–º–µ –Ω–∞ —Ä–∞–±–æ—Ç—É", "–ü–æ–¥–¥–µ–ª–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤", "–ö—Ä–∞–∂–∞ –∫–æ–Ω—Ñ–µ—Ç–æ–∫ —Å —Ä–µ—Å–µ–ø—à–µ–Ω–∞" ],
                            "–§–∏–ª–∏–∞–ª –ù–µ–∫—Ä–æ–º–∞–Ω—Ç–∏–∏ –∏ –ë–µ—Å–æ–∏–∑–≥–Ω–∞–Ω–∏—è": [ "–í–æ—Å–∫—Ä–µ—à–µ–Ω–∏–µ —É–º–µ—Ä—à–µ–π –±–∞–±–æ—á–∫–∏", "–ò–∑–≥–Ω–∞–Ω–∏–µ –±–µ—Å–æ–≤ –∏–∑ –∫–æ—à–∫–∏", "–ó–Ω–∞–∫–æ–º—Å—Ç–≤–æ —Å –≤–æ–∑–º–æ–∂–Ω—ã–º –±—É–¥—É—â–∏–º –º–µ—Å—Ç–æ–º —Ä–∞–±–æ—Ç—ã" ],
                            "–°—É–¥": [ "–ó–Ω–∞–∫–æ–º—Å—Ç–≤–æ —Å –≤–æ–∑–º–æ–∂–Ω—ã–º –±—É–¥—É—â–∏–º –º–µ—Å—Ç–æ–º —Ä–∞–±–æ—Ç—ã ", "–°—É–¥ –Ω–∞–¥ —Å–æ–≤–æ–π, –∫–æ—Ç–æ—Ä–∞—è —Å—ä–µ–ª–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –±—É—Ç–µ—Ä–±—Ä–æ–¥", "–°—É–¥ –Ω–∞–¥ –±—É–¥–∏–ª—å–Ω–∏–∫–æ–º, —á—Ç–æ –Ω–µ –¥–∞–ª –ø–æ—Å–ø–∞—Ç—å" ],
                            "–ó–∞–ú–£–†—á–∞—Ç–µ–ª—å–Ω–æ–µ –∫–∞—Ñ–µ": [ "–ö–æ—à–∞—á—å—è —Ç–µ—Ä–∞–ø–∏—è", "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–±–æ–ª–µ–≤—à–µ–≥–æ –¥–æ–º–∞—à–Ω–µ–≥–æ –ø–∏—Ç–æ–º—Ü–∞", "–†–∞–∑–ª–æ–∂–∏—Ç—å—Å—è –Ω–∞ —Å—Ç–æ–π–∫–µ –¥–ª—è –∑–∞–∫–∞–∑–æ–≤" ],
                            "–ü–∞—Ä–∫": [ "–£—Å—Ç—Ä–æ–∏—Ç—å —Å–≤–∞–¥—å–±—É –¥–ª—è –¥–≤—É—Ö –≥–æ–ª—É–±–µ–π", "–ü–æ—Å—Ä—ã–≤–∞—Ç—å –ª–∏—Å—Ç—å—è —Å –¥–µ—Ä–µ–≤—å–µ–≤ –∏ —Å–æ–±—Ä–∞—Ç—å –∏–∑ –Ω–∏—Ö –±—É–∫–µ—Ç", "–ó–∞–±—Ä–∞—Ç—å –ª–∞–≤–æ—á–∫—É –∏ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞—Ç—å –µ—ë –∑–∞ —Å–æ–±–æ–π –ø–æ –≤—Å–µ–º—É –ø–∞—Ä–∫—É" ],
                            "–ë–æ–ª—å–Ω–∏—Ü–∞": [ "–£–∫—Ä–∞—Å—Ç—å –≤–∫—É—Å–Ω—è—à–∫–∏ —Å —Ä–µ—Å–µ–ø—à–µ–Ω–∞", "–ü–æ—Ö–∏—â–µ–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–æ–≤", "–®–ø–∏–æ–Ω—Å—Ç–≤–æ –≤ –æ–∫–Ω–∞ –±–æ–ª—å–Ω–∏—Ü—ã –∑–∞ —Ä–∞–±–æ—Ç–Ω–∏–∫–∞–º–∏", "–ö—Ä–∞–∂–∞ –∫—Ä–µ—Å–ª–∞ —Å —Ä–µ—Å–µ–ø—à–µ–Ω–∞" ],
                            "–ú—Ä–∞–∫–æ–±–æ—Ä—á–µ—Å–∫–∏–π —É—á–∞—Å—Ç–æ–∫": [ "–ö—Ä–∞–∂–∞ –∫–ª—é—á–µ–π –æ—Ç —Ä–µ—à—ë—Ç–æ–∫", "–í—ã–±–∏—Ç—å –æ–∫–Ω–æ –≤ —É—á–∞—Å—Ç–∫–µ", "–í—ã–Ω–µ—Å –≤—Å–µ—Ö –≤–∞–∂–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ " ],
                            "–ó–∞–ø–æ–≤–µ–¥–Ω–∏–∫": [ "–ö—Ä–∞–∂–∞ —Ä–µ–¥–∫–∏—Ö –∂–∏–≤–æ—Ç–Ω—ã—Ö", "–ü–µ—Ä–µ–ª–µ–∑—Ç—å —á–µ—Ä–µ–∑ –∑–∞–±–æ—Ä –∫ –¥–æ–º–∏–∫—É –ª–µ—Å–Ω–∏–∫–∞", "–°–ø–∏–ª–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–µ—Ä–µ–≤—å–µ–≤" ],
                            "–¢–æ—Ä–≥–æ–≤—ã–π —Ü–µ–Ω—Ç—Ä": [ "–ü—Ä–∏–º–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö –ª—É–∫–æ–≤", "–ó–∞–∫—É–ø–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–∞–º–∏", "–û—Ç–¥—ã—Ö –≤ –°–ü–ê", "–ó–∞–Ω—è—Ç–∏–µ –≤ –±–∞—Å—Å–µ–π–Ω–µ " ],
                            "–õ–∞–≤–∫–∞ –∑–µ–ª–∏–π –∏ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤": [ "–ü–æ–∫—É–ø–∫–∞ –∑–µ–ª—å—è", "–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –ø–æ –ø–æ–≤–æ–¥—É –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞", "–†–∞–∑–≥–æ–≤–æ—Ä –ø–æ –¥—É—à–∞–º —Å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º –ª–∞–≤–∫–∏" ],
                            '–ë–∞—Ä "–£ –ü—å—é—Å–∏ –∏ –í–∏–Ω—Ç–µ—Ä"': [ "–û—Ç–¥—ã—Ö —Å –∫–æ–∫—Ç–µ–ª—å—á–∏–∫–æ–º", "–ü–æ—Ç—Ä–∞—Ç–∏—Ç—å –º–∏–Ω–∏–º—É–º 10 –≥–∞–ª–ª–µ–æ–Ω–æ–≤ –≤ –±–∞—Ä–µ", "–ü–æ–ª–∞–∫–æ–º–∏—Ç—å—Å—è —Å—Ç–µ–π–∫–æ–º –∏–∑ –ì—Ä–∏—Ñ–æ–Ω–∞" ],
                            "–ú–∞–≥–∏—á–µ—Å–∫–∞—è –∞–ø—Ç–µ–∫–∞": [ "–ü–æ–∫—É–ø–∫–∞ –ª–µ–∫–∞—Ä—Å—Ç–≤ –æ—Ç –º–∏–≥—Ä–µ–Ω–∏", "–ü–æ–∫—É–ø–∫–∞ –ª–µ–∫–∞—Ä—Å—Ç–≤ –æ—Ç –±–æ–ª–µ–π –≤ –∂–∏–≤–æ—Ç–µ", "–ü–æ–∫—É–ø–∫–∞ –∞—Å–∫–æ—Ä–±–∏–Ω–æ–∫", "–ü–æ–∫—É–ø–∫–∞ –≥–µ–º–æ—Ç–æ–≥–µ–Ω–æ–∫" ],
                            "–ë—É—Ö—Ç–∞ –ò–Ω–≥–µ—Ä–Ω–∞—Ö": [ "–ü—Ä–æ–¥–∞–∂–∞ —Ä—ã–±—ã", "–ü–æ–∫—É–ø–∫–∞ —É–¥–æ—á–∫–∏", "–ü–æ–∫—É–ø–∫–∞ –∫—Ä—É–≥–∞ –¥–ª—è –∫—É–ø–∞–Ω–∏—è " ],
                            "–§–∏–ª–∏–∞–ª –ì–∏–ª—å–¥–∏–∏ –ê—Ä—Ç–µ—Ñ–∞–∫—Ç–æ—Ä–æ–≤": [ "–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –ø–æ –ø–æ–≤–æ–¥—É –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤", "–ó–Ω–∞–∫–æ–º—Å—Ç–≤–æ —Å –≤–æ–∑–º–æ–∂–Ω—ã–º –º–µ—Å—Ç–æ–º —Ä–∞–±–æ—Ç—ã", "–í—ã–ø—Ä–∞—à–∏–≤–∞–Ω–∏–µ –∫–∞–∫–æ–≥–æ-–Ω–∏–±—É–¥—å –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞" ],
                            '–û—Ç–µ–ª—å "–ú–µ–ª–ª–æ—É –ë—Ä—É–∫"': [ "–†–æ–∑—ã–≥—Ä—ã—à –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", "–ù–∞—Å–ª–∞–∂–¥–µ–Ω–∏–µ —Å–≤–µ–∂–∏–º –≤–æ–∑–¥—É—Ö–æ–º –Ω–∞ —Ç–µ—Ä—Ä–∞—Å–µ", "–û–±–µ–¥ –≤ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–µ" ],
                            "–ó–∞–∫—Ä—ã—Ç–∞—è –ø–∏—Ü—Ü–µ—Ä–∏—è": [ "–†–∞—Å—Å–ø—Ä–æ—Å –î–∂–µ—Ñ—Ñ–∞ –æ –µ–≥–æ –º–∞—Ç–µ—Ä–∏", "–ü–æ–¥–∫–∞—Ç—ã –∫ –ø—Ä–∏—Å–º–∞—Ç—Ä–∏–≤–∞—é—â–µ–º—É –∑–∞ –∑–∞–≤–µ–¥–µ–Ω–∏–µ–º", "–ü—Ä–æ—Å—å–±–∞ –ø–µ—Ä–µ–Ω–æ—á–µ–≤–∞—Ç—å –≤ –ø–∏—Ü—Ü–µ—Ä–∏–∏ " ],
                            "–í–æ–ª—à–µ–±–Ω—ã–π –∑–≤–µ—Ä–∏–Ω–µ—Ü": [ "–ü–æ–∫—É–ø–∫–∞ –Ω–æ–≤–æ–≥–æ –∂–∏–≤–æ—Ç–Ω–æ–≥–æ", "–ó–∞–≥–ª—è–Ω—É—Ç—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ –∂–∏–≤–æ—Ç–Ω—ã—Ö", "–í—ã–±–æ—Ä –¥–æ–º–∞—à–Ω–µ–≥–æ –ø–∏—Ç–æ–º—Ü–∞" ],
                            //–ü–∞–±
                            '–ü–∞–± "–¢—Ä–∏ –º–µ—Ç–ª—ã"': [ "–†–∞–∑–≤–µ—Å—Ç–∏ –º–∞–¥–∞–º –†–æ–∑–º–µ—Ä—Ç—É –Ω–∞ —Å–≤–∏–Ω–æ–µ –∂–∞—Ä–∫–æ–µ", "–ù–∞–ø–∏—Ç—å—Å—è –æ—Ç –≥–æ—Ä—è —Å–ª–∏–≤–æ—á–Ω—ã–º –ø–∏–≤–æ–º ", "–£–≥–æ—Å—Ç–∏—Ç—å –Ω–µ–∑–Ω–∞–∫–æ–º—Ü–∞ –º–µ–¥–æ–≤—É—Ö–æ–π" ],
                            '–¢—Ä–∞–∫—Ç–∏—Ä "–ö–∞–±–∞–Ω—å—è –≥–æ–ª–æ–≤–∞"': [ "–û—Å—Ç–∞–≤–∏—Ç—å —Å–≤–æ–π —Å–ª–µ–¥ –Ω–∞ –≤—ã–≤–µ—Å–∫–µ", "–í—ã–ø–∏—Ç—å –±–æ–∫–∞–ª—å—á–∏–∫ —Å–º–æ—Ä–æ–¥–∏–Ω–æ–≤–æ–≥–æ –†–æ–º–∞", "–ó–∞–ª–µ–∑—Ç—å –ø–æ–¥ —Å—Ç–æ–ª –∏ –≥—Ä–æ–º–∫–æ –∫—É–∫–∞—Ä–µ–∫–∞—Ç—å" ]
        }
        const task = task_list[location_list[location_name[selector]][tara]][randomInt(0,task_list[location_list[location_name[selector]][tara]].length)] || "–ó–∞–¥–∞—á–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
        await vk.api.messages.send({
            peer_id: chat_id,
            random_id: 0,
            message: `‚åõ –û–±–Ω–∞—Ä—É–∂–µ–Ω –æ—Ç—Ä–æ–ª: \n üë§@id${user_list[rana2].idvk}(${user_list[rana2].name}) \n üë•@id${user_list[rana].idvk}(${user_list[rana].name})  \n \n üåê ${location_name[selector]} \n üë£ ${location_list[location_name[selector]][tara]} \n ‚ö° ${task} \n ‚úÖ ${reward*2 + reward2*5} –ü–ö+ \nüèÜ ${reward2}üí∞ ${reward}üßô`
        })
        try {
            await vk.api.messages.send({
                user_id: user_list[rana2].idvk,
                random_id: 0,
                message: `‚åõ –ó–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –Ω–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ...`
            })
            await vk.api.messages.send({
                user_id: user_list[rana2].idvk,
                random_id: 0,
                message: `üë• –ö–∞–∫ –Ω–∞—Å—á–µ—Ç –ø–æ—Ä–æ–ª–∏—Ç—å —Å üë§@id${user_list[rana].idvk}(${user_list[rana].name}): \n \n üåê ${location_name[selector]} \n üë£ ${location_list[location_name[selector]][tara]} \n ‚ö° ${task} \n ‚úÖ ${reward*2 + reward2*5} –ü–ö+ \nüèÜ ${reward2}üí∞ ${reward}üßô`
            })
        } catch (error) {
            console.log(`User ${user_list[rana].idvk} blocked chating with bank!`)
        }
        try {
            await vk.api.messages.send({
                user_id: user_list[rana].idvk,
                random_id: 0,
                message: `‚åõ –ó–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –Ω–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ...`
            })
            await vk.api.messages.send({
                user_id: user_list[rana].idvk,
                random_id: 0,
                message: `üë• –ö–∞–∫ –Ω–∞—Å—á–µ—Ç –ø–æ—Ä–æ–ª–∏—Ç—å —Å üë§@id${user_list[rana2].idvk}(${user_list[rana2].name}): \n \n üåê ${location_name[selector]} \n üë£ ${location_list[location_name[selector]][tara]} \n ‚ö° ${task} \n ‚úÖ ${reward*2 + reward2*5} –ü–ö+ \nüèÜ ${reward2}üí∞ ${reward}üßô`
            })
        } catch (error) {
            console.log(`User ${user_list[rana].idvk} blocked chating with bank!`)
        }
    }
}

async function Searcher(data: any, target: number) {
    let counter = 0
    while (data.length != counter) {
        if (data[counter].id_item == target) {
            return true
        }
        counter++
    }
    return false
}

export async function Gen_Inline_Button_Item(category: any, context: any) {
    await context.send(`‚åõ –í—ã –æ–∫–∞–∑–∞–ª–∏—Å—å –≤ ${category.name}`)
    const user: any = await prisma.user.findFirst({ where: {    idvk: context.senderId  }   })
    const data: any= await prisma.item.findMany({   where: {    id_category: Number(category.id)    }   })
    let stopper = false
	let modif: number = 0
	const lim = 3 
    while (stopper == false) {
        let i = modif
        let counter = 0
        const inventory: any = await prisma.inventory.findMany({    where: {    id_user: user.id    }   })
        const item_render = []
        for (let j = modif; j < modif+3 && j < data.length; j++) {
            item_render.push({ name: data[j].name, price: `${data[j].price}G` })
        }
        await Image_Interface(item_render, context)
        let keyboard = Keyboard.builder()
        while (i < data.length && counter <lim) {
            const checker = await Searcher(inventory, data[i].id)
            
            if (checker && data[i].type != 'unlimited') {
                const text = `‚úÖ${data[i].name}`
                keyboard
                .textButton({   label: text.slice(0,40),
                                payload: {  command: `null`, operation: 'cant byuing'  },
                                color: 'positive'                           })
                .row()
            } else {
                const text = `üõí${data[i].price}üí∞ - ${data[i].name}`
                keyboard
                .textButton({   label: text.slice(0,40),
                                payload: {  command: `${i}`, operation: 'byuing'  },
                                color: 'secondary'                          })
                .row()
            }
            counter++
            i++
        }
        await context.send(`üõç –ß–µ–≥–æ –∂–µ–ª–∞–µ—Ç–µ?`, { keyboard: keyboard.oneTime().inline() } )
        const  push = await context.question('üß∑ –ë—ã—Å—Ç—Ä—ã–π –¥–æ—Å—Ç—É–ø',
            { keyboard: Keyboard.builder()
                .textButton({   label: '<',
                                payload: { command: "left" },
                                color: 'primary'              })
                .textButton({   label: `${(modif+3)/3}/${Math.round(data.length/3)}`,
                                payload: { command: "terminal" },
                                color: 'primary'              })
                .textButton({   label: '>',
                                payload: { command: 'right' },
                                color: 'primary'              }).row()
                .textButton({   label: '–ù–∞–∑–∞–¥',
                                payload: { command: 'back' },
                                color: 'primary'              })
                .textButton({   label: '–ó–∞–∫–æ–Ω—á–∏—Ç—å',
                                payload: { command: 'end' },
                                color: 'primary'              })
                .oneTime(), answerTimeLimit
            }
        )
        if (push.isTimeout) { await context.send('‚è∞ –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –≤—ã–±–æ—Ä–∞ —Ç–æ–≤–∞—Ä–æ–≤ –∏—Å—Ç–µ–∫–ª–æ!'); return true }
        if (push.payload) {
            if (push.payload.operation == 'byuing') {
                const user: any = await prisma.user.findFirst({ where: { idvk: context.senderId } })
                const item_buy:any = data[push.payload.command]
                const item_inventory:any = await prisma.inventory.findFirst({ where: { id_item: item_buy.id, id_user: user.id } })
                if ((!item_inventory || item_buy.type == 'unlimited') && user.gold >= item_buy.price) {
                    const money = await prisma.user.update({ data: { gold: user.gold - item_buy.price }, where: { id: user.id } })
                    await context.send(`‚öô –° –≤–∞—à–µ–≥–æ —Å—á–µ—Ç–∞ —Å–ø–∏—Å–∞–Ω–æ ${item_buy.price}üí∞, –æ—Å—Ç–∞—Ç–æ–∫: ${money.gold}üí∞`)
                    const inventory = await prisma.inventory.create({ data: { id_user: user.id, id_item: item_buy.id } })
                    console.log(`User ${context.senderId} bought new item ${item_buy.id}`)
                    await vk.api.messages.send({
                        peer_id: chat_id,
                        random_id: 0,
                        message: `üõç @id${user.idvk}(${user.name}) –ø–æ–∫—É–ø–∞–µ—Ç "${item_buy.name}" –≤ "${category.name}" –ö–æ—Å–æ–≥–æ –ø–µ—Ä–µ—É–ª–∫–∞`
                    })
                    await context.send(`‚öô –í–∞—à–∞ –ø–æ–∫—É–ø–∫–∞ –¥–æ—Å—Ç–∞–≤–∏—Ç—Å—è –≤ —Ç–µ—á–µ–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å–µ–∫—É–Ω–¥: ${item_buy.name}`)
                } else {
                    console.log(`User ${context.senderId} can't buy new item ${item_buy.id}`)
                    !item_inventory ? context.send(`üí° –£ –≤–∞—Å  –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ ${item_buy.name}!!`) : context.send(`üí° –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å ${item_buy.name}!`)
                }
            }
            if (push.payload.command == 'back') { await context.send(`‚åõ –í–æ–∑–≤—Ä–∞—Ç –≤ –ö–æ—Å–æ–π –ø–µ—Ä–µ—É–ª–æ–∫...`); return false }
            if (push.payload.command == 'end') { await context.send(`‚åõ –®–æ–ø–ø–∏–Ω–≥ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω`); return true }
            if (push.payload.command == 'right') { if (modif+lim < data.length) { modif += lim } }
            if (push.payload.command == 'left') { if (modif-lim >= 0) { modif -= lim } }
        }
    }
}

export async function Gen_Inline_Button_Category(context: any, weapon_type: any, mesa: string) {
    await Image_Random(context, "shop")
    let checker = false
    let counter = 0
    let current = 0
    let modif = 0
    while (checker == false) {
        let keyboard = Keyboard.builder()
        counter = 0
        current = modif
        const limit = 5
        let weapon_list = ''
        while (current < weapon_type.length && counter < limit ) {
            keyboard.textButton({   label: weapon_type[current].name,
                                    payload: {  command: weapon_type[current]   },
                                    color: 'primary'
            }).row()
            weapon_list += `‚öì${weapon_type[current].id} ${weapon_type[current].name} \n`
            counter++
            current++
        }
        keyboard.row()
        .textButton({   label: '<',
                        payload: { command: "left" },
                        color: 'primary'              })
        .textButton({   label: '–í–µ—Ä–Ω—É—Ç—å—Å—è',
                        payload: { command: 'back' },
                        color: 'primary'              })
        .textButton({   label: '>',
                        payload: { command: 'right' },
                        color: 'primary'              })
        const skill = await context.question( `‚úâ ${mesa}\n${weapon_list}`, { keyboard: keyboard.inline(), answerTimeLimit } )
        if (skill.isTimeout) { await context.send('‚è∞ –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –≤—ã–±–æ—Ä–∞ –º–µ—Å—Ç–∞ –ø–æ—Å–µ—â–µ–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ!'); return false }
        if (!skill.payload) {
            await context.send('üí° –ñ–º–∏—Ç–µ –ø–æ inline –∫–Ω–æ–ø–∫–∞–º!')
        } else {
            if (skill.payload.command == 'back') {
                await context.send('üí° –®–æ–ø–ø–∏–Ω–≥ —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω')
                modif = 0
                return false
            }
            if (skill.payload.command == 'left') {
                modif-limit >= 0 && modif < weapon_type.length ? modif-=limit : await context.send('üí° –ü–æ–∑–∞–¥–∏ –Ω–∏—á–µ–≥–æ –Ω–µ—Ç!')
                continue
            }
            if (skill.payload.command == 'right') {
                modif+limit < weapon_type.length ? modif+=limit: await context.send('üí° –í–ø–µ—Ä–µ–¥–∏ –Ω–∏—á–µ–≥–æ –Ω–µ—Ç')
                continue
            }
            checker = true
            return skill.payload.command
        }
    }
}
