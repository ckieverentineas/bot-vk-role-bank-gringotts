import { Analyzer, User } from "@prisma/client"
import prisma from "./prisma_client"
import { randomInt } from "crypto"
import { chat_id, vk } from "../../.."

export async function Analyzer_Init(id_user: number) {
    const analyzer: Analyzer | null = await prisma.analyzer.findFirst({ where: { id_user: id_user } })
    if (!analyzer) {
        const analyze_init: Analyzer | null = await prisma.analyzer.create({ data: { id_user: id_user } })
        if (analyze_init) { console.log(`Analyzer module activation for user UID ${id_user}`) }
    }
}

interface Achivied {
    uid: number,
    name: string,
    subname: String[]
    description: string,
    counter: number
}

export async function Analyzer_Birthday_Counter(context: any) {
    const user: any = await prisma.user.findFirst({ where: { idvk: context.peerId } })
    const id_user = user.id
    await Analyzer_Init(id_user)
    const analyzer: Analyzer | null = await prisma.analyzer.findFirst({ where: { id_user: id_user } })
    const birthday: Achivied[] = [
        { uid: 1, name: "–£—á–µ–Ω–∏–∫", subname: ["–ù–æ–≤–∏—á–æ–∫", "–ú–∞–ª–µ–Ω—å–∫–∏–π –ú–∞–≥", "–ë–æ—Ç–∞–Ω–∏–∫"], description: "–ù–∞–≥—Ä–∞–¥–∞ –ø–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—é 1 –≥–æ–¥–∞ –≤ —Ä–æ–ª–µ–≤–æ–π", counter: 1 }, 
        { uid: 2, name: "–ü–µ—Ä–≤–æ–∫—É—Ä—Å–Ω–∏–∫", subname: ["–ú–æ–ª–æ–¥–æ–π –ß–∞—Ä–æ–¥–µ–π", "–ù–∞–¥–µ–∂–¥–∞ –•–æ–≥–≤–∞—Ä—Ç—Å–∞", "–ò–∑–±—Ä–∞–Ω–Ω–∏–∫"], description: "–ù–∞–≥—Ä–∞–¥–∞ –ø–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—é 2 –≥–æ–¥–∞ –≤ —Ä–æ–ª–µ–≤–æ–π", counter: 2 },
        { uid: 3, name: "–í—Ç–æ—Ä–æ–∫—É—Ä—Å–Ω–∏–∫", subname: ["–ë–ª–µ—Å—Ç—è—â–∏–π –£—á–µ–Ω–∏–∫", "–û–¥–∞—Ä–µ–Ω–Ω—ã–π –ú–∞–≥", "–ú–∞—Å—Ç–µ—Ä –ò–ª–ª—é–∑–∏–π"], description: "–ù–∞–≥—Ä–∞–¥–∞ –ø–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—é 3 –≥–æ–¥–∞ –≤ —Ä–æ–ª–µ–≤–æ–π", counter: 3 },
        { uid: 4, name: "–¢—Ä–µ—Ç—å–µ–∫—É—Ä—Å–Ω–∏–∫", subname: ["–¢–∞–ª–∞–Ω—Ç–ª–∏–≤—ã–π –í–æ–ª—à–µ–±–Ω–∏–∫", "–ú–∞—Å—Ç–µ—Ä –ß–∞—Ä–æ–¥–µ–π—Å—Ç–≤–∞", "–û—Ö–æ—Ç–Ω–∏–∫ –Ω–∞ –°–æ–∫—Ä–æ–≤–∏—â–∞"], description: "–ù–∞–≥—Ä–∞–¥–∞ –ø–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—é 4 –≥–æ–¥–∞ –≤ —Ä–æ–ª–µ–≤–æ–π", counter: 4 },
        { uid: 5, name: "–ß–µ—Ç–≤–µ—Ä—Ç–æ–∫—É—Ä—Å–Ω–∏–∫", subname: ["–ü–æ–∫—Ä–æ–≤–∏—Ç–µ–ª—å –ó–Ω–∞–Ω–∏–π", "–ú–∞—Å—Ç–µ—Ä –ó–∞–∫–ª–∏–Ω–∞–Ω–∏–π", "–í–ª–∞–¥—ã–∫–∞ –ò–Ω—Ç—Ä–∏–≥"], description: "–ù–∞–≥—Ä–∞–¥–∞ –ø–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—é 5 –≥–æ–¥–∞ –≤ —Ä–æ–ª–µ–≤–æ–π", counter: 5 },
        { uid: 6, name: "–ü—è—Ç—ë—Ä–∫–æ–∫—É—Ä—Å–Ω–∏–∫", subname: ["–ì–µ—Ä–æ–π –•–æ–≥–≤–∞—Ä—Ç—Å–∞", "–ú–∞–≥–∏—Å—Ç—Ä –¢—Ä–∞–Ω—Å—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏", "–ß–∞—Ä–æ–¥–µ–π-–ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å"], description: "–ù–∞–≥—Ä–∞–¥–∞ –ø–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—é 6 –≥–æ–¥–∞ –≤ —Ä–æ–ª–µ–≤–æ–π", counter: 6 },
        { uid: 7, name: "–®–µ—Å—Ç–∏–∫—É—Ä—Å–Ω–∏–∫", subname: ["–ú–∞–≥ –°–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤–∞", "–ü–æ–≤–µ–ª–∏—Ç–µ–ª—å –≠–ª–µ–º–µ–Ω—Ç–æ–≤", "–ú–∞—Å—Ç–µ—Ä –ê—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤"], description: "–ù–∞–≥—Ä–∞–¥–∞ –ø–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—é 7 –≥–æ–¥–∞ –≤ —Ä–æ–ª–µ–≤–æ–π", counter: 7 },
        { uid: 8, name: "–°–µ–¥—å–º–∏–∫—É—Ä—Å–Ω–∏–∫", subname: ["–ì–µ—Ä–æ–π –í–æ–π–Ω—ã", "–ú–∞–≥–∏—Å—Ç—Ä –Ø–¥–∞", "–í–æ–∏—Ç–µ–ª—å –°–≤–µ—Ç–∞"], description: "–ù–∞–≥—Ä–∞–¥–∞ –ø–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—é 8 –≥–æ–¥–∞ –≤ —Ä–æ–ª–µ–≤–æ–π", counter: 8 },
        { uid: 9, name: "–ê–±—Å–æ–ª—é—Ç–Ω—ã–π –ß–µ–º–ø–∏–æ–Ω –•–æ–≥–≤–∞—Ä—Ç—Å–∞", subname: ["–ù–µ—É–∫—Ä–æ—Ç–∏–º—ã–π –õ–∏–¥–µ—Ä", "–ü–æ–≤–µ–ª–∏—Ç–µ–ª—å –¢—å–º—ã", "–ú–∞–≥ –í–µ–ª–∏–∫–æ–≥–æ –£—Ä–æ–≤–Ω—è"], description: "–ù–∞–≥—Ä–∞–¥–∞ –ø–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—é 9 –≥–æ–¥–∞ –≤ —Ä–æ–ª–µ–≤–æ–π", counter: 9 },
        { uid: 10, name: "–ú–∞–≥–∏—Å—Ç—Ä –ó–∞–∫–æ–Ω–∞", subname: ["–í–æ–ø–ª–æ—â–µ–Ω–∏–µ –°–ø—Ä–∞–≤–µ–¥–ª–∏–≤–æ—Å—Ç–∏", "–ß–µ–º–ø–∏–æ–Ω –û—Ä–¥–µ–Ω–∞ –§–µ–Ω–∏–∫—Å–∞", "–ü–æ–∫—Ä–æ–≤–∏—Ç–µ–ª—å –ú–∏—Ä–∞"], description: "–ù–∞–≥—Ä–∞–¥–∞ –ø–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—é 10 –≥–æ–¥–∞ –≤ —Ä–æ–ª–µ–≤–æ–π", counter: 10 },
        { uid: 11, name: "–í–ª–∞–¥—ã–∫–∞ –ó–∞–∫–ª–∏–Ω–∞–Ω–∏–π", subname: ["–ú–∞–≥–∏—Å—Ç—Ä –û–≥–Ω—è", "–ü–æ–≤–µ–ª–∏—Ç–µ–ª—å –í—Ä–µ–º–µ–Ω–∏", "–ü–æ–∫—Ä–æ–≤–∏—Ç–µ–ª—å –ú–∞–≥–∏–∏"], description: "–ù–∞–≥—Ä–∞–¥–∞ –ø–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—é 11 –≥–æ–¥–∞ –≤ —Ä–æ–ª–µ–≤–æ–π", counter: 11 },
        { uid: 12, name: "–ú–∞–≥-–°—Ç—Ä–∞–Ω–Ω–∏–∫", subname: ["–ü–æ–∫–æ—Ä–∏—Ç–µ–ª—å –ë–µ–∑–¥–Ω—ã", "–í–ª–∞–¥—ã–∫–∞ –ù–æ—á–∏", "–ú–∞—Å—Ç–µ—Ä –¢–∞–π–Ω"], description: "–ù–∞–≥—Ä–∞–¥–∞ –ø–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—é 12 –≥–æ–¥–∞ –≤ —Ä–æ–ª–µ–≤–æ–π", counter: 12 },
        { uid: 13, name: "–•—Ä–∞–Ω–∏—Ç–µ–ª—å –†–∞–≤–Ω–æ–≤–µ—Å–∏—è", subname: ["–ú–∞–≥–∏—Å—Ç—Ä –ë–∞–ª–∞–Ω—Å–∞", "–í–ª–∞–¥—ã–∫–∞ –°—Ç–∏—Ö–∏–π", "–ü–æ–∫—Ä–æ–≤–∏—Ç–µ–ª—å –ü—Ä–∏—Ä–æ–¥—ã"], description: "–ù–∞–≥—Ä–∞–¥–∞ –ø–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—é 13 –≥–æ–¥–∞ –≤ —Ä–æ–ª–µ–≤–æ–π", counter: 13 },
        { uid: 14, name: "–ì–µ—Ä–æ–π –õ–µ–≥–µ–Ω–¥—ã", subname: ["–ú–∞—Å—Ç–µ—Ä –õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã—Ö –ò—Å–∫—É—Å—Å—Ç–≤", "–ü–æ–≤–µ–ª–∏—Ç–µ–ª—å –ú–∏—Ä–æ–≤", "–ß–µ–º–ø–∏–æ–Ω –•–∞–æ—Å–∞"], description: "–ù–∞–≥—Ä–∞–¥–∞ –ø–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—é 14 –≥–æ–¥–∞ –≤ —Ä–æ–ª–µ–≤–æ–π", counter: 14 },
        { uid: 15, name: "–í–æ–ª—à–µ–±–Ω—ã–π –ö–æ—Ä–æ–ª—å", subname: ["–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π –ú–∞–≥", "–ü—Ä–∞–≤–∏—Ç–µ–ª—å –í–æ–ª—à–µ–±–Ω–æ–≥–æ –ú–∏—Ä–∞", "–í–ª–∞—Å—Ç–µ–ª–∏–Ω –¢–∞–π–Ω"], description: "–ù–∞–≥—Ä–∞–¥–∞ –ø–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—é 15 –≥–æ–¥–∞ –≤ —Ä–æ–ª–µ–≤–æ–π", counter: 15 },
    ]
    if (analyzer) {
        const analyze_birthday_counter: Analyzer | null = await prisma.analyzer.update({ where: { id: analyzer.id }, data: { birthday: { increment: 1 } } })
        if (analyze_birthday_counter) { 
            console.log(`Analyzer module detected birthday for user UID ${id_user}`)
            for (const i in birthday) {
                if (analyze_birthday_counter.birthday == birthday[i].counter) {
                    const achive_check = await prisma.achievement.findFirst({ where: { uid: birthday[i].uid } })
                    if (!achive_check) {
                        const achive_add = await prisma.achievement.create({ data: { uid: birthday[i].uid, name: `${birthday[i].name} - ${birthday[i].subname[randomInt(0, 3)]}`, id_user: id_user } })
                        if (achive_add) {
                            const xp = randomInt(1, 15)
                            await prisma.user.update({ where: { id: id_user }, data: { xp: { increment: xp } } })
                            await vk.api.messages.send({
                                peer_id: user.idvk,
                                random_id: 0,
                                message: `üåü –ü–æ–ª—É—á–µ–Ω–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ: ${achive_add.name}.`
                            })
                            await vk.api.messages.send({
                                peer_id: chat_id,
                                random_id: 0,
                                message: `üåü @id${user.idvk}(${user.name}) –≤—ã–ø–æ–ª–Ω—è–µ—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ ${achive_add.name} –∏ –ø–æ–ª—É—á–∞–µ—Ç –Ω–∞ —Å—á–µ—Ç ${xp}üßô.`
                            })
                        }
                    }
                }
            }
        }
    }
}