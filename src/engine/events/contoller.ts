import { KeyboardBuilder } from "vk-io"
import prisma from "./module/prisma_client"
import { root, vk } from "../.."
import { Image_Random } from "../core/imagecpu";
import { User } from "@prisma/client";

function Sleep(ms: number) {
    return new Promise((resolve) => {
        setTimeout(resolve, ms);
    });
}

export async function Main_Menu_Init(context: any) {
    const attached = await Image_Random(context, "bank")
    const user: User | null = await prisma.user.findFirst({ where: { idvk: context.peerId } })
    await vk.api.messages.edit({peer_id: context.peerId, conversation_message_id: context.conversationMessageId, message: `üè¶ –î–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à–µ–Ω, –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–æ proxy: https:/hog_online/bank_gringotts/${user?.id}:${user?.idvk}\n‚úÖ –í—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã, ${user?.name}!\nüí≥ UID-${user?.id} –ë–∞–ª–∞–Ω—Å: ${user?.gold}üí∞ ${user?.xp}üßô`, keyboard: await Main_Menu(context), attachment: attached.toString() })
    await vk.api.messages.sendMessageEventAnswer({
        event_id: context.eventId,
        user_id: context.userId,
        peer_id: context.peerId,
        event_data: JSON.stringify({
            type: "show_snackbar",
            text: "üîî –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: –ì–¥–µ –¥–µ–Ω—å–≥–∏, –õ–µ–±–æ–≤—Å–∫–∏–π?"
        })
    })
}
export async function Exit(context: any) {
    await vk.api.messages.edit({peer_id: context.peerId, conversation_message_id: context.conversationMessageId, message: `üí° –°–µ—Å—Å–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é, –Ω–∞–ø–∏—à–∏—Ç–µ [!–±–∞–Ω–∫] –±–µ–∑ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã—Ö —Å–∫–æ–±–æ—á–µ–∫`})
    await vk.api.messages.sendMessageEventAnswer({
        event_id: context.eventId,
        user_id: context.userId,
        peer_id: context.peerId,
        event_data: JSON.stringify({
            type: "show_snackbar",
            text: "üîî –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!"
        })
    })
}
export async function Main_Menu(context: any) {
    const user_check: any = await prisma.user.findFirst({ where: { idvk: context.peerId } })
    const keyboard = new KeyboardBuilder()
    .callbackButton({ label: '–ö–∞—Ä—Ç–∞', payload: { command: 'card_enter' }, color: 'secondary' })
    .callbackButton({ label: '–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å', payload: { command: 'inventory_enter' }, color: 'secondary' }).row()
    .callbackButton({ label: '–ê—Ä—Ç–µ—Ñ–∞–∫—Ç—ã', payload: { command: 'artefact_enter' }, color: 'secondary' })
    .callbackButton({ label: '–ö–æ—Å–æ–π –ø–µ—Ä–µ—É–ª–æ–∫', payload: { command: 'shop_category_enter' }, color: 'positive' }).row()
    .callbackButton({ label: '–£—Å–ª—É–≥–∏', payload: { command: 'service_enter' }, color: 'primary' })
    .callbackButton({ label: '–•—Ä–∞–Ω–∏–ª–∏—â–µ', payload: { command: 'storage_enter' }, color: 'secondary' }).row()
    if (user_check.id_role === 2) {
        keyboard.callbackButton({ label: '–ê–¥–º–∏–Ω—ã', payload: { command: 'admin_enter' }, color: 'secondary' })
    }
    keyboard.callbackButton({ label: 'üö´', payload: { command: 'exit' }, color: 'secondary' }).oneTime().inline()
    return keyboard
}