import { PrismaClient } from "@prisma/client";
import { HearManager } from "@vk-io/hear";
import { randomInt } from "crypto";
import { send } from "process";
import { Attachment, Keyboard, KeyboardBuilder } from "vk-io";
import { IQuestionMessageContext } from "vk-io-question";
import * as xlsx from 'xlsx';
import * as fs from 'fs';
import { root, vk } from '../index';
import { Accessed } from "./core/helper";
const prisma = new PrismaClient()

export function registerUserRoutes(hearManager: HearManager<IQuestionMessageContext>): void {
	hearManager.hear(/deleted/, async (context) => {
        const get_user:any = await prisma.user.findFirst({
            where: {
                idvk: context.senderId
            }
        })
        const delatt = await prisma.user.delete({
            where: {
                id: get_user?.id
            }
        })
        if (delatt) {
            context.send(`–í–∞—Å —É–¥–∞–ª–∏–ª–∏ ${get_user.name}. –í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –Ω–∞–º —Å–Ω–æ–≤–∞!`)
            console.log(`Deleted ${get_user.name}`)
        }
        prisma.$disconnect()
    })
    hearManager.hear(/–∫–∞—Ä—Ç–∞/, async (context) => {
        const get_user:any = await prisma.user.findFirst({
            where: {
                idvk: context.senderId
            }
        })
        const artefact_counter = await prisma.artefact.count({
            where: {
                id_user: get_user.id
            }
        })
        context.send(`
            –í—ã –¥–æ—Å—Ç–∞–ª–∏ —Å–≤–æ—é –∫–∞—Ä—Ç–æ—á–∫—É, ${get_user.class} ${get_user.name}, ${get_user.spec}:
            üí≥UID: ${get_user.id}
            üí∞–ì–∞–ª–ª–µ–æ–Ω—ã: ${get_user.gold}
            üßô–ú–∞–≥–∏—á–µ—Å–∫–∏–π –æ–ø—ã—Ç: ${get_user.xp}
            üìà–£—Ä–æ–≤–µ–Ω—å: ${get_user.lvl}
            üîÆ–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤: ${artefact_counter}
        `)
        prisma.$disconnect()
    })
    hearManager.hear(/–∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã/, async (context) => {
        const get_user:any = await prisma.user.findFirst({
            where: {
                idvk: context.senderId
            }
        })
        context.send(`
            –í–∞—à–∏ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã, ${get_user.class} ${get_user.name}, ${get_user.spec}:
            `
        )
        const artefact = await prisma.artefact.findMany({
            where: {
                id_user: get_user.id
            }
        })
        if (artefact.length > 0) {
            artefact.forEach(async element => {
                context.send(`
                    –ù–∞–∑–≤–∞–Ω–∏–µ: ${element.name}
                    ${element.label}:  ${element.type}
                    –ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ –∞—Ä—Ç–µ—Ñ–∞—Ç–∫–µ:  ${element.description}
                `)
            });
        } else {
            context.send(`–£ –í–∞—Å –µ—â–µ –Ω–µ—Ç –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤ =(`)
        }
        
        prisma.$disconnect()
    })
    hearManager.hear(/–ö–æ—Å–æ–π –ø–µ—Ä–µ—É–ª–æ–∫/, async (context) => {
        if (context.senderId == root) {
            const category:any = await prisma.category.findMany({})
            if (category.length == 0) {
                const ans: any = await context.question(`
                        –ú–∞–≥–∞–∑–∏–Ω–æ–≤ –µ—â–µ –Ω–µ—Ç
                    `,
                    {
                        keyboard: Keyboard.builder()
                        .textButton({
                            label: '–î–æ–±–∞–≤–∏—Ç—å –º–∞–≥–∞–∑–∏–Ω',
                            payload: {
                                command: 'new_shop'
                            },
                            color: 'secondary'
                        })
                        .oneTime().inline()
                    }
                )
                if (ans.payload.command == 'new_shop') {
                    const shop = await context.question(`
                        –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞:
                    `)
                    const shop_create = await prisma.category.create({
                        data: {
                            name: shop.text
                        }
                    })
                    context.send(`–í—ã –æ—Ç–∫—Ä—ã–ª–∏ —Å–ª–µ–¥—É—é—â–∏–π –º–∞–≥–∞–∑–∏–Ω ${shop_create.name}`)
                }
            } else {
                let keyboard = Keyboard.builder()
                category.forEach(async element => {
                    keyboard.textButton({
                        label: element.name,
                        payload: {
                            command: `${element.id}`
                        }
                    })
                    .textButton({
                        label: "–£–¥–∞–ª–∏—Ç—å",
                        payload: {
                            command: `${element.id}`
                        }
                    }).row()
                })
                const ans: any = await context.question(`
                        –ö—É–¥–∞ –ø–æ–π–¥–µ–º?
                    `,
                    {
                        keyboard: keyboard
                        .textButton({
                            label: '–î–æ–±–∞–≤–∏—Ç—å –º–∞–≥–∞–∑–∏–Ω',
                            payload: {
                                command: 'new_shop'
                            },
                            color: 'secondary'
                        })
                        .oneTime().inline()
                    }
                )
                if (ans.text == "–£–¥–∞–ª–∏—Ç—å") {
                    const shop_delete = await prisma.category.delete({
                        where: {
                            id: Number(ans.payload.command)
                        }
                    })
                    context.send(`–£–¥–∞–ª–µ–Ω –º–∞–≥–∞–∑–∏–Ω ${shop_delete.name}`)
                }
                if (ans.payload.command == 'new_shop') {
                    const shop = await context.question(`
                        –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞:
                    `)
                    const shop_create = await prisma.category.create({
                        data: {
                            name: shop.text
                        }
                    })
                    context.send(`–í—ã –æ—Ç–∫—Ä—ã–ª–∏ —Å–ª–µ–¥—É—é—â–∏–π –º–∞–≥–∞–∑–∏–Ω ${shop_create.name}`)
                }
                if (category.find(i => i.name == ans.text)) {
                    context.send(`–í—ã –æ–∫–∞–∑–∞–ª–∏—Å—å –≤ ${ans.text}`)
                    const item: any= await prisma.item.findMany({
                        where: {
                            id_category: Number(ans.payload.command)
                        }
                    })
                    if (item.length == 0) {
                        context.send(`–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –ø—Ä–∏–∞–ª–≤–∫–∏ –ø–æ–∫–∞ —á—Ç–æ –ø—É—Å—Ç—ã=/`)
                    } else {
                        item.forEach(async element => {
                            const buer: any= context.send(`${element.name} ${element.price}üí∞`,
                                {
                                    keyboard: Keyboard.builder()
                                    .textButton({
                                        label: '–ö—É–ø–∏—Ç—å',
                                        payload: {
                                            command: `${element.name}`
                                        },
                                        color: 'secondary'
                                    })
                                    .oneTime().inline()
                                }
                            )
                        })
                    }
                    const ans_item: any = await context.question(`
                            –ß—Ç–æ –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å?
                        `,
                        {
                            keyboard: Keyboard.builder()
                            .textButton({
                                label: '–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä',
                                payload: {
                                    command: 'new_item'
                                },
                                color: 'secondary'
                            })
                            .textButton({
                                label: '–ü–µ—Ä–µ–π—Ç–∏ –∫ –ø–æ–∫—É–ø–∫–∞–º',
                                payload: {
                                    command: 'continue'
                                },
                                color: 'secondary'
                            })
                            .oneTime().inline()
                        }
                    )
                    if (ans_item.payload.command == 'new_item') {
                        const item_name = await context.question(`
                            –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞:
                        `)
                        const item_price = await context.question(`
                            –í–≤–µ–¥–∏—Ç–µ –µ–≥–æ —Ü–µ–Ω–Ω–æ—Å—Ç—å:
                        `)
                        const item_create = await prisma.item.create({
                            data: {
                                name: item_name.text,
                                price: Number(item_price.text),
                                id_category: Number(ans.payload.command),
                                type: "–ù–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ –ø–æ–∫—É–ø–æ–∫"
                            }
                        })
                        context.send(`–î–ª—è –º–∞–≥–∞–∑–∏–Ω–∞ ${ans.text} –¥–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä ${item_name.text} —Å—Ç–æ–∏–º–æ—Å—Ç—å—é ${item_price.text} –≥–∞–ª–ª–µ–æ–Ω–æ–≤`)
                    }
                    if (ans_item.payload.command == 'continue') {
                        context.send(`–ù–∞–∂–∏–º–∞–π—Ç–µ –∫–Ω–æ–ø–∫—É –∫—É–ø–∏—Ç—å —É –∂–µ–ª–∞–µ–º–æ–≥–æ —Ç–æ–≤–∞—Ä–∞`)
                    }
                }
            }
        } else {
            const category:any = await prisma.category.findMany({})
            if (category.length == 0) {
                const ans: any = await context.send(`–ú–∞–≥–∞–∑–∏–Ω–æ–≤ –µ—â–µ –Ω–µ—Ç`)
            } else {
                let keyboard = Keyboard.builder()
                category.forEach(async element => {
                    keyboard.textButton({
                        label: element.name,
                        payload: {
                            command: `${element.id}`
                        }
                    }).row()
                })
                const ans: any = await context.question(`
                        –ö—É–¥–∞ –ø–æ–π–¥–µ–º?
                    `,
                    {
                        keyboard: keyboard
                        .oneTime().inline()
                    }
                )
                if (category.find(i => i.name == ans.text)) {
                    context.send(`–í—ã –æ–∫–∞–∑–∞–ª–∏—Å—å –≤ ${ans.text}`)
                    const item: any= await prisma.item.findMany({
                        where: {
                            id_category: Number(ans.payload.command)
                        }
                    })
                    if (item.length == 0) {
                        context.send(`–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –ø—Ä–∏–∞–ª–≤–∫–∏ –ø–æ–∫–∞ —á—Ç–æ –ø—É—Å—Ç—ã=/`)
                    } else {
                        item.forEach(async element => {
                            const buer: any= context.send(`${element.name} ${element.price}üí∞`,
                                {
                                    keyboard: Keyboard.builder()
                                    .textButton({
                                        label: '–ö—É–ø–∏—Ç—å',
                                        payload: {
                                            command: `${element.name}`
                                        },
                                        color: 'secondary'
                                    })
                                    .oneTime().inline()
                                }
                            )
                        })
                    }
                }
            }
        }
        prisma.$disconnect()
    })
    hearManager.hear(/–ö—É–ø–∏—Ç—å/, async (context) => {
        const user: any = await prisma.user.findFirst({
            where: {
                idvk: context.senderId
            }
        })
        const item_buy:any = await prisma.item.findFirst({
            where: {
                name: context.messagePayload.command,
            }
        })
        const item_inventory:any = await prisma.inventory.findFirst({
            where: {
                id_item: item_buy.id,
                id_user: user.id
            }
        })
        
        if (!item_inventory && user.gold >= item_buy.price) {
            const money = await prisma.user.update({
                data: {
                    gold: user.gold - item_buy.price
                },
                where: {
                    id: user.id
                }
            })
            context.send(`–° –≤–∞—à–µ–≥–æ —Å—á–µ—Ç–∞ —Å–ø–∏—Å–∞–Ω–æ ${item_buy.price}, –æ—Å—Ç–∞–ª–æ—Å—å –≥–∞–ª–ª–µ–æ–Ω–æ–≤: ${money.gold}`)
            const inventory = await prisma.inventory.create({
                data: {
                    id_user: user.id,
                    id_item: item_buy.id
                }
            })
            context.send(`–í–∞—à–∞ –ø–æ–∫—É–ø–∫–∞ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∞: ${context.messagePayload.command}`)
        } else {
            context.send(`–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å ${context.messagePayload.command}! –∏–ª–∏ –∂–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!`)
        }
    })
    hearManager.hear(/–æ–ø–µ—Ä–∞—Ü–∏–∏/, async (context) => {
        if (await Accessed(context) != 2) {
            return
        }
        let name_check = false
		let datas: any = []
		while (name_check == false) {
			const uid = await context.question(`
                –í–≤–µ–¥–∏—Ç–µ üí≥UID –±–∞–Ω–∫–æ–≤—Å–∫–æ–≥–æ —Å—á–µ—Ç–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª—è:
			`)
			if (uid.text) {
                const get_user = await prisma.user.findFirst({
                    where: {
                        id: Number(uid.text)
                    }
                })
                console.log(uid.text)
                console.log(get_user)
                if (get_user) {
                    name_check = true
				    datas.push({id: `${uid.text}`})
                    const artefact_counter = await prisma.artefact.count({
                        where: {
                            id_user: Number(uid.text)
                        }
                    })
                    context.send(`
                        üè¶–û—Ç–∫—Ä—ã—Ç–∞ —Å–ª–µ–¥—É—é—â–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞: ${get_user.class} ${get_user.name}, ${get_user.spec}:
                        
                        üí≥UID: ${get_user.id}
                        üí∞–ì–∞–ª–ª–µ–æ–Ω—ã: ${get_user.gold}
                        üßô–ú–∞–≥–∏—á–µ—Å–∫–∏–π –æ–ø—ã—Ç: ${get_user.xp}
                        üìà–£—Ä–æ–≤–µ–Ω—å: ${get_user.lvl}
                        üîÆ–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤: ${artefact_counter}
                    `)
                }
                const inventory = await prisma.inventory.findMany({
                    where: {
                        id_user: get_user?.id
                    }
                })
                let cart = ''
                let counter = 0
                if (inventory.length == 0) {
                    context.send(`–ü–æ–∫—É–ø–∫–∏ –ø–æ–∫–∞ –Ω–µ —Å–æ–≤–µ—Ä—à–∞–ª–∏—Å—å`)
                } else {
                    console.log(`ok`)
                    const promise = new Promise(async (resolve, reject) => {
                        inventory.forEach(async element => {
                            console.log(element)
                            const item = await prisma.item.findFirst({
                                where: {
                                    id: element.id_item 
                                }
                            })
                            console.log(item)
                            cart += `${item?.name} \n`
                            console.log(cart)
                            counter++
                            if(inventory.length == counter){
                                resolve('–í—Å–µ –ø—Ä–æ—à–ª–æ –æ—Ç–ª–∏—á–Ω–æ!');
                            }
                        })
                    });
                    promise.then(
                        (data) => {
                            console.log(data)
                            context.send(`–ë—ã–ª–∏ —Å–æ–≤–µ—Ä—à–µ–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ –ø–æ–∫—É–ø–∫–∏: \n ${cart}`)
                        },
                        (error) => {
                        console.log(error); // –≤—ã–≤–µ—Å—Ç–∏ –æ—à–∏–±–∫—É
                        }
                    );
                }
			} else {
				context.send(`–ù–µ—Ç —Ç–∞–∫–æ–≥–æ –±–∞–Ω–∫–æ–≤—Å–∫–æ–≥–æ —Å—á–µ—Ç–∞!`)
			}
		}

        const ans: any = await context.question(`
                –î–æ—Å—Ç—É–ø–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å üí≥UID: ${datas[0].id}
            `,
            {
            keyboard: Keyboard.builder()
            .textButton({
                label: '+üí∞',
                payload: {
                    command: 'gold_up'
                },
                color: 'secondary'
            })
            .textButton({
                label: '-üí∞',
                payload: {
                    command: 'gold_down'
                },
                color: 'secondary'
            })
            .row()
            .textButton({
                label: '+üßô',
                payload: {
                    command: 'xp_up'
                },
                color: 'secondary'
            })
            .textButton({
                label: '-üßô',
                payload: {
                    command: 'xp_down'
                },
                color: 'secondary'
            })
            .row()
            .textButton({
                label: '‚ûïüîÆ',
                payload: {
                    command: 'artefact_add'
                },
                color: 'secondary'
            })
            .textButton({
                label: 'üëÅüîÆ',
                payload: {
                    command: 'artefact_show'
                },
                color: 'secondary'
            })
            .row()
            .textButton({
                label: 'üîô',
                payload: {
                    command: 'back'
                },
                color: 'secondary'
            })
            .oneTime().inline()
            }
        )
        async function Gold_Up(id: number) {
            const count: number = await Ipnut_Gold() 
            const user_get: any = await prisma.user.findFirst({
                where: {
                    id
                }
            })
            const money_put = await prisma.user.update({
                where: {
                    id: user_get.id
                },
                data: {
                    gold: user_get.gold + count
                }
            })
            await vk.api.messages.send({
                user_id: user_get.idvk,
                random_id: 0,
                message: `üè¶–í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ ${count}üí∞ –≥–∞–ª–ª–µ–æ–Ω–æ–≤. \n–í–∞—à —Å—á—ë—Ç: ${money_put.gold}üí∞`
            })
            context.send(`üè¶–û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ`)
            console.log(`User ${user_get.idvk} got ${count} gold. Him/Her bank now ${money_put.gold}`)
        }
        async function Gold_Down(id: number) {
            const count: number = await Ipnut_Gold() 
            const user_get: any = await prisma.user.findFirst({
                where: {
                    id
                }
            })
            if (user_get.gold-count >= 0) {
                const money_put = await prisma.user.update({
                    where: {
                        id: user_get.id
                    },
                    data: {
                        gold: user_get.gold - count
                    }
                })
                await vk.api.messages.send({
                    user_id: user_get.idvk,
                    random_id: 0,
                    message: `üè¶–° –≤–∞—Å —Å–Ω—è—Ç–Ω–æ ${count}üí∞ –≥–∞–ª–ª–µ–æ–Ω–æ–≤. \n–í–∞—à —Å—á—ë—Ç: ${money_put.gold}üí∞`
                })
                context.send(`üè¶–û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ`)
                console.log(`User ${user_get.idvk} lost ${count} gold. Him/Her bank now ${money_put.gold}`)
            } else {
                const confirmq = await context.question(`–í—ã —Ö–æ—Ç–∏—Ç–µ —Å–Ω—è—Ç—å ${count} üí∞–≥–∞–ª–ª–µ–æ–Ω–æ–≤ c —Å—á–µ—Ç–∞ ${user_get.name}, –Ω–æ —Å—á–µ—Ç —ç—Ç–æ–≥–æ ${user_get.spec} ${user_get.gold}. –£–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –±–∞–ª–∞–Ω—Å: ${user_get.gold-count}`,
                {
                    keyboard: Keyboard.builder()
                    .textButton({
                        label: '–î–∞',
                        payload: {
                            command: 'confirm'
                        },
                        color: 'secondary'
                    })
                    .textButton({
                        label: '–ù–µ—Ç',
                        payload: {
                            command: 'gold_down'
                        },
                        color: 'secondary'
                    })
                    .oneTime().inline()
                    }
                )
                if (confirmq.payload.command === 'confirm') {
                    const money_put = await prisma.user.update({
                        where: {
                            id: user_get.id
                        },
                        data: {
                            gold: user_get.gold - count
                        }
                    })
                    await vk.api.messages.send({
                        user_id: user_get.idvk,
                        random_id: 0,
                        message: `üè¶–° –≤–∞—Å —Å–Ω—è—Ç–Ω–æ ${count}üí∞ –≥–∞–ª–ª–µ–æ–Ω–æ–≤. \n–í–∞—à —Å—á—ë—Ç: ${money_put.gold}üí∞`
                    })
                    context.send(`üè¶–û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ`)
                    console.log(`User ${user_get.idvk} lost ${count} gold. Him/Her bank now ${money_put.gold}`)
                } else {
                    context.send(`–ù—É–∂–Ω–æ –±—ã—Ç—å –∂–µ—Å—Ç—á–µ! –ì—Ä–µ–±–∏ –±–∞–±–ª–æ`)
                }
            }
        }
        async function Xp_Up(id: number) {
            const count: number = await Ipnut_Gold() 
            const user_get: any = await prisma.user.findFirst({
                where: {
                    id
                }
            })
            const money_put = await prisma.user.update({
                where: {
                    id: user_get.id
                },
                data: {
                    xp: user_get.xp + count
                }
            })
            await vk.api.messages.send({
                user_id: user_get.idvk,
                random_id: 0,
                message: `üè¶–í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ ${count}üßô–º–∞–≥–∏—á–µ—Å–∫–æ–≥–æ –æ–ø—ã—Ç–∞. \n–í–∞—à –ú–û: ${money_put.xp}üßô`
            })
            context.send(`üè¶–û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ`)
            console.log(`User ${user_get.idvk} got ${count} MO. Him/Her XP now ${money_put.xp}`)
        }
        async function Xp_Down(id: number) {
            const count: number = await Ipnut_Gold() 
            const user_get: any = await prisma.user.findFirst({
                where: {
                    id
                }
            })
            if (user_get.xp-count >= 0) {
                const money_put = await prisma.user.update({
                    where: {
                        id: user_get.id
                    },
                    data: {
                        xp: user_get.xp - count
                    }
                })
                await vk.api.messages.send({
                    user_id: user_get.idvk,
                    random_id: 0,
                    message: `üè¶–° –≤–∞—Å —Å–Ω—è—Ç–Ω–æ ${count}üßô–º–∞–≥–∏—á–µ—Å–∫–æ–≥–æ –æ–ø—ã—Ç–∞. \n–í–∞—à –ú–û: ${money_put.xp}üßô`
                })
                context.send(`üè¶–û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ`)
                console.log(`User ${user_get.idvk} lost ${count} MO. Him/Her XP now ${money_put.xp}`)
            } else {
                context.send(`–í—ã —Ö–æ—Ç–∏—Ç–µ —Å–Ω—è—Ç—å ${count} üßô–º–∞–≥–∏—á–µ—Å–∫–æ–≥–æ –æ–ø—ã—Ç–∞ c —Å—á–µ—Ç–∞ ${user_get.name}, –Ω–æ —Å—á–µ—Ç —ç—Ç–æ–≥–æ ${user_get.spec} ${user_get.xp}. –£–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –±–∞–ª–∞–Ω—Å: ${user_get.xp-count}`)
            }
        }
        async function Artefact_Show(id: number) { 
            const artefact = await prisma.artefact.findMany({
                where: {
                    id_user: id
                }
            })
            if (artefact.length > 0) {
                artefact.forEach(async element => {
                    context.send(`
                            –ù–∞–∑–≤–∞–Ω–∏–µ: ${element.name}
                            ${element.label}:  ${element.type}
                            –ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ –∞—Ä—Ç–µ—Ñ–∞—Ç–∫–µ:  ${element.description}
                        `,
                        {
                            keyboard: Keyboard.builder()
                            .textButton({
                                label: '–£–¥–∞–ª–∏—Ç—åüîÆ',
                                payload: {
                                    command: `${element.id}`
                                },
                                color: 'secondary'
                            })
                            .oneTime().inline()
                        }
                    )
                });
            } else {
                context.send(`–ê—Ä—Ç–µ—Ñ–∞–∫—Ç—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç =(`)
            }
        }
        hearManager.hear(/–£–¥–∞–ª–∏—Ç—åüîÆ/, async (context) => {
            const art_get: any = await prisma.artefact.findFirst({
                where: {
                    id: Number(context.messagePayload.command)
                }
            })
            console.log(art_get)
            console.log(context.messagePayload.command)
            if (art_get) {
                const art_del = await prisma.artefact.delete({
                    where: {
                        id: Number(context.messagePayload.command)
                    }
                })
                context.send(`–£–¥–∞–ª–µ–Ω –∞—Ä—Ç–µ—Ñ–∞–∫—Ç ${art_del.name}`)
            }
        })
        async function Artefact_Add(id: number, count: number) {
            let datas = []
            let trigger = false
            while (trigger == false) {
                const name: any = await context.question(`
                    üè¶–í–Ω–∏–º–∞–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–∞ –ø—Ä–æ—Ü–µ–¥—É—Ä–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ê—Ä—Ç–µ—Ñ–∞–∫—Ç–∞ –¥–ª—è –±–∞–Ω–∫–æ–≤—Å–∫–æ–≥–æ —Å—á—ë—Ç–∞ üí≥:${id}
                    –£–∫–∞–∂–∏—Ç–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ üîÆ–∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞ –Ω–∞–∑–≤–∞–Ω–∏–µ:
                `)
                if (name.text.length <= 30) {
                    trigger = true
                    datas.push({name: `${name.text}`})
                } else {
                    context.send(`–í–≤–≤–µ–¥–∏—Ç–µ –¥–æ 30 —Å–∏–º–≤–æ–ª–æ–≤ –≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ!`)
                }
            }

            trigger = false
            while (trigger == false) {
                const type: any = await context.question(`
                        –£–∫–∞–∂–∏—Ç–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ üîÆ–∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞ —Ç–∏–ø –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è:
                        üïê - –æ–¥–Ω–æ—Ä–∞–∑–æ–≤–æ–µ; ‚ôæ - –º–Ω–æ–≥–æ—Ä–∞–∑–æ–≤–æ–µ.
                    `,
                    {
                        keyboard: Keyboard.builder()
                        .textButton({
                            label: 'üïê',
                            payload: {
                                command: '–û–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–π'
                            },
                            color: 'secondary'
                        })
                        .textButton({
                            label: '‚ôæ',
                            payload: {
                                command: '–ú–Ω–æ–≥–æ—Ä–∞–∑–æ–≤—ã–π'
                            },
                            color: 'secondary'
                        }).oneTime().inline()
                    }
                )
                if (type.payload) {
                    trigger = true
                    datas.push({label: `${type.text}`})
                    datas.push({type: `${type.payload.command}`})
                } else {
                    context.send(`–ú–æ–∂–µ—Ç –ª—É—á—à–µ –ø–æ –∫–Ω–æ–ø–æ—á–∫–∞–º –∂–∞—Ç—å?`)
                }
            }

            trigger = false
            while (trigger == false) {
                const description: any = await context.question(`
                    –£–∫–∞–∂–∏—Ç–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ üîÆ–∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞ —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫—É —Å–∞–º–æ–≥–æ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞ –∏–∑ –∞–ª—å–±–æ–º–∞ –≥—Ä—É–ø–ø—ã –•–æ–≥–≤–∞—Ä—Ç—Å –û–Ω–ª–∞–π–Ω:
                `)
                if (description.text.length <= 1000) {
                    trigger = true
                    datas.push({description: `${description.text}`})
                } else {
                    context.send(`–í–≤–≤–µ–¥–∏—Ç–µ –¥–æ 1000 —Å–∏–º–≤–æ–ª–æ–≤ –≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ!`)
                }
            }
            const target: any = await prisma.user.findFirst({
                where: {
                    id
                },
                select: {
                    idvk: true
                }
            })
            const artefact_create = await prisma.artefact.create({
                data: {
                    id_user: id,
                    name: datas[0].name,
                    label: datas[1].label,
                    type: datas[2].type,
                    description: datas[3].description
                }
            })
            await vk.api.messages.send({
                user_id: target.idvk,
                random_id: 0,
                message: `üè¶–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –ø–æ–ª—É—á–∏–ª–∏ –Ω–æ–≤—ã–π üîÆ: ${artefact_create.name}
                    ${artefact_create.label}: ${artefact_create.type}
                `
            })
            context.send(`üè¶–û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ`)
        }
        async function Back(id: number, count: number) {
            context.send(`–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.`)
        }
        async function Ipnut_Gold() {
            let golden = 0
            let money_check = false
            while (money_check == false) {
                const gold = await context.question(`
                    –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–∏ ${ans.text}:
                `)
                if (gold.text) {
                    money_check = true
                    golden = Number(gold.text)
                } 
            }
            return golden
        }
        if (ans.payload && ans.payload.command != 'back') {
            const config = {
                'gold_up': Gold_Up,
                'gold_down': Gold_Down,
                'xp_up': Xp_Up,
                'xp_down': Xp_Down,
                'back': Back,
                'artefact_add': Artefact_Add,
                'artefact_show': Artefact_Show
            }
            const answergot = await config[ans.payload.command](Number(datas[0].id))
        } else {
            context.send(`–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.`)
        }
        
        
        prisma.$disconnect()
    })
    hearManager.hear(/–∏–Ω–≤–µ–Ω—Ç–∞—Ä—å/, async (context) => {
        const get_user:any = await prisma.user.findFirst({
            where: {
                idvk: context.senderId
            }
        })
        const inventory = await prisma.inventory.findMany({
            where: {
                id_user: get_user.id
            }
        })
        let cart = ''
        let counter = 0
        if (inventory.length == 0) {
            context.send(`–í—ã –µ—â–µ –Ω–∏—á–µ–≥–æ –Ω–µ –ø—Ä–∏–æ–±—Ä–µ–ª–∏:(`)
        } else {
            console.log(`ok`)
            const promise = new Promise(async (resolve, reject) => {
                inventory.forEach(async element => {
                    console.log(element)
                    const item = await prisma.item.findFirst({
                        where: {
                            id: element.id_item 
                        }
                    })
                    console.log(item)
                    cart += `${item?.name} \n`
                    console.log(cart)
                    counter++
                    if(inventory.length == counter){
                        resolve('–í—Å–µ –ø—Ä–æ—à–ª–æ –æ—Ç–ª–∏—á–Ω–æ!');
                    }
                })
            });
            promise.then(
                (data) => {
                    console.log(data)
                    context.send(`–í—ã –ø—Ä–∏–æ–±—Ä–µ–ª–∏ —Å–ª–µ–¥—É—é—â–µ–µ: \n ${cart}`)
                },
                (error) => {
                console.log(error); // –≤—ã–≤–µ—Å—Ç–∏ –æ—à–∏–±–∫—É
                }
            );
        }
        prisma.$disconnect()
    })

    hearManager.hear(/–∞–¥–º–∏–Ω–∫–∞/, async (context: any) => {
        if (context.senderId == root) {
            const user:any = await prisma.user.findFirst({
                where: {
                    idvk: Number(context.senderId)
                }
            })
            const lvlup = await prisma.user.update({
                where: {
                    id: user.id
                },
                data: {
                    id_role: 2
                }
            })
            if (lvlup) {
                context.send(`–†—É—Ç –ø—Ä–∞–≤–∞ –ø–æ–ª—É—á–µ–Ω—ã`)
            } else {
                context.send(`–û—à–∏–±–∫–∞`)
            }
        }
    })
    hearManager.hear(/–ø—Ä–∞–≤–∞/, async (context: any) => {
        if (context.senderId == root) {
            const uid = await context.question(`
                –í–≤–µ–¥–∏—Ç–µ üí≥UID –±–∞–Ω–∫–æ–≤—Å–∫–æ–≥–æ —Å—á–µ—Ç–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª—è:
			`)
			if (uid.text) {
                const get_user = await prisma.user.findFirst({
                    where: {
                        id: Number(uid.text)
                    }
                })
                if (get_user) {
                    const artefact_counter = await prisma.artefact.count({
                        where: {
                            id_user: Number(uid.text)
                        }
                    })
                    const role: any = await prisma.role.findFirst({
                        where: {
                            id: get_user.id_role
                        }
                    })
                    context.send(`
                        üè¶–û—Ç–∫—Ä—ã—Ç–∞ —Å–ª–µ–¥—É—é—â–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞: ${get_user.class} ${get_user.name}, ${get_user.spec}:
                        
                        üí≥UID: ${get_user.id}
                        üí∞–ì–∞–ª–ª–µ–æ–Ω—ã: ${get_user.gold}
                        üßô–ú–∞–≥–∏—á–µ—Å–∫–∏–π –æ–ø—ã—Ç: ${get_user.xp}
                        üìà–£—Ä–æ–≤–µ–Ω—å: ${get_user.lvl}
                        üîÆ–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤: ${artefact_counter}

                        –ü—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${role.name}
                    `)
                    const answer1 = await context.question(`
                        –ß—Ç–æ –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å?
                        `,
                        {
                            keyboard: Keyboard.builder()
                            .textButton({
                                label: '–î–∞—Ç—å –∞–¥–º–∏–Ω–∫—É',
                                payload: {
                                    command: 'access'
                                },
                                color: 'secondary'
                            })
                            .textButton({
                                label: '–°–Ω—è—Ç—å –∞–¥–º–∏–Ω–∫—É',
                                payload: {
                                    command: 'denied'
                                },
                                color: 'secondary'
                            }).row()
                            .textButton({
                                label: '–ù–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞—Ç—å',
                                payload: {
                                    command: 'cancel'
                                },
                                color: 'secondary'
                            })
                            .oneTime().inline()
                        }
                    )
                    if (!answer1.payload) {
                        context.send(`–ñ–º–∏—Ç–µ —Ç–æ–ª—å–∫–æ –ø–æ –∫–Ω–æ–ø–∫–∞–º —Å –∏–∫–æ–Ω–∫–∞–º–∏!`)
                    } else {
                        if (answer1.payload.command === 'access') {
                            const lvlup = await prisma.user.update({
                                where: {
                                    id: get_user.id
                                },
                                data: {
                                    id_role: 2
                                }
                            })
                            if (lvlup) {
                                context.send(`–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è ${get_user.name}`)
                                await vk.api.messages.send({
                                    user_id: get_user.idvk,
                                    random_id: 0,
                                    message: `–í–∞—Å –Ω–∞–∑–Ω–∞—á–∏–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º`
                                })
                            } else {
                                context.send(`–û—à–∏–±–∫–∞`)
                            }
                        }
                        if (answer1.payload.command === 'denied') {
                            const lvlup = await prisma.user.update({
                                where: {
                                    id: get_user.id
                                },
                                data: {
                                    id_role: 1
                                }
                            })
                            if (lvlup) {
                                context.send(`–û–±—ã—á–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è ${get_user.name}`)
                                await vk.api.messages.send({
                                    user_id: get_user.idvk,
                                    random_id: 0,
                                    message: `–í–∞—Å –ø–æ–Ω–∏–∑–∏–ª–∏ –¥–æ –æ–±—ã—á–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è`
                                })
                            } else {
                                context.send(`–û—à–∏–±–∫–∞`)
                            }
                        }
                        if (answer1.payload.command === 'cancel') {
                            context.send(`–¢–æ–∂–µ –≤–∞—Ä–∏–∞–Ω—Ç`)
                        }
                    }
                }
			} else {
				context.send(`–ù–µ—Ç —Ç–∞–∫–æ–≥–æ –±–∞–Ω–∫–æ–≤—Å–∫–æ–≥–æ —Å—á–µ—Ç–∞!`)
			}
        }
        prisma.$disconnect
    })
    hearManager.hear(/–∞–¥–º–∏–Ω—ã/, async (context: any) => {
        const user = await prisma.user.findFirst({
            where: {
                idvk: context.senderId
            }
        })
        if (user?.id_role == 2) {
            const users = await prisma.user.findMany({
                where: {
                    id_role: 2
                }
            })
            context.send(`${JSON.stringify(users)}`)
        }
    })
}

    