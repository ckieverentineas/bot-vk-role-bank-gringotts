import { PrismaClient } from "@prisma/client";
import { HearManager } from "@vk-io/hear";
import { randomInt } from "crypto";
import { send } from "process";
import { Attachment, Keyboard, KeyboardBuilder } from "vk-io";
import { IQuestionMessageContext } from "vk-io-question";
import * as xlsx from 'xlsx';
import * as fs from 'fs';
import { vk } from '../index';

const prisma = new PrismaClient()

export function registerUserRoutes(hearManager: HearManager<IQuestionMessageContext>): void {
	hearManager.hear(/0/, async (context) => {
        const get_user:any = await prisma.user.findFirst({
            where: {
                idvk: context.senderId
            }
        })
        const delatt = await prisma.user.delete({
            where: {
                id: get_user?.id
            }
        })
        if (delatt) {
            context.send(`–í–∞—Å —É–¥–∞–ª–∏–ª–∏ ${get_user.name}. –í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –Ω–∞–º —Å–Ω–æ–≤–∞!`)
            console.log(`Deleted ${get_user.name}`)
        }
        prisma.$disconnect()
    })
    hearManager.hear(/–∫–∞—Ä—Ç–∞/, async (context) => {
        const get_user:any = await prisma.user.findFirst({
            where: {
                idvk: context.senderId
            }
        })
        context.send(`
            –í—ã –¥–æ—Å—Ç–∞–ª–∏ —Å–≤–æ—é –∫–∞—Ä—Ç–æ—á–∫—É, ${get_user.class} ${get_user.name}, ${get_user.spec}:
            üí≥UID: ${get_user.id}
            ü™ô–ì–∞–ª–ª–µ–æ–Ω—ã: ${get_user.gold}
            üßô–ú–∞–≥–∏—á–µ—Å–∫–∏–π –æ–ø—ã—Ç: ${get_user.xp}
            üìà–£—Ä–æ–≤–µ–Ω—å: ${get_user.lvl}

        `)
        prisma.$disconnect()
    })
    hearManager.hear(/–º–∞–≥–∞–∑–∏–Ω/, async (context) => {
        const get_user:any = await prisma.user.findFirst({
            where: {
                idvk: context.senderId
            }
        })
        context.send(`
            –ó–∞–π–¥—è –≤ –ø–µ—Ä–µ—É–ª–æ–∫ –∏ –≤–∑–≥–ª—è–Ω—É–≤ –Ω–∞ –ø—Ä–∏–ª–∞–≤–æ–∫, –≤—ã –≤—Å–ø–æ–º–Ω–∏–ª–∏ —á—Ç–æ –Ω–∞ –≤–∞—à–µ–º —Å—á–µ—Ç—É ü™ô${get_user.gold} –≥–∞–ª–ª–µ–æ–Ω–æ–≤
        `)
        prisma.$disconnect()
    })
    hearManager.hear(/–æ–ø–µ—Ä–∞—Ü–∏–∏/, async (context) => {
        let name_check = false
		let datas: any = []
		while (name_check == false) {
			const uid = await context.question(`
                –í–≤–µ–¥–∏—Ç–µ üí≥UID –±–∞–Ω–∫–æ–≤—Å–∫–æ–≥–æ —Å—á–µ—Ç–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª—è:
			`)
			if (uid.text) {
                const get_user = await prisma.user.findFirst({
                    where: {
                        id: Number(uid.text)
                    }
                })
                console.log(uid.text)
                console.log(get_user)
                if (get_user) {
                    name_check = true
				    datas.push({id: `${uid.text}`})
                    context.send(`
                        üè¶–û—Ç–∫—Ä—ã—Ç–∞ —Å–ª–µ–¥—É—é—â–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞: ${get_user.class} ${get_user.name}, ${get_user.spec}:
                        
                        üí≥UID: ${get_user.id}
                        ü™ô–ì–∞–ª–ª–µ–æ–Ω—ã: ${get_user.gold}
                        üßô–ú–∞–≥–∏—á–µ—Å–∫–∏–π –æ–ø—ã—Ç: ${get_user.xp}
                        üìà–£—Ä–æ–≤–µ–Ω—å: ${get_user.lvl}
                    `)
                }
			} else {
				context.send(`–ù–µ—Ç —Ç–∞–∫–æ–≥–æ –±–∞–Ω–∫–æ–≤—Å–∫–æ–≥–æ —Å—á–µ—Ç–∞!`)
			}
		}

        const ans: any = await context.question(`
                –î–æ—Å—Ç—É–ø–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å üí≥UID: ${datas[0].id}
            `,
            {
            keyboard: Keyboard.builder()
            .textButton({
                label: '+ü™ô',
                payload: {
                    command: 'gold_up'
                },
                color: 'secondary'
            })
            .textButton({
                label: '-ü™ô',
                payload: {
                    command: 'gold_down'
                },
                color: 'secondary'
            })
            .row()
            .textButton({
                label: '+üßô',
                payload: {
                    command: 'xp_up'
                },
                color: 'secondary'
            })
            .textButton({
                label: '-üßô',
                payload: {
                    command: 'xp_down'
                },
                color: 'secondary'
            })
            .row()
            .textButton({
                label: 'üîô',
                payload: {
                    command: 'back'
                },
                color: 'secondary'
            })
            .oneTime().inline()
            }
        )
        async function Gold_Up(id: number, count: number) {
            const user_get: any = await prisma.user.findFirst({
                where: {
                    id
                }
            })
            const money_put = await prisma.user.update({
                where: {
                    id: user_get.id
                },
                data: {
                    gold: user_get.gold + count
                }
            })
            await vk.api.messages.send({
                user_id: user_get.idvk,
                random_id: 0,
                message: `üè¶–í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ ${count}ü™ô–≥–∞–ª–ª–µ–æ–Ω–æ–≤. \n–í–∞—à —Å—á—ë—Ç: ${money_put.gold}ü™ô`
            })
            context.send(`üè¶–û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ`)
            console.log(`User ${user_get.idvk} got ${count} gold. Him/Her bank now ${money_put.gold}`)
        }
        async function Gold_Down(id: number, count: number) {
            const user_get: any = await prisma.user.findFirst({
                where: {
                    id
                }
            })
            if (user_get.gold-count >= 0) {
                const money_put = await prisma.user.update({
                    where: {
                        id: user_get.id
                    },
                    data: {
                        gold: user_get.gold - count
                    }
                })
                await vk.api.messages.send({
                    user_id: user_get.idvk,
                    random_id: 0,
                    message: `üè¶–° –≤–∞—Å —Å–Ω—è—Ç–Ω–æ ${count}ü™ô–≥–∞–ª–ª–µ–æ–Ω–æ–≤. \n–í–∞—à —Å—á—ë—Ç: ${money_put.gold}ü™ô`
                })
                context.send(`üè¶–û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ`)
                console.log(`User ${user_get.idvk} lost ${count} gold. Him/Her bank now ${money_put.gold}`)
            } else {
                context.send(`–í—ã —Ö–æ—Ç–∏—Ç–µ —Å–Ω—è—Ç—å ${count} ü™ô–≥–∞–ª–ª–µ–æ–Ω–æ–≤ c —Å—á–µ—Ç–∞ ${user_get.name}, –Ω–æ —Å—á–µ—Ç —ç—Ç–æ–≥–æ ${user_get.spec} ${user_get.gold}. –£–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –±–∞–ª–∞–Ω—Å: ${user_get.gold-count}`)
            }
        }
        async function Xp_Up(id: number, count: number) {
            const user_get: any = await prisma.user.findFirst({
                where: {
                    id
                }
            })
            const money_put = await prisma.user.update({
                where: {
                    id: user_get.id
                },
                data: {
                    xp: user_get.xp + count
                }
            })
            await vk.api.messages.send({
                user_id: user_get.idvk,
                random_id: 0,
                message: `üè¶–í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ ${count}üßô–º–∞–≥–∏—á–µ—Å–∫–æ–≥–æ –æ–ø—ã—Ç–∞. \n–í–∞—à –ú–û: ${money_put.xp}üßô`
            })
            context.send(`üè¶–û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ`)
            console.log(`User ${user_get.idvk} got ${count} MO. Him/Her XP now ${money_put.xp}`)
        }
        async function Xp_Down(id: number, count: number) {
            const user_get: any = await prisma.user.findFirst({
                where: {
                    id
                }
            })
            if (user_get.xp-count >= 0) {
                const money_put = await prisma.user.update({
                    where: {
                        id: user_get.id
                    },
                    data: {
                        xp: user_get.xp - count
                    }
                })
                await vk.api.messages.send({
                    user_id: user_get.idvk,
                    random_id: 0,
                    message: `üè¶–° –≤–∞—Å —Å–Ω—è—Ç–Ω–æ ${count}üßô–º–∞–≥–∏—á–µ—Å–∫–æ–≥–æ –æ–ø—ã—Ç–∞. \n–í–∞—à –ú–û: ${money_put.xp}üßô`
                })
                context.send(`üè¶–û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ`)
                console.log(`User ${user_get.idvk} lost ${count} MO. Him/Her XP now ${money_put.xp}`)
            } else {
                context.send(`–í—ã —Ö–æ—Ç–∏—Ç–µ —Å–Ω—è—Ç—å ${count} ü™ô–≥–∞–ª–ª–µ–æ–Ω–æ–≤ c —Å—á–µ—Ç–∞ ${user_get.name}, –Ω–æ —Å—á–µ—Ç —ç—Ç–æ–≥–æ ${user_get.spec} ${user_get.xp}. –£–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –±–∞–ª–∞–Ω—Å: ${user_get.xp-count}`)
            }
        }
        async function Back(id: number, count: number) {
            context.send(`–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.`)
        }
        if (ans.payload && ans.payload.command != 'back') {
            let money_check = false
            while (money_check == false) {
                const gold = await context.question(`
                    –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–∏ ${ans.text}:
                `)
                if (gold.text) {
                    const config = {
                        'gold_up': Gold_Up,
                        'gold_down': Gold_Down,
                        'xp_up': Xp_Up,
                        'xp_down': Xp_Down,
                        'back': Back
                    }
                    const answergot = await config[ans.payload.command](Number(datas[0].id), Number(gold.text))
                    money_check = true
                    
                } else {
                    context.send(`–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å–∏–µ!`)
                }
            }
        } else {
            context.send(`–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.`)
        }
        
        
        prisma.$disconnect()
    })
}