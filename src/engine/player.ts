import { PrismaClient } from "@prisma/client";
import { HearManager } from "@vk-io/hear";
import { randomInt } from "crypto";
import { send } from "process";
import { Attachment, Context, Keyboard, KeyboardBuilder, PhotoAttachment } from "vk-io";
import { IQuestionMessageContext } from "vk-io-question";
import * as xlsx from 'xlsx';
import * as fs from 'fs';
import { chat_id, prisma, root, vk } from '../index';
import { Accessed, Gen_Inline_Button_Category, Gen_Inline_Button_Item, Keyboard_Index } from "./core/helper";

export function registerUserRoutes(hearManager: HearManager<IQuestionMessageContext>): void {
    hearManager.hear(/–∫–∞—Ä—Ç–∞/, async (context) => {
        if (context.peerType == 'chat') { return }
        const get_user:any = await prisma.user.findFirst({ where: { idvk: context.senderId } })
        const artefact_counter = await prisma.artefact.count({ where: { id_user: get_user.id } })
        context.send(`‚úâ –í—ã –¥–æ—Å—Ç–∞–ª–∏ —Å–≤–æ—é –∫–∞—Ä—Ç–æ—á–∫—É, ${get_user.class} ${get_user.name}, ${get_user.spec}:\n üí≥UID: ${get_user.id} \n üí∞–ì–∞–ª–ª–µ–æ–Ω—ã: ${get_user.gold} \n üßô–ú–∞–≥–∏—á–µ—Å–∫–∏–π –æ–ø—ã—Ç: ${get_user.xp} \n üìà–£—Ä–æ–≤–µ–Ω—å: ${get_user.lvl} \n üîÆ–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤: ${artefact_counter} `)
        console.log(`User ${get_user.idvk} see card`)
        const user_list: any = await prisma.user.findMany({})
        const rana = randomInt(0, user_list.length)
        let ii = `üîî –ê –≤—ã –∑–Ω–∞–ª–∏, —á—Ç–æ @id${user_list[rana].idvk}(${user_list[rana].name}) `
        if (randomInt(0,2) == 0) {
            if (get_user.gold > user_list[rana].gold) { ii += `–±–µ–¥–Ω–µ–µ –≤–∞—Å –≤ ${(get_user.gold/user_list[rana].gold).toFixed(2)} —Ä–∞–∑?` }
            else if (get_user.gold < user_list[rana].gold) { ii += `–±–æ–≥–∞—á–µ –≤–∞—Å –≤ ${(user_list[rana].gold/get_user.gold).toFixed(2)} —Ä–∞–∑?` }
            else { ii = 'üí° –í—ã –≤–∑–≥–ª—è–Ω—É—é –Ω–∞ —Å–≤–æ—é –±–∞–Ω–∫–æ–≤—Å–∫—É—é –∫–∞—Ä—Ç—É, —á—Ç–æ –¥–∞–ª—å—à–µ?' }
        } else {
            if (get_user.lvl > user_list[rana].lvl) { ii += `–æ—Ç—Å—Ç–∞–µ—Ç –Ω–∞ ${get_user.lvl -user_list[rana].lvl} —É—Ä–æ–≤–Ω–µ–π –æ—Ç –≤–∞—Å?` }
            else if (get_user.lvl < user_list[rana].lvl) { ii += `–∏–º–µ–µ—Ç –Ω–∞ ${user_list[rana].lvl - get_user.lvl} —É—Ä–æ–≤–Ω–µ–π –±–æ–ª—å—à–µ, —á–µ–º –≤—ã?` }
            else { ii = 'üí° –í–∞—à–µ –æ—Ç—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–æ–º–µ–ª—å–∫–Ω—É–ª–æ –Ω–µ–≤–∑–Ω–∞—á–∞–π, —á—Ç–æ –¥–∞–ª—å—à–µ?' }
        }
        await Keyboard_Index(context, `${ii}`)
    })
    hearManager.hear(/–∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã/, async (context) => {
        const get_user: any = await prisma.user.findFirst({ where: { idvk: context.senderId } })
        await context.sendPhotos({ value: './src/art/artefact.jpg' });
        context.send(`‚úâ –í–∞—à–∏ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã, ${get_user.class} ${get_user.name}, ${get_user.spec}: `)
        const artefact = await prisma.artefact.findMany({ where: { id_user: get_user.id } })
        if (artefact.length > 0) {
            let artefact_list: String = ''
            for (const i in artefact) { artefact_list += `üí¨: ${artefact[i].name} \n üîß: ${artefact[i].type}${artefact[i].label} \n üß∑:  ${artefact[i].description}` }
            context.send(`${artefact_list}`)
        } else { context.send(`‚úâ –£ –í–∞—Å –µ—â–µ –Ω–µ—Ç –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤ =(`) }
        console.log(`User ${get_user.idvk} see artefacts`)
        const artefact_list: any = await prisma.artefact.findMany({include: { user: true }})
        if (artefact_list.length > 0) {
            const seler = randomInt(0, artefact_list.length)
            let ii = `üîî –ê –≤—ã –∑–Ω–∞–ª–∏, —á—Ç–æ @id${artefact_list[seler].user.idvk}(${artefact_list[seler].user.name}) `
            let trig = false
            for (const i in artefact) { 
                if (artefact[i].description == artefact_list[seler].description) { 
                    ii += `–≤—Å–µ—Ä–∞–≤–Ω–æ –Ω–µ –ø–æ–±–µ–¥–∏—Ç –≤–∞—Å —Å–≤–æ–∏–º üîÆ${artefact_list[seler].name}!`
                    trig = true
                    break
                } 
            }
            if (!trig) {
                ii += `—É–∂–µ –∏–º–µ–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏ üîÆ${artefact_list[seler].name}!`
            }
            await Keyboard_Index(context, `${ii}`)
        } else { await Keyboard_Index(context, `üí° –ú–æ–∂–µ—Ç –±—ã—Ç—å –≤–∞–º —Å–∫–æ—Ä–æ —Ç–æ–∂–µ –¥–∞–¥—É—Ç –∞—Ä—Ç–µ—Ñ–∞–∫—Ç?`)}
    })
    hearManager.hear(/–ö–æ—Å–æ–π –ø–µ—Ä–µ—É–ª–æ–∫/, async (context) => {
        if (context.senderId == root) {
            console.log(`Admin ${context.senderId} enter in shopping`)
            const category:any = await prisma.category.findMany({})
            if (category.length == 0) {
                const ans: any = await context.question(
                    `‚úâ –ú–∞–≥–∞–∑–∏–Ω–æ–≤ –µ—â–µ –Ω–µ—Ç`,
                    {   keyboard: Keyboard.builder()
                        .textButton({   label: '–î–æ–±–∞–≤–∏—Ç—å –º–∞–≥–∞–∑–∏–Ω',
                                        payload: {  command: 'new_shop' },
                                        color: 'secondary'                  })
                        .oneTime().inline()                                     }
                )
                if (ans.payload.command == 'new_shop') {
                    const shop: any = await context.question(`üß∑ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞:`)
                    const shop_create = await prisma.category.create({  data: { name: shop.text }   })
                    console.log(`User ${context.senderId} open new shop`)
                    context.send(`‚öô –í—ã –æ—Ç–∫—Ä—ã–ª–∏ —Å–ª–µ–¥—É—é—â–∏–π –º–∞–≥–∞–∑–∏–Ω ${shop_create.name}`)
                }
            } else {
                let keyboard = Keyboard.builder()
                category.forEach(async (element: any) => {
                    keyboard.textButton({   label: element.name,
                                            payload: { command: `${element.id}` }   })
                    .textButton({   label: "–£–¥–∞–ª–∏—Ç—å",
                                    payload: { command: `${element.id}` }   }).row()
                })
                const ans: any = await context.question(`‚úâ –ö—É–¥–∞ –ø–æ–π–¥–µ–º?`,
                    {   keyboard: keyboard
                        .textButton({   label: '–î–æ–±–∞–≤–∏—Ç—å –º–∞–≥–∞–∑–∏–Ω',
                                        payload: { command: 'new_shop' },
                                        color: 'secondary'                  })
                        .oneTime().inline()                                     })
                if (ans.text == "–£–¥–∞–ª–∏—Ç—å") {
                    const shop_delete = await prisma.category.delete({ where: { id: Number(ans.payload.command) } })
                    console.log(`User ${context.senderId} close shop`)
                    context.send(`‚öô –£–¥–∞–ª–µ–Ω –º–∞–≥–∞–∑–∏–Ω ${shop_delete.name}`)
                }
                if (ans.payload?.command == 'new_shop') {
                    const shop: any = await context.question( `üß∑ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞:` )
                    const shop_create: any = await prisma.category.create({ data: { name: shop.text } })
                    console.log(`User ${context.senderId} open new shop`)
                    context.send(`‚öô –í—ã –æ—Ç–∫—Ä—ã–ª–∏ —Å–ª–µ–¥—É—é—â–∏–π –º–∞–≥–∞–∑–∏–Ω ${shop_create.name}`)
                }
                if (category.find((i: any) => i.name == ans.text)) {
                    context.send(`‚åõ –í—ã –æ–∫–∞–∑–∞–ª–∏—Å—å –≤ ${ans.text}`)
                    const item: any= await prisma.item.findMany({ where: { id_category: Number(ans.payload.command) } })
                    if (item.length == 0) {
                        context.send(`‚úâ –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –ø—Ä–∏–∞–ª–≤–∫–∏ –ø–æ–∫–∞ —á—Ç–æ –ø—É—Å—Ç—ã=/`)
                    } else {
                        item.forEach(async (element: any) => {
                            const buer: any= context.send(`üõç ${element.name} ${element.price}üí∞`,
                                {   keyboard: Keyboard.builder()
                                    .textButton({   label: '–ö—É–ø–∏—Ç—å',
                                                    payload: { command: `${element.name}` },
                                                    color: 'secondary'                        })
                                    .textButton({   label: '‚úè–ò–º—è',
                                                    payload: { command: `${element.name}` },
                                                    color: 'secondary'                        })
                                    .textButton({   label: '‚úè–¢–∏–ø',
                                                    payload: { command: `${element.name}` },
                                                    color: 'secondary'                        })
                                    .oneTime().inline()                                             })  })
                    }
                    const ans_item: any = await context.question( `‚úâ –ß—Ç–æ –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å?`,
                        {   keyboard: Keyboard.builder()
                            .textButton({   label: '–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä',
                                            payload: { command: 'new_item' },
                                            color: 'secondary'                  })
                            .textButton({   label: '–ü–µ—Ä–µ–π—Ç–∏ –∫ –ø–æ–∫—É–ø–∫–∞–º',
                                            payload: { command: 'continue' },
                                            color: 'secondary'                  })
                            .oneTime().inline()                                     }
                    )
                    if (ans_item.payload?.command == 'new_item') {
                        const item_name: any = await context.question( `üß∑ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞:` )
                        const item_price = await context.question( `üß∑ –í–≤–µ–¥–∏—Ç–µ –µ–≥–æ —Ü–µ–Ω–Ω–æ—Å—Ç—å:` )
                        const item_type: any = await context.question( `üß∑ –£–∫–∞–∂–∏—Ç–µ —Ç–∏–ø —Ç–æ–≤–∞—Ä–∞: \n üïê ‚Äî –ø–æ–∫—É–ø–∞–µ—Ç—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –æ–¥–Ω–∞–∂–¥—ã; \n ‚ôæ ‚Äî –ø–æ–∫—É–ø–∞–µ—Ç—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–∑.`,
                            {   keyboard: Keyboard.builder()
                                .textButton({   label: 'üïê',
                                                payload: { command: 'limited' },
                                                color: 'secondary'                  })
                                .textButton({   label: '‚ôæ',
                                                payload: { command: 'unlimited' },
                                                color: 'secondary'                  })
                                .oneTime().inline()                                     }
                        )
                        const item_create = await prisma.item.create({ data: {  name: item_name.text, price: Number(item_price.text),
                                                                                id_category: Number(ans.payload.command), type: item_type.payload.command } })
                        console.log(`User ${context.senderId} added new item ${item_create.id}`)
                        context.send(`‚öô –î–ª—è –º–∞–≥–∞–∑–∏–Ω–∞ ${ans.text} –¥–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä ${item_name.text} —Å—Ç–æ–∏–º–æ—Å—Ç—å—é ${item_price.text} –≥–∞–ª–ª–µ–æ–Ω–æ–≤`)
                    }
                    if (ans_item.payload.command == 'continue') { context.send(`üí° –ù–∞–∂–∏–º–∞–π—Ç–µ –∫–Ω–æ–ø–∫—É –∫—É–ø–∏—Ç—å —É –∂–µ–ª–∞–µ–º–æ–≥–æ —Ç–æ–≤–∞—Ä–∞`) }
                }
            }
        } else {
            console.log(`User ${context.senderId} enter in shopping`)
            const categorys:any = await prisma.category.findMany({})
            if (categorys.length == 0) {
                const ans: any = await context.send(`‚úâ –ú–∞–≥–∞–∑–∏–Ω–æ–≤ –µ—â–µ –Ω–µ—Ç`)
                return
            } 
            let cat_stop = false
            while (cat_stop == false) {
                const category = await prisma.category.findMany({})
                const skill = await  Gen_Inline_Button_Category(context, category, '–ö—É–¥–∞ –ø–æ–π–¥–µ–º?')
                if (!skill) {cat_stop = true} else {
                    const skill_sel = await Gen_Inline_Button_Item(skill, context)
                    if (skill_sel) {cat_stop = true}
                }
            }
        }
        await Keyboard_Index(context, `üí° –ê –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –∫–æ—Å–æ–º –ø–µ—Ä–µ—É–ª–∫–µ –µ—Å—Ç—å –ø–æ–¥–ø–æ–ª—å–µ?`)
    })
    hearManager.hear(/‚úè–¢–∏–ø/, async (context) => {
        if (context.messagePayload == null && context.senderId != root) {
            console.log((`stop`))
            return
        }
        const item_buy:any = await prisma.item.findFirst({
            where: {
                name: context.messagePayload.command,
            }
        })
        if (item_buy) {
            const item_type: any = await context.question(`
                    üß∑ –£–∫–∞–∂–∏—Ç–µ —Ç–∏–ø —Ç–æ–≤–∞—Ä–∞ –¥–ª—è ${item_buy.name}:
                    üïê ‚Äî –ø–æ–∫—É–ø–∞–µ—Ç—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –æ–¥–Ω–∞–∂–¥—ã;
                    ‚ôæ ‚Äî –ø–æ–∫—É–ø–∞–µ—Ç—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–∑.
                    –¢–µ–∫—É—â–∏–π —Ç–∏–ø: ${item_buy.type}
                `,
                {
                    keyboard: Keyboard.builder()
                    .textButton({
                        label: 'üïê',
                        payload: {
                            command: 'limited'
                        },
                        color: 'secondary'
                    })
                    .textButton({
                        label: '‚ôæ',
                        payload: {
                                command: 'unlimited'
                            },
                        color: 'secondary'
                    })
                    .oneTime().inline()
                }
            )
            const item_update = await prisma.item.update({
                where: {
                    id: item_buy.id
                },
                data: {
                    type: item_type.payload.command
                }
            })
            console.log(`Admin ${context.senderId} edit type item ${item_buy.id}`)
            context.send(`‚öô –¢–∏–ø –ø—Ä–µ–¥–º–µ—Ç–∞ ${item_buy.name} –∏–∑–º–µ–Ω–µ–Ω —Å ${item_buy.type} –Ω–∞ ${item_update.type}`)
        } else {
            console.log(`Admin ${context.senderId} can't edit type item ${item_buy.id}`)
            context.send(`‚úâ –¢–∏–ø –ø—Ä–µ–¥–º–µ—Ç–∞ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–º–µ–Ω—è—Ç—å`)
        }
        await Keyboard_Index(context, `üí° –í–æ—Ç –±—ã –≤—Å–µ–≥–¥–∞ –±–µ–∑–ª–∏–º–∏—Ç, –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –±—ã –Ω–∏—á–µ–≥–æ –Ω–µ –ø—Ä–∏—à–ª–æ—Å—å?`)
    })
    hearManager.hear(/‚úè–ò–º—è/, async (context) => {
        if (context.messagePayload == null && context.senderId != root) {
            console.log((`stop`))
            return
        }
        const item_buy:any = await prisma.item.findFirst({
            where: {
                name: context.messagePayload.command,
            }
        })
        if (item_buy) {
            const name: any = await context.question(`üß∑ –ü—Ä–µ–¥–º–µ—Ç: ${item_buy.name}.\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è –¥–ª—è —Ç–æ–≤–∞—Ä–∞:`)
            const item_update = await prisma.item.update({
                where: {
                    id: item_buy.id
                },
                data: {
                    name: name.text
                }
            })
            console.log(`Admin ${context.senderId} edit name item ${item_buy.id}`)
            context.send(`‚öô –ò–º—è –ø—Ä–µ–¥–º–µ—Ç–∞ ${item_buy.name} –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ ${item_update.name}`)
        } else {
            console.log(`Admin ${context.senderId} can't edit name item ${item_buy.id}`)
            context.send(`‚úâ –ò–º—è –ø—Ä–µ–¥–º–µ—Ç–∞ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–º–µ–Ω—è—Ç—å`)
        }
        await Keyboard_Index(context, `üí° –ú–æ–∂–µ—Ç –µ—â–µ —á—Ç–æ-–Ω–∏–±—É–¥—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å?`)
    })
    hearManager.hear(/–æ–ø–µ—Ä–∞—Ü–∏–∏/, async (context) => {
        if (await Accessed(context) != 2) {
            return
        }
        let name_check = false
		let datas: any = []
		while (name_check == false) {
			const uid = await context.question(`
                üß∑ –í–≤–µ–¥–∏—Ç–µ üí≥UID –±–∞–Ω–∫–æ–≤—Å–∫–æ–≥–æ —Å—á–µ—Ç–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª—è:
			`)
			if (uid.text) {
                const get_user = await prisma.user.findFirst({
                    where: {
                        id: Number(uid.text)
                    }
                })
                if (get_user) {
                    console.log(`Admin ${context.senderId} opened ${get_user.idvk} card UID: ${get_user.id}`)
                    name_check = true
				    datas.push({id: `${uid.text}`})
                    const artefact_counter = await prisma.artefact.count({
                        where: {
                            id_user: Number(uid.text)
                        }
                    })
                    context.send(`
                        üè¶–û—Ç–∫—Ä—ã—Ç–∞ —Å–ª–µ–¥—É—é—â–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞: ${get_user.class} ${get_user.name}, ${get_user.spec}:
                        https://vk.com/id${get_user.idvk}
                        üí≥UID: ${get_user.id}
                        üí∞–ì–∞–ª–ª–µ–æ–Ω—ã: ${get_user.gold}
                        üßô–ú–∞–≥–∏—á–µ—Å–∫–∏–π –æ–ø—ã—Ç: ${get_user.xp}
                        üìà–£—Ä–æ–≤–µ–Ω—å: ${get_user.lvl}
                        üîÆ–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤: ${artefact_counter}
                    `)
                    const inventory = await prisma.inventory.findMany({
                        where: {
                            id_user: get_user?.id
                        }
                    })
                    let cart = ''
                    const underwear = await prisma.trigger.count({
                        where: {    id_user: get_user.id,
                                    name:   'underwear',
                                    value:  false         }
                    })
                    if (underwear) {
                        cart = 'üëú –¢—Ä—É—Å—ã –î–æ–º–∞—à–Ω–∏–µ;'
                    }
                    if (inventory.length == 0) {
                        context.send(`‚úâ –ü–æ–∫—É–ø–∫–∏ –ø–æ–∫–∞ –Ω–µ —Å–æ–≤–µ—Ä—à–∞–ª–∏—Å—å`)
                    } else {
                        for (let i = 0; i < inventory.length; i++) {
                            const element = inventory[i].id_item;
                            const item = await prisma.item.findFirst({
                                where: {
                                    id: element
                                }
                            })
                            cart += `${item?.name};`
                        }
                        const destructor = cart.split(';').filter(i => i)
                        let compile = []
                        for (let i = 0; i < destructor.length; i++) {
                            let counter = 0
                            for (let j = 0; j < destructor.length; j++) {
                                if (destructor[i] != null) {
                                    if (destructor[i] == destructor[j]) {
                                        counter++
                                    }
                                }
                            }
                            compile.push(`${destructor[i]} x ${counter}\n`)
                            counter = 0
                        }
                        let final: any = Array.from(new Set(compile));
                        context.send(`‚úâ –ë—ã–ª–∏ —Å–æ–≤–µ—Ä—à–µ–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ –ø–æ–∫—É–ø–∫–∏:: \n ${final.toString().replace(/,/g, '')}`)
                    }
                }
			} else {
				context.send(`üí° –ù–µ—Ç —Ç–∞–∫–æ–≥–æ –±–∞–Ω–∫–æ–≤—Å–∫–æ–≥–æ —Å—á–µ—Ç–∞!`)
			}
		}

        const ans: any = await context.question( `‚úâ –î–æ—Å—Ç—É–ø–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å üí≥UID: ${datas[0].id}`,
            {
            keyboard: Keyboard.builder()
            .textButton({
                label: '+üí∞',
                payload: {
                    command: 'gold_up'
                },
                color: 'secondary'
            })
            .textButton({
                label: '‚Äîüí∞',
                payload: {
                    command: 'gold_down'
                },
                color: 'secondary'
            }).row()
            .textButton({
                label: '+üßô',
                payload: {
                    command: 'xp_up'
                },
                color: 'secondary'
            })
            .textButton({
                label: '‚Äîüßô',
                payload: {
                    command: 'xp_down'
                },
                color: 'secondary'
            }).row()
            .textButton({
                label: '‚ûïüîÆ',
                payload: {
                    command: 'artefact_add'
                },
                color: 'secondary'
            })
            .textButton({
                label: 'üëÅüîÆ',
                payload: {
                    command: 'artefact_show'
                },
                color: 'secondary'
            }).row()
            .textButton({
                label: '‚úè',
                payload: {
                    command: 'editor'
                },
                color: 'secondary'
            })
            .textButton({
                label: 'üîô',
                payload: {
                    command: 'back'
                },
                color: 'secondary'
            })
            .textButton({
                label: '‚ò†',
                payload: {
                    command: 'user_delete'
                },
                color: 'secondary'
            })
            .oneTime().inline()
            }
        )
        async function Gold_Up(id: number) {
            const count: number = await Ipnut_Gold() 
            const messa: string = await Ipnut_Message()
            const user_get: any = await prisma.user.findFirst({
                where: {
                    id
                }
            })
            const money_put = await prisma.user.update({
                where: {
                    id: user_get.id
                },
                data: {
                    gold: user_get.gold + count
                }
            })
            await vk.api.messages.send({
                user_id: user_get.idvk,
                random_id: 0,
                message: `‚öô –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ ${count}üí∞. \n–í–∞—à —Å—á—ë—Ç: ${money_put.gold}üí∞ \n –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: ${messa}`
            })
            context.send(`‚öô –û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ`)
            console.log(`User ${user_get.idvk} got ${count} gold. Him/Her bank now ${money_put.gold}`)
        }
        async function Gold_Down(id: number) {
            const count: number = await Ipnut_Gold() 
            const messa: string = await Ipnut_Message()
            const user_get: any = await prisma.user.findFirst({
                where: {
                    id
                }
            })
            if (user_get.gold-count >= 0) {
                const money_put = await prisma.user.update({
                    where: {
                        id: user_get.id
                    },
                    data: {
                        gold: user_get.gold - count
                    }
                })
                await vk.api.messages.send({
                    user_id: user_get.idvk,
                    random_id: 0,
                    message: `‚öô –° –≤–∞—Å —Å–Ω—è—Ç–æ ${count}üí∞. \n–í–∞—à —Å—á—ë—Ç: ${money_put.gold}üí∞ \n –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: ${messa}`
                })
                context.send(`‚öô –û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ`)
                console.log(`User ${user_get.idvk} lost ${count} gold. Him/Her bank now ${money_put.gold}`)
            } else {
                const confirmq = await context.question(`‚åõ –í—ã —Ö–æ—Ç–∏—Ç–µ —Å–Ω—è—Ç—å ${count} üí∞–≥–∞–ª–ª–µ–æ–Ω–æ–≤ c —Å—á–µ—Ç–∞ ${user_get.name}, –Ω–æ —Å—á–µ—Ç —ç—Ç–æ–≥–æ ${user_get.spec} ${user_get.gold}. –£–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –±–∞–ª–∞–Ω—Å: ${user_get.gold-count}`,
                {
                    keyboard: Keyboard.builder()
                    .textButton({
                        label: '–î–∞',
                        payload: {
                            command: 'confirm'
                        },
                        color: 'secondary'
                    })
                    .textButton({
                        label: '–ù–µ—Ç',
                        payload: {
                            command: 'gold_down'
                        },
                        color: 'secondary'
                    })
                    .oneTime().inline()
                    }
                )
                if (confirmq.payload.command === 'confirm') {
                    const money_put = await prisma.user.update({
                        where: {
                            id: user_get.id
                        },
                        data: {
                            gold: user_get.gold - count
                        }
                    })
                    await vk.api.messages.send({
                        user_id: user_get.idvk,
                        random_id: 0,
                        message: `‚öô –° –≤–∞—Å —Å–Ω—è—Ç–æ ${count}üí∞. \n–í–∞—à —Å—á—ë—Ç: ${money_put.gold}üí∞ \n –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: ${messa}`
                    })
                    context.send(`‚öô –û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ`)
                    console.log(`User ${user_get.idvk} lost ${count} gold. Him/Her bank now ${money_put.gold}`)
                } else {
                    context.send(`üí° –ù—É–∂–Ω–æ –±—ã—Ç—å –∂–µ—Å—Ç—á–µ! –ì—Ä–µ–±–∏ –±–∞–±–ª–æ`)
                }
            }
        }
        async function Xp_Up(id: number) {
            const count: number = await Ipnut_Gold() 
            const messa: string = await Ipnut_Message()
            const user_get: any = await prisma.user.findFirst({
                where: {
                    id
                }
            })
            const money_put = await prisma.user.update({
                where: {
                    id: user_get.id
                },
                data: {
                    xp: user_get.xp + count
                }
            })
            await vk.api.messages.send({
                user_id: user_get.idvk,
                random_id: 0,
                message: `‚öô –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ ${count}üßô. \n–í–∞—à –ú–û: ${money_put.xp}üßô \n –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: ${messa}`
            })
            context.send(`‚öô –û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ`)
            console.log(`User ${user_get.idvk} got ${count} MO. Him/Her XP now ${money_put.xp}`)
        }
        async function Xp_Down(id: number) {
            const count: number = await Ipnut_Gold() 
            const messa: string = await Ipnut_Message()
            const user_get: any = await prisma.user.findFirst({
                where: {
                    id
                }
            })
            if (user_get.xp-count >= 0) {
                const money_put = await prisma.user.update({
                    where: {
                        id: user_get.id
                    },
                    data: {
                        xp: user_get.xp - count
                    }
                })
                await vk.api.messages.send({
                    user_id: user_get.idvk,
                    random_id: 0,
                    message: `‚öô –° –≤–∞—Å —Å–Ω—è—Ç–æ ${count}üßô. \n–í–∞—à –ú–û: ${money_put.xp}üßô  \n –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: ${messa}`
                })
                context.send(`‚öô –û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ`)
                console.log(`User ${user_get.idvk} lost ${count} MO. Him/Her XP now ${money_put.xp}`)
            } else {
                context.send(`‚åõ –í—ã —Ö–æ—Ç–∏—Ç–µ —Å–Ω—è—Ç—å ${count} üßô–º–∞–≥–∏—á–µ—Å–∫–æ–≥–æ –æ–ø—ã—Ç–∞ c —Å—á–µ—Ç–∞ ${user_get.name}, –Ω–æ —Å—á–µ—Ç —ç—Ç–æ–≥–æ ${user_get.spec} ${user_get.xp}. –£–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –±–∞–ª–∞–Ω—Å: ${user_get.xp-count}? (–ê–≤—Ç–æ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ)`)
                const money_put = await prisma.user.update({
                    where: {
                        id: user_get.id
                    },
                    data: {
                        xp: user_get.xp - count
                    }
                })
                await vk.api.messages.send({
                    user_id: user_get.idvk,
                    random_id: 0,
                    message: `‚öô –° –≤–∞—Å —Å–Ω—è—Ç–æ ${count}üßô. \n–í–∞—à –ú–û: ${money_put.xp}üßô  \n –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: ${messa}`
                })
                context.send(`‚öô –û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ`)
                console.log(`User ${user_get.idvk} lost ${count} MO. Him/Her XP now ${money_put.xp}`)
            }
        }
        async function Artefact_Show(id: number) { 
            const artefact = await prisma.artefact.findMany({
                where: {
                    id_user: id
                }
            })
            if (artefact.length > 0) {
                artefact.forEach(async element => {
                    context.send(`
                            üí¨: ${element.name}
                            üîß: ${element.type}${element.label}
                            üß∑:  ${element.description}
                        `,
                        {
                            keyboard: Keyboard.builder()
                            .textButton({
                                label: '–£–¥–∞–ª–∏—Ç—åüîÆ',
                                payload: {
                                    command: `${element.id}`
                                },
                                color: 'secondary'
                            })
                            .oneTime().inline()
                        }
                    )
                });
            } else {
                context.send(`‚úâ –ê—Ä—Ç–µ—Ñ–∞–∫—Ç—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç =(`)
            }
            console.log(`Admin ${context.senderId} see artefacts from user UID: ${id}`)
        }
        hearManager.hear(/–£–¥–∞–ª–∏—Ç—åüîÆ/, async (context) => {
            if (context.messagePayload == null) {
                return
            }
            const art_get: any = await prisma.artefact.findFirst({
                where: {
                    id: Number(context.messagePayload.command)
                }
            })
            if (art_get) {
                const art_del = await prisma.artefact.delete({
                    where: {
                        id: Number(context.messagePayload.command)
                    }
                })
                context.send(`‚öô –£–¥–∞–ª–µ–Ω –∞—Ä—Ç–µ—Ñ–∞–∫—Ç ${art_del.name}`)
                const user_find = await prisma.user.findFirst({
                    where: {
                        id: art_del.id_user
                    }
                })
                if (user_find) {
                    await vk.api.messages.send({
                        user_id: user_find.idvk,
                        random_id: 0,
                        message: `‚öô –í–∞—à –∞—Ä—Ç–µ—Ñ–∞–∫—Ç ${art_del.name} –∏–∑—å—è–ª –û–ú–û–ù!`
                    })
                }
                console.log(`Admin ${context.senderId} destroy artefact from user UID: ${user_find?.idvk}`)
            }
            await Keyboard_Index(context, 'üí° –ë—ã–ª –∞—Ä—Ç–µ—Ñ–∞–∫—Ç, –Ω–µ–µ–µ—Ç –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞!')
        })
        async function Artefact_Add(id: number, count: number) {
            let datas: any = []
            let trigger = false
            while (trigger == false) {
                const name: any = await context.question(`
                    ‚åõ –í–Ω–∏–º–∞–Ω–∏–µ! –∑–∞–ø—É—â–µ–Ω–∞ –ø—Ä–æ—Ü–µ–¥—É—Ä–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ê—Ä—Ç–µ—Ñ–∞–∫—Ç–∞ –¥–ª—è –±–∞–Ω–∫–æ–≤—Å–∫–æ–≥–æ —Å—á—ë—Ç–∞ üí≥:${id}
                    –£–∫–∞–∂–∏—Ç–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ üîÆ–∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞ –Ω–∞–∑–≤–∞–Ω–∏–µ:
                `)
                if (name.text.length <= 30) {
                    trigger = true
                    datas.push({name: `${name.text}`})
                } else {
                    context.send(`üí° –í–≤–≤–µ–¥–∏—Ç–µ –¥–æ 30 —Å–∏–º–≤–æ–ª–æ–≤ –≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ!`)
                }
            }

            trigger = false
            while (trigger == false) {
                const type: any = await context.question(`
                        üß∑ –£–∫–∞–∂–∏—Ç–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ üîÆ–∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞ —Ç–∏–ø –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è:
                        üïê ‚Äî –æ–¥–Ω–æ—Ä–∞–∑–æ–≤–æ–µ; ‚ôæ ‚Äî –º–Ω–æ–≥–æ—Ä–∞–∑–æ–≤–æ–µ.
                    `,
                    {
                        keyboard: Keyboard.builder()
                        .textButton({
                            label: 'üïê',
                            payload: {
                                command: '–û–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–π'
                            },
                            color: 'secondary'
                        })
                        .textButton({
                            label: '‚ôæ',
                            payload: {
                                command: '–ú–Ω–æ–≥–æ—Ä–∞–∑–æ–≤—ã–π'
                            },
                            color: 'secondary'
                        }).oneTime().inline()
                    }
                )
                if (type.payload) {
                    trigger = true
                    datas.push({label: `${type.text}`})
                    datas.push({type: `${type.payload.command}`})
                } else {
                    context.send(`üí° –ú–æ–∂–µ—Ç –ª—É—á—à–µ –ø–æ –∫–Ω–æ–ø–æ—á–∫–∞–º –∂–∞—Ç—å?`)
                }
            }

            trigger = false
            while (trigger == false) {
                const description: any = await context.question(`
                    üß∑ –£–∫–∞–∂–∏—Ç–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ üîÆ–∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞ —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫—É —Å–∞–º–æ–≥–æ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞ –∏–∑ –∞–ª—å–±–æ–º–∞ –≥—Ä—É–ø–ø—ã –•–æ–≥–≤–∞—Ä—Ç—Å –û–Ω–ª–∞–π–Ω:
                `)
                if (description.text.length <= 1000) {
                    trigger = true
                    datas.push({description: `${description.text}`})
                } else {
                    context.send(`üí° –í–≤–≤–µ–¥–∏—Ç–µ –¥–æ 1000 —Å–∏–º–≤–æ–ª–æ–≤ –≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ!`)
                }
            }
            const target: any = await prisma.user.findFirst({
                where: {
                    id
                },
                select: {
                    idvk: true
                }
            })
            const artefact_create = await prisma.artefact.create({
                data: {
                    id_user: id,
                    name: datas[0].name,
                    label: datas[1].label,
                    type: datas[2].type,
                    description: datas[3].description
                }
            })
            await vk.api.messages.send({
                user_id: target.idvk,
                random_id: 0,
                message: `‚öô –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –ø–æ–ª—É—á–∏–ª–∏ –Ω–æ–≤—ã–π üîÆ: ${artefact_create.name}
                    ${artefact_create.label}: ${artefact_create.type}
                `
            })
            console.log(`Admin ${context.senderId} create artefact for user: ${target.idvk}`)
            context.send(`‚öô –û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ`)
        }
        async function Back(id: number, count: number) {
            console.log(`Admin ${context.senderId} canceled operation for user UID: ${id}`)
            context.send(`‚öô –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.`)
        }
        async function Ipnut_Gold() {
            let golden = 0
            let money_check = false
            while (money_check == false) {
                const gold = await context.question(`
                    üß∑ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–∏ ${ans.text}:
                `)
                if (gold.text) {
                    money_check = true
                    golden = Number(gold.text)
                } 
            }
            return golden
        }
        async function Ipnut_Message() {
            let golden = ''
            let money_check = false
            while (money_check == false) {
                const gold = await context.question(`
                    üß∑ –í–≤–µ–¥–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${ans.text}:
                `)
                if (gold.text) {
                    money_check = true
                    golden = gold.text
                } 
            }
            return golden
        }
        async function User_delete(id: number) {
            const user_get: any = await prisma.user.findFirst({
                where: {
                    id: id
                }
            })
            const confirmq = await context.question(`‚Åâ –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞ ${user_get.name}`,
                {
                    keyboard: Keyboard.builder()
                    .textButton({
                        label: '–î–∞',
                        payload: {
                            command: 'confirm'
                        },
                        color: 'secondary'
                    })
                    .textButton({
                        label: '–ù–µ—Ç',
                        payload: {
                            command: 'gold_down'
                        },
                        color: 'secondary'
                    })
                    .oneTime().inline()
                    }
            )
            if (confirmq.payload.command === 'confirm' && user_get) {
                if (user_get) {
                    const user_del = await prisma.user.delete({
                        where: {
                            id: id
                        }
                    })
                    context.send(`‚ùó –£–¥–∞–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user_del.name}`)
                    if (user_del) {
                        await vk.api.messages.send({
                            user_id: user_del.idvk,
                            random_id: 0,
                            message: `‚ùó –í–∞—à–∞ –∫–∞—Ä—Ç–æ—á–∫–∞ üí≥UID: ${user_del.id} –±–æ–ª—å—à–µ –Ω–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞. –°–ø–∞—Å–∏–±–æ, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞–ª–∏—Å—å –±–∞–Ω–∫–æ–º –ì—Ä–∏–Ω–≥–æ—Ç—Ç—Å üè¶, ${user_del.name}. –í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –Ω–∞–º —Å–Ω–æ–≤–∞!`
                        })
                    }
                    console.log(`Admin ${context.senderId} deleted user: ${user_del.idvk}`)
                } 
            } else {
                context.send(`‚öô –£–¥–∞–ª–µ–Ω–∏–µ ${user_get.name} –æ—Ç–º–µ–Ω–µ–Ω–æ.`)
            }
        }

        async function Edit_Class(id: number){
            const user: any = await prisma.user.findFirst({
                where: {
                    id: id
                }
            })
            let answer_check = false
            while (answer_check == false) {
                const answer1: any = await context.question(`
                    üß∑ –£–∫–∞–∂–∏—Ç–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ –≤ –•–æ–≥–≤–∞—Ä—Ç—Å –û–Ω–ª–∞–π–Ω –¥–ª—è ${user.name}, –∏–º–µ—é—â–µ–≥–æ —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: ${user.class}.
                    `,
                    {
                        keyboard: Keyboard.builder()
                        .textButton({
                            label: '–£—á–µ–Ω–∏–∫',
                            payload: {
                                command: 'grif'
                            },
                            color: 'secondary'
                        })
                        .textButton({
                            label: '–ü—Ä–æ—Ñ–µ—Å—Å–æ—Ä',
                            payload: {
                                command: 'coga'
                            },
                            color: 'secondary'
                        })
                        .textButton({
                            label: '–ñ–∏—Ç–µ–ª—å',
                            payload: {
                                command: 'sliz'
                            },
                            color: 'secondary'
                        }).oneTime().inline()
                    }
                )
                if (!answer1.payload) {
                    context.send(`üí° –ñ–º–∏—Ç–µ —Ç–æ–ª—å–∫–æ –ø–æ –∫–Ω–æ–ø–∫–∞–º —Å –∏–∫–æ–Ω–∫–∞–º–∏!`)
                } else {
                    const update_class = await prisma.user.update({
                        where: {
                            id: user.id
                        },
                        data: {
                            class: answer1.text
                        }
                    })
                    if (update_class) {
                        context.send(`‚öô –î–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è üí≥UID –∫–æ—Ç–æ—Ä–æ–≥–æ ${user.id}, –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∞ —Å–º–µ–Ω–∞ –ø–æ–ª–æ–∂–µ–Ω–∏—è —Å ${user.class} –Ω–∞ ${update_class.class}.`)
                        await vk.api.messages.send({
                            user_id: user.idvk,
                            random_id: 0,
                            message: `‚öô –í–∞—à–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ –≤ –•–æ–≥–≤–∞—Ä—Ç—Å –û–Ω–ª–∞–π–Ω –∏–∑–º–µ–Ω–∏–ª–æ—Å—å —Å ${user.class} –Ω–∞ ${update_class.class}.`
                        })
                    }
                    answer_check = true
                }
            }
        }
        async function Edit_Spec(id: number){
            const user: any = await prisma.user.findFirst({
                where: {
                    id: id
                }
            })
            let spec_check = false
		    while (spec_check == false) {
                const spec: any = await context.question(`
                    üß∑ –£–∫–∞–∂–∏—Ç–µ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –≤ –•–æ–≥–≤–∞—Ä—Ç—Å –û–Ω–ª–∞–π–Ω. –î–ª—è ${user.name}.–ï—Å–ª–∏ –æ–Ω/–æ–Ω–∞ –ø—Ä–æ—Ñ–µ—Å—Å–æ—Ä/–∂–∏—Ç–µ–ª—å, –≤–≤–µ–¥–∏—Ç–µ –¥–æ–ª–∂–Ω–æ—Å—Ç—å. –ï—Å–ª–∏ —Å—Ç—É–¥–µ–Ω—Ç(–∫–∞), —É–∫–∞–∂–∏—Ç–µ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç. \n–¢–µ–∫—É—â–∞—è —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: ${user.spec}\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é:
                `)
                if (spec.text.length <= 32) {
                    spec_check = true
                    const update_spec = await prisma.user.update({
                        where: {
                            id: user.id
                        },
                        data: {
                            spec: spec.text
                        }
                    })
                    if (update_spec) {
                        context.send(`‚öô –î–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è üí≥UID –∫–æ—Ç–æ—Ä–æ–≥–æ ${user.id}, –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∞ —Å–º–µ–Ω–∞ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å ${user.spec} –Ω–∞ ${update_spec.spec}.`)
                        await vk.api.messages.send({
                            user_id: user.idvk,
                            random_id: 0,
                            message: `‚öô –í–∞—à–∞ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤ –•–æ–≥–≤–∞—Ä—Ç—Å –û–Ω–ª–∞–π–Ω –∏–∑–º–µ–Ω–∏–ª–∞—Å—å —Å ${user.spec} –Ω–∞ ${update_spec.spec}.`
                        })
                    }
                } else {
                    context.send(`üí° –í–≤–≤–µ–¥–∏—Ç–µ –¥–æ 32 —Å–∏–º–≤–æ–ª–æ–≤ –≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ!`)
                }
            }
        }
        async function Edit_Name(id: number){
            const user: any = await prisma.user.findFirst({
                where: {
                    id: id
                }
            })
            let name_check = false
            while (name_check == false) {
                const name: any = await context.question(`
                    üß∑ –£–∫–∞–∂–∏—Ç–µ –∏–º—è –≤ –•–æ–≥–≤–∞—Ä—Ç—Å –û–Ω–ª–∞–π–Ω. –î–ª—è ${user.name}. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è –¥–æ 64 —Å–∏–º–≤–æ–ª–æ–≤:
                `)
                if (name.text.length <= 64) {
                    name_check = true
                    const update_name = await prisma.user.update({
                        where: {
                            id: user.id
                        },
                        data: {
                            name: name.text
                        }
                    })
                    if (update_name) {
                        context.send(`‚öô –î–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è üí≥UID –∫–æ—Ç–æ—Ä–æ–≥–æ ${user.id}, –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∞ —Å–º–µ–Ω–∞ –∏–º–µ–Ω–∏ —Å ${user.name} –Ω–∞ ${update_name.name}.`)
                        await vk.api.messages.send({
                            user_id: user.idvk,
                            random_id: 0,
                            message: `‚öô –í–∞—à–µ –∏–º—è –≤ –•–æ–≥–≤–∞—Ä—Ç—Å –û–Ω–ª–∞–π–Ω –∏–∑–º–µ–Ω–∏–ª–æ—Å—å —Å ${user.name} –Ω–∞ ${update_name.name}.`
                        })
                    }
                    if (name.text.length > 32) {
                        context.send(`‚ö† –ù–æ–≤—ã–µ –∏–Ω–∏—Ü–∏–∞–ª—ã –Ω–µ –≤–ª–µ–∑–∞—é—Ç –Ω–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –±–ª–∞–Ω–∫ (32 —Å–∏–º–≤–æ–ª–∞)! –ü—Ä–∏–¥–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–ª–∞–Ω–∫ –ø–æ–≤—ã—à–µ–Ω–Ω–æ–π —à–∏—Ä–∏–Ω—ã, —Å –¥–æ–ø–ª–∞—Ç–æ–π 1G –∑–∞ –∫–∞–∂–¥—ã–π –Ω–µ –ø–æ–º–µ—Å—Ç–∏–≤—à–∏–π—Å—è —Å–∏–º–≤–æ–ª.`)
                    }
                } else {
                    context.send(`‚õî –ù–æ–≤–æ–µ –§–ò–û –Ω–µ –≤–ª–µ–∑–∞—é—Ç –Ω–∞ –±–ª–∞–Ω–∫ –ø–æ–≤—ã—à–µ–Ω–Ω–æ–π —à–∏—Ä–∏–Ω—ã (64 —Å–∏–º–≤–æ–ª–∞), –∏ –≤–æ–æ–±—â–µ, –∑–∞–ø—Ä–µ—â–µ–Ω—ã –º–∞–≥–∏—á–µ—Å–∫–∏–º –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–æ–º! –ó–∞—Å—Ç–∞–≤–∏–º –µ–≥–æ/–µ–µ –≤—ã–ø–ª–∞—Ç–∏—Ç—å —à—Ç—Ä–∞—Ñ –≤ 30G –∏–ª–∏ —Å –ø–æ–º–æ—â–∏—é –û–ú–û–ù–ê –ø–µ—Ä–µ–µ—Ö–∞—Ç—å –≤ –ê–∑–∫–∞–±–∞–Ω.`)
                }
            }
        }
        async function Editor(id: number) {
            let answer_check = false
            while (answer_check == false) {
                const answer1: any = await context.question(`
                    ‚åõ –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Ä–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö, –≤—ã–±–µ—Ä–∏—Ç–µ —Å–∏–µ –∑–ª–æ–¥–µ–π—Å—Ç–≤–æ:
                    `,
                    {
                        keyboard: Keyboard.builder()
                        .textButton({
                            label: '‚úè–ü–æ–ª–æ–∂–µ–Ω–∏–µ',
                            payload: {
                                command: 'edit_class'
                            },
                            color: 'secondary'
                        }).row()
                        .textButton({
                            label: '‚úè–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è',
                            payload: {
                                command: 'edit_spec'
                            },
                            color: 'secondary'
                        }).row()
                        .textButton({
                            label: '‚úè–§–ò–û',
                            payload: {
                                command: 'edit_name'
                            },
                            color: 'secondary'
                        }).row()
                        .textButton({
                            label: 'üîô',
                            payload: {
                                command: 'back'
                            },
                            color: 'secondary'
                        }).oneTime().inline()
                    }
                )
                if (!answer1.payload) {
                    context.send(`üí° –ñ–º–∏—Ç–µ —Ç–æ–ª—å–∫–æ –ø–æ –∫–Ω–æ–ø–∫–∞–º —Å –∏–∫–æ–Ω–∫–∞–º–∏!`)
                } else {
                    if (answer1.payload && answer1.payload.command != 'back') {
                        answer_check = true
                        const config: any = {
                            'edit_class': Edit_Class,
                            'edit_spec': Edit_Spec,
                            'edit_name': Edit_Name
                        }
                        await config[answer1.payload.command](id)
                    } else {
                        answer_check = true
                        context.send(`‚öô –û—Ç–º–µ–Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è`)
                    }
                }
            }
        }
        if (ans.payload && ans.payload.command != 'back') {
            const config: any = {
                'gold_up': Gold_Up,
                'gold_down': Gold_Down,
                'xp_up': Xp_Up,
                'xp_down': Xp_Down,
                'back': Back,
                'artefact_add': Artefact_Add,
                'artefact_show': Artefact_Show,
                'user_delete': User_delete,
                'editor': Editor
            }
            const answergot = await config[ans.payload.command](Number(datas[0].id))
        } else {
            context.send(`‚öô –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.`)
        }
        await Keyboard_Index(context, `üí° –ö–∞–∫ –Ω–∞—Å—á–µ—Ç –µ—â–µ –æ–¥–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏? –ú–æ–∂–µ—Ç –ø–æ–∑–≤–∞—Ç—å –¥–æ–∫—Ç–æ—Ä–∞?`)
        prisma.$disconnect()
    })
    
    hearManager.hear(/–∏–Ω–≤–µ–Ω—Ç–∞—Ä—å/, async (context) => {
        const get_user:any = await prisma.user.findFirst({
            where: {
                idvk: context.senderId
            }
        })
        const inventory = await prisma.inventory.findMany({
            where: {
                id_user: get_user.id
            }
        })
        let cart = ''
        const underwear = await prisma.trigger.count({
            where: {    id_user: get_user.id,
                        name:   'underwear',
                        value:  false         }
        })
        if (underwear) {
            cart = 'üëú –¢—Ä—É—Å—ã –î–æ–º–∞—à–Ω–∏–µ;'
        }
        let counter = 0
        await context.sendPhotos({
            value: './src/art/inventory.jpg',
        });
        if (inventory.length == 0) {
            context.send(`‚úâ –í—ã –µ—â–µ –Ω–∏—á–µ–≥–æ –Ω–µ –ø—Ä–∏–æ–±—Ä–µ–ª–∏:(`)
        } else {
            for (let i = 0; i < inventory.length; i++) {
                const element = inventory[i].id_item;
                const item = await prisma.item.findFirst({
                    where: {
                        id: element
                    }
                })
                cart += `üëú ${item?.name};`
            }
            const destructor = cart.split(';').filter(i => i)
            let compile = []
            for (let i = 0; i < destructor.length; i++) {
                let counter = 0
                for (let j = 0; j < destructor.length; j++) {
                    if (destructor[i] != null) {
                        if (destructor[i] == destructor[j]) {
                            counter++
                        }
                    }
                }
                compile.push(`${destructor[i]} x ${counter}\n`)
                counter = 0
            }
            let final: any = Array.from(new Set(compile));
            context.send(`‚úâ –í—ã –ø—Ä–∏–æ–±—Ä–µ–ª–∏ —Å–ª–µ–¥—É—é—â–µ–µ: \n ${final.toString().replace(/,/g, '')}`)
        }
        prisma.$disconnect()
        console.log(`User ${context.senderId} see self inventory`)
        await Keyboard_Index(context, `üí° –ß—Ç–æ –∂, –∏–º—É—â–µ—Å—Ç–≤–∞ –º–Ω–æ–≥–æ –Ω–µ –±—ã–≤–∞–µ—Ç, –Ω–æ –∫–∞–∫ –Ω–∞—Å—á–µ—Ç –ø–æ–¥–∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å –µ—â–µ –≥–∞–ª–ª–µ–æ–Ω–æ–≤?`)
    })

    hearManager.hear(/–∞–¥–º–∏–Ω–∫–∞/, async (context: any) => {
        if (context.senderId == root) {
            const user:any = await prisma.user.findFirst({
                where: {
                    idvk: Number(context.senderId)
                }
            })
            const lvlup = await prisma.user.update({
                where: {
                    id: user.id
                },
                data: {
                    id_role: 2
                }
            })
            if (lvlup) {
                context.send(`‚öô –†—É—Ç –ø—Ä–∞–≤–∞ –ø–æ–ª—É—á–µ–Ω—ã`)
            } else {
                context.send(`‚öô –û—à–∏–±–∫–∞`)
            }
        }
        console.log(`Super user ${context.senderId} got root`)
        await Keyboard_Index(context, `üí° –ó–∞—Ö–≤–∞—Ç –º–∏—Ä–∞ —Å–Ω–æ–≤–∞ –≤ —Ç–µ–º–µ!`)
    })
    hearManager.hear(/–ø—Ä–∞–≤–∞/, async (context: any) => {
        if (context.senderId == root) {
            const uid = await context.question(`
                üß∑ –í–≤–µ–¥–∏—Ç–µ üí≥UID –±–∞–Ω–∫–æ–≤—Å–∫–æ–≥–æ —Å—á–µ—Ç–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª—è:
			`)
			if (uid.text) {
                const get_user = await prisma.user.findFirst({
                    where: {
                        id: Number(uid.text)
                    }
                })
                if (get_user) {
                    const artefact_counter = await prisma.artefact.count({
                        where: {
                            id_user: Number(uid.text)
                        }
                    })
                    const role: any = await prisma.role.findFirst({
                        where: {
                            id: get_user.id_role
                        }
                    })
                    context.send(`
                        ‚úâ –û—Ç–∫—Ä—ã—Ç–∞ —Å–ª–µ–¥—É—é—â–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞: ${get_user.class} ${get_user.name}, ${get_user.spec}:
                        
                        üí≥UID: ${get_user.id}
                        üí∞–ì–∞–ª–ª–µ–æ–Ω—ã: ${get_user.gold}
                        üßô–ú–∞–≥–∏—á–µ—Å–∫–∏–π –æ–ø—ã—Ç: ${get_user.xp}
                        üìà–£—Ä–æ–≤–µ–Ω—å: ${get_user.lvl}
                        üîÆ–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤: ${artefact_counter}

                        –ü—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${role.name}
                    `)
                    const answer1 = await context.question(`
                        ‚åõ –ß—Ç–æ –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å?
                        `,
                        {
                            keyboard: Keyboard.builder()
                            .textButton({
                                label: '–î–∞—Ç—å –∞–¥–º–∏–Ω–∫—É',
                                payload: {
                                    command: 'access'
                                },
                                color: 'secondary'
                            })
                            .textButton({
                                label: '–°–Ω—è—Ç—å –∞–¥–º–∏–Ω–∫—É',
                                payload: {
                                    command: 'denied'
                                },
                                color: 'secondary'
                            }).row()
                            .textButton({
                                label: '–ù–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞—Ç—å',
                                payload: {
                                    command: 'cancel'
                                },
                                color: 'secondary'
                            })
                            .oneTime().inline()
                        }
                    )
                    if (!answer1.payload) {
                        context.send(`üí° –ñ–º–∏—Ç–µ —Ç–æ–ª—å–∫–æ –ø–æ –∫–Ω–æ–ø–∫–∞–º —Å –∏–∫–æ–Ω–∫–∞–º–∏!`)
                    } else {
                        if (answer1.payload.command === 'access') {
                            const lvlup = await prisma.user.update({
                                where: {
                                    id: get_user.id
                                },
                                data: {
                                    id_role: 2
                                }
                            })
                            if (lvlup) {
                                context.send(`‚öô –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è ${get_user.name}`)
                                await vk.api.messages.send({
                                    user_id: get_user.idvk,
                                    random_id: 0,
                                    message: `‚öô –í–∞—Å –Ω–∞–∑–Ω–∞—á–∏–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º`
                                })
                                console.log(`Admin ${context.senderId} set status admin for ${get_user.idvk}`)
                            } else {
                                context.send(`üí° –û—à–∏–±–∫–∞`)
                            }
                        }
                        if (answer1.payload.command === 'denied') {
                            const lvlup = await prisma.user.update({
                                where: {
                                    id: get_user.id
                                },
                                data: {
                                    id_role: 1
                                }
                            })
                            if (lvlup) {
                                context.send(`‚öô –û–±—ã—á–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è ${get_user.name}`)
                                await vk.api.messages.send({
                                    user_id: get_user.idvk,
                                    random_id: 0,
                                    message: `‚öô –í–∞—Å –ø–æ–Ω–∏–∑–∏–ª–∏ –¥–æ –æ–±—ã—á–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è`
                                })
                                console.log(`Admin ${context.senderId} drop status admin for ${get_user.idvk}`)
                            } else {
                                context.send(`üí° –û—à–∏–±–∫–∞`)
                            }
                        }
                        if (answer1.payload.command === 'cancel') {
                            context.send(`üí° –¢–æ–∂–µ –≤–∞—Ä–∏–∞–Ω—Ç`)
                        }
                    }
                }
			} else {
				context.send(`üí° –ù–µ—Ç —Ç–∞–∫–æ–≥–æ –±–∞–Ω–∫–æ–≤—Å–∫–æ–≥–æ —Å—á–µ—Ç–∞!`)
			}
        }
        prisma.$disconnect
        await Keyboard_Index(context, `üí° –ü–æ–≤—ã—à–µ–Ω–∏–µ –≤ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏, –Ω–µ –≤—Å–µ–≥–¥–∞ –ø–æ–Ω–∏–∂–µ–Ω–∏–µ!`)
    })
    hearManager.hear(/–∞–¥–º–∏–Ω—ã/, async (context: any) => {
        const user = await prisma.user.findFirst({
            where: {
                idvk: context.senderId
            }
        })
        if (user?.id_role == 2) {
            const users = await prisma.user.findMany({
                where: {
                    id_role: 2
                }
            })
            let puller = '‚åõ –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ —Ä–∞–±–æ–≤... \n'
            for (const i in users) {
                puller += `üë§${users[i].id} - @id${users[i].idvk}(${users[i].name}) \n`
            }
            context.send(`${puller}`)
        }
        console.log(`Admin ${context.senderId} see list administrators`)
        await Keyboard_Index(context, `üí° –ò–º –±—ã –µ—â–µ —á–µ—Ä–Ω—ã–µ –æ—á–∫–∏, –∏ —Ç–æ—á–Ω–æ –ª—é–¥–∏ –≤ —á–µ—Ä–Ω–æ–º!`)
    })
    hearManager.hear(/–£—Å–ª—É–≥–∏/, async (context: any) => {
        const user = await prisma.user.findFirst({
            where: {
                idvk: context.senderId
            }
        })
        const selector = await context.question(`‚úâ –í–∞—à –±–∞–ª–∞–Ω—Å: ${user?.xp}üßô ${user?.gold}üí∞–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –¥–æ—Å—Ç—É–ø–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏:`,
            {
                keyboard: Keyboard.builder()
                .textButton({
                    label: 'üìà',
                    payload: {
                        command: 'lvl_upper'
                    },
                    color: 'secondary'
                })
                .textButton({
                    label: 'üëô',
                    payload: {
                        command: 'underwear'
                    },
                    color: 'secondary'
                }).row()
                .textButton({
                    label: 'üßô>üí∞',
                    payload: {
                        command: 'convert_mo'
                    },
                    color: 'secondary'
                })
                .textButton({
                    label: 'üí∞>üßô',
                    payload: {
                        command: 'convert_gal'
                    },
                    color: 'secondary'
                }).row()
                .textButton({
                    label: 'üîô',
                    payload: {
                        command: 'cancel'
                    },
                    color: 'secondary'
                })
                .oneTime().inline()
            }
        )
        const config: any = {
            'lvl_upper': LVL_Upper,
            'convert_mo': Convert_MO,
            'convert_gal': Convert_Gal,
            'cancel': Cancel,
            'underwear': Underwear
        }
        config[selector.payload.command](context)

        async function Underwear(context: any) {
            const user: any = await prisma.user.findFirst({
                where: {
                    idvk: context.senderId
                }
            })
            const trigger: any = await prisma.trigger.findFirst({
                where: {
                    id_user: user.id,
                    name: 'underwear'
                }
            })
            if (!trigger) {
                const trigger_init: any = await prisma.trigger.create({
                    data: {
                        id_user: user.id,
                        name: 'underwear',
                        value: false
                    }
                })
                console.log(`Init underwear for user ${context.senderId}`)
            }
            const trigger_check: any = await prisma.trigger.findFirst({
                where: {
                    id_user: user.id,
                    name: 'underwear'
                }
            })
            if (trigger_check.value == false) {
                const answe = await context.question(`‚úâ –ó–∞–ª–æ–∂–∏—Ç—å —Ç—Ä—É—Å—ã`,
                    {
                        keyboard: Keyboard.builder()
                        .textButton({
                            label: '+5üí∞',
                            payload: {
                                command: 'lvl_upper'
                            },
                            color: 'secondary'
                        })
                        .oneTime().inline()
                    }
                )
                if (answe.payload) {
                    const underwear_sold: any = await prisma.user.update({
                        where: {
                            id: user.id
                        },
                        data: {
                            gold: user.gold+5
                        }
                    })
                    const trigger_update: any = await prisma.trigger.update({
                        where: {
                            id: trigger_check.id
                        },
                        data: {
                            value: true
                        }
                    })
                    context.send(`‚öô –í—ã –∑–∞–ª–æ–∂–∏–ª–∏ —Å–≤–æ–∏ —Ç—Ä—É—Å—ã –ì–æ–±–ª–∏–Ω–∞–º, –¥–µ—Ä–∂–∏—Ç–µ 5üí∞. –¢–µ–ø–µ—Ä—å –≤–∞—à –±–∞–ª–∞–Ω—Å: ${underwear_sold.gold}`)
                    console.log(`User ${context.senderId} sold self underwear`)
                } else {
                    context.send(`üí° –ò –∫ —á–µ–º—É —Ç–∞–∫–∏–µ —Å—Ç–µ—Å–Ω–µ–Ω–∏—è?...`)
                }
            } else {
                const answe = await context.question(`‚úâ –í—ã–∫—É–ø–∏—Ç—å —Ç—Ä—É—Å—ã, –Ω–µ —Ö–æ—Ç–∏—Ç–µ? ‚Äî —Ç–æ–≥–¥–∞ –Ω–µ –∂–º–∏—Ç–µ –ø–æ –∫–Ω–æ–ø–∫–µ!`,
                    {
                        keyboard: Keyboard.builder()
                        .textButton({
                            label: '‚Äî10üí∞',
                            payload: {
                                command: 'lvl_upper'
                            },
                            color: 'secondary'
                        })
                        .oneTime().inline()
                    }
                )
                if (answe.payload) {
                    const underwear_sold: any = await prisma.user.update({
                        where: {
                            id: user.id
                        },
                        data: {
                            gold: user.gold-10
                        }
                    })
                    const trigger_update: any = await prisma.trigger.update({
                        where: {
                            id: trigger_check.id
                        },
                        data: {
                            value: false
                        }
                    })
                    context.send(`‚öô –í—ã –≤—ã–∫—É–ø–∏–ª–∏ —Å–≤–æ–∏ —Ç—Ä—É—Å—ã —É –ì–æ–±–ª–∏–Ω–æ–≤, –¥–µ—Ä–∂–∏—Ç–µ –∑–∞ 10üí∞. –¢–µ–ø–µ—Ä—å –≤–∞—à –±–∞–ª–∞–Ω—Å: ${underwear_sold.gold} –ö–æ–≥–¥–∞ –≤—ã –∏—Ö –∑–∞–±–∏—Ä–∞–ª–∏, —Ç–æ —Å—Ç–æ—è–ª —à—É–º –æ—Ç –≤—Å–µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–ª–∞ –±–∞–Ω–∫–∞: \n ‚Äî –ó–∞–±–∏—Ä–∞–π—Ç–µ —Å–≤–æ–∏ –≤–æ–Ω—é—á–∏–µ —Ç—Ä—É—Ö–∞–Ω—ã, –≤—Å–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –Ω–∞–º –∑–∞–≤–æ–Ω—è–ª–∏!`)
                    console.log(`User ${context.senderId} return self underwear`)
                } else {
                    context.send(`üí° –ê –∫–∞–∫ –∂–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —á–µ—Å—Ç—å?`)
                }
            }
            await Keyboard_Index(context, 'üí° –ö—Ç–æ –±—ã –º–æ–≥ –ø–æ–¥—É–º–∞—Ç—å, —á—Ç–æ –¥–æ–π–¥–µ—Ç –¥–æ —Ç–∞–∫–æ–≥–æ?')
        }
        async function LVL_Upper(context: any) {
            const user: any = await prisma.user.findFirst({
                where: {
                    idvk: context.senderId
                }
            })
            const leveling: any = {
                1: `1 —É—Ä–æ–≤–µ–Ω—å ‚Äî —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏. –†–∞–∑—Ä–µ—à–∞–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ç–æ–ª—å–∫–æ –≤–æ–ª—à–µ–±–Ω–æ–π –ø–∞–ª–æ—á–∫–∏.`,
                2: `2 —É—Ä–æ–≤–µ–Ω—å ‚Äî –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –¥–æ–±—ã—á–∏ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤ –¥–ª—è –∑–µ–ª–∏–π –∏ —Ç.–¥. –≤ —Ç–µ–ø–ª–∏—Ü–∞—Ö.`,
                3: `3 —É—Ä–æ–≤–µ–Ω—å ‚Äî —Ä–∞–∑—Ä–µ—à–∞–µ—Ç—Å—è –ø–æ—Ö–æ–¥ –≤ –•–æ–≥—Å–º–∏–¥, –¥–æ—Å—Ç—É–ø–µ–Ω –∫ –ø–æ–∫—É–ø–∫–µ –ø–æ—Ä–æ—à–æ–∫ –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–π —Ç—å–º—ã. –†–∞–∑—Ä–µ—à–∞–µ—Ç—Å—è –≤—Å—Ç—É–ø–∏—Ç—å –≤ "–î—É—ç–ª—å–Ω—ã–π –ö–ª—É–±".`,
                4: `4 —É—Ä–æ–≤–µ–Ω—å ‚Äî –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —É—Å–ª—É–≥–∞–º–∏ –±–∞–Ω–∫–∞ "–ì—Ä–∏–Ω–≥–æ—Ç—Ç—Å" –≤ –ø–æ–ª–Ω–æ–π –º–µ—Ä–µ. –°–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ–µ –∏–∑—É—á–µ–Ω–∏–µ –ª—é–±—ã—Ö —Ç—Ä—ë—Ö –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –¥–æ–ª–∂–Ω—ã –±—É–¥–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –§–ª–∏—Ç–≤–∏–∫—É. –ß—Ç–æ–±—ã –≤—ã –º–æ–≥–ª–∏ –∏—Ö –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å, –≤—ã –¥–æ–ª–∂–Ω—ã –æ–ø–∏—Å–∞—Ç—å –∏–∑—É—á–µ–Ω–∏–µ –∫–∞–∂–¥–æ–≥–æ –º–∏–Ω–∏–º—É–º –≤ 15 –∫–æ–º–ø. —Å—Ç—Ä–æ–∫–∞—Ö, –∏ –ø–æ—Å–ª–µ –¥–≤—É—Ö –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –ª–æ–∫–∞—Ü–∏—è—Ö –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–µ –±—É–¥–µ—Ç –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —Å—Ç–∞–±–∏–ª—å–Ω–æ. –ó–∞–∫–ª–∏–Ω–∞–Ω–∏—è –º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å —Ç–µ, —á—Ç–æ –∏–∑—É—á–∞—é—Ç—Å—è –Ω–∞ –±–æ–ª–µ–µ —Å—Ç–∞—Ä—à–∏—Ö –∫—É—Ä—Å–∞—Ö, —á–µ–º —Å–µ–π—á–∞—Å –≤—ã (–º–∞–∫—Å–∏–º—É–º –Ω–∞ –¥–≤–∞ –≤–ø–µ—Ä—ë–¥).`,
                5: `5 —É—Ä–æ–≤–µ–Ω—å ‚Äî —Ä–∞–∑—Ä–µ—à–∞–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–µ–≤–µ—Ä–±–∞–ª—å–Ω—ã—Ö –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–π.`,
                6: `6 —É—Ä–æ–≤–µ–Ω—å ‚Äî –¥–æ—Å—Ç—É–ø–Ω–æ –∫ –ø–æ–∫—É–ø–∫–µ –ª—é–±–æ–≤–Ω–æ–µ –∑–µ–ª—å–µ. –î–æ—Å—Ç—É–ø –∫ –ø–æ–ª—É—á–µ–Ω–∏—é –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤ –≤ –∫–ª–∞–¥–æ–≤–∫–µ –ø—Ä–æ—Ñ–µ—Å—Å–æ—Ä–∞ –°–Ω–µ–π–ø–∞ —Å –∑–µ–ª—å—è–º–∏. –î–æ—Å—Ç—É–ø–Ω–∞ –æ–∫–∫–ª—é–º–µ–Ω—Ü–∏—è.`,
                7: `7 —É—Ä–æ–≤–µ–Ω—å ‚Äî –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ–±—É—á–∏—Ç—å—Å—è –∞–Ω–∏–º–∞–≥–∏–∏, –¥–æ—Å—Ç—É–ø–Ω–∞ –∫ –ø–æ–∫—É–ø–∫–µ –º–∞–Ω—Ç–∏—è –Ω–µ–≤–∏–¥–∏–º–æ—Å—Ç–∏. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–π –±–µ–∑ –≤–æ–ª—à–µ–±–Ω–æ–π –ø–∞–ª–æ—á–∫–∏. –î–æ—Å—Ç—É–ø–Ω–∞ –ª–µ–≥–∏–ª–∏–º–µ–Ω—Ü–∏—è.,
                –¢–∞–∫–∂–µ —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –≤–æ–∑–º–æ–∂–Ω—ã–º —É–∫–æ—Ä–æ—á–µ–Ω–∏–µ –ø–æ—Å—Ç–æ–≤ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–π. 7 —Å—Ç—Ä–æ–∫ –ü–ö –≤–º–µ—Å—Ç–æ 15.`,
                8: `8 —É—Ä–æ–≤–µ–Ω—å ‚Äî –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å—Ç–∞—Ç—å –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–º —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–º –≥–∞–∑–µ—Ç—ã "–ï–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –ü—Ä–æ—Ä–æ–∫–∞" –∏ –ø–æ–ª—É—á–∞—Ç—å –∑–∞ –∫–∞–∂–¥—É—é —Å—Ç–∞—Ç—å—é –ø–æ 15 –ú–û –∏ –ø–æ 10 –≥–∞–ª–ª–µ–æ–Ω–æ–≤. –û—Ç–∫—Ä—ã—Ç–∏–µ —Ä—ã–Ω–∫–∞ –º–∞–≥–∏—á–µ—Å–∫–∏—Ö –∂–∏–≤–æ—Ç–Ω—ã—Ö –æ—Ç –•–•–•. –ú–æ–∂–Ω–æ –∫—É–ø–∏—Ç—å –∑–≤–µ—Ä—å–∫–∞, –Ω–∞ —Ä—ã–Ω–∫–µ –±—É–¥—É—Ç –≤—ã—Å—Ç–∞–≤–ª–µ–Ω—ã –µ–≥–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏.`,
                9: `9 —É—Ä–æ–≤–µ–Ω—å ‚Äî –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ–±—É—á–∏—Ç—å—Å—è —Ç—Ä–∞–Ω—Å–≥—Ä–µ—Å–∏–∏, –¥–æ—Å—Ç—É–ø –∫ –∏–∑—É—á–µ–Ω–∏—é —Ç—ë–º–Ω–æ–π –º–∞–≥–∏–∏.`,
                10: `10 —É—Ä–æ–≤–µ–Ω—å ‚Äî —Å–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–π –∏ –∏–∑–æ–±—Ä–µ—Ç–µ–Ω–∏–µ –∑–µ–ª–∏–π/—Ä–∞—Å—Ç–µ–Ω–∏–π –∏ —Ç.–¥.`,
                11: `11 —É—Ä–æ–≤–µ–Ω—å ‚Äî –æ–±—ã—á–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å`,
                12: `12 —É—Ä–æ–≤–µ–Ω—å ‚Äî —Ä–µ–¥–∫–∏–π —É—Ä–æ–≤–µ–Ω—å`,
                13: `13 —É—Ä–æ–≤–µ–Ω—å ‚Äî —ç–ø–∏—á–µ—Å–∫–∏–π —É—Ä–æ–≤–µ–Ω—å`,
                14: `14 —É—Ä–æ–≤–µ–Ω—å ‚Äî –ª–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å`,
                15: `15 —É—Ä–æ–≤–µ–Ω—å ‚Äî –º–∏—Ñ–∏—á–µ—Å–∫–∏–π —É—Ä–æ–≤–µ–Ω—å`,
            }
            if (user.lvl == 0) {
                const user_update = await prisma.user.update({
                    where: {
                        id: user.id
                    },
                    data: {
                        lvl: user.lvl+1
                    }
                })
                if (user_update) {
                    await context.send(`‚öô –í–∞—à —É—Ä–æ–≤–µ–Ω—å –ø–æ–≤—ã—à–µ–Ω —Å ${user.lvl} –¥–æ ${user_update.lvl}. –ü–µ—Ä–≤—ã–π —Ä–∞–∑ –±–µ—Å–ø–ª–∞—Ç–Ω–æ, –¥–∞–ª–µ–µ –∑–∞ —É—Ä–æ–≤–µ–Ω—å –ø–æ 150üßô\n üè¶–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞: ${leveling[user_update.lvl]}`)
                    await Keyboard_Index(context, `üí° –¢–≤–æ–π –ø–µ—Ä–≤—ã–π —É—Ä–æ–≤–µ–Ω—å? ‚Äî —ç—Ç–æ —Ç–æ–ª—å–∫–æ –Ω–∞—á–∞–ª–æ!`)
                    console.log(`User ${context.senderId} lvl up from ${user.lvl} to ${user_update.lvl}`)
                    return
                }
                
            }
            if (user.xp >= 150 && user.lvl < 16) {
                const user_update = await prisma.user.update({
                    where: {
                        id: user.id
                    },
                    data: {
                        xp: user.xp-150,
                        lvl: user.lvl+1
                    }
                })
                context.send(`‚öô –í–∞—à —É—Ä–æ–≤–µ–Ω—å –ø–æ–≤—ã—à–µ–Ω —Å ${user.lvl} –¥–æ ${user_update.lvl}. –û—Å—Ç–∞—Ç–æ–∫: ${user_update.xp}üßô \n üè¶–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞: ${leveling[user_update.lvl]}`)
                await Keyboard_Index(context, `üí° –ù–µ—É–∂–µ–ª–∏ –º–æ–∂–Ω–æ —Å—Ç–∞—Ç—å –µ—â–µ –º–æ—â–Ω–µ–µ?`)
                console.log(`User ${context.senderId} lvl up from ${user.lvl} to ${user_update.lvl}`)
            } else {
                if (user.lvl >= 15) {
                    context.send(`üí° –£—Ä–æ–≤–µ–Ω—å –ø–æ–≤—ã—à–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–æ—Å—Ç–∏—á—å...`)
                    await Keyboard_Index(context, `üí° –í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –ø—Ä–µ–¥–µ–ª–∞, —Ö–æ—Ç—è –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ—Å—Ç—å ‚Äî –Ω–µ –ø—Ä–µ–¥–µ–ª.`)
                    console.log(`User ${context.senderId} lvl up from finally anytime`)
                    return
                }
                context.send(`üí° –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–∞–≥–∏—á–µ—Å–∫–æ–≥–æ –æ–ø—ã—Ç–∞! –ù–µ–æ–±—Ö–æ–¥–∏–º–æ 150üßô –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è.`)
                await Keyboard_Index(context, `üí° –•–∞‚Äî—Ö–∞, –Ω–∞–∏–≤–Ω–æ –±—ã–ª–æ –ø–æ–ª–∞–≥–∞—Ç—å, —á—Ç–æ –º–æ–∂–Ω–æ —Å—Ç–∞—Ç—å —Å–∏–ª—å–Ω–µ–µ –±–µ–∑ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–≥–æ –º–∞–≥–∏—á–µ—Å–∫–æ–≥–æ –æ–ø—ã—Ç–∞`)
                console.log(`User ${context.senderId} have not enough MO for lvl up from ${user.lvl} to ${user.lvl++}`)
            }
        }
        async function Convert_MO(context: any) {
            const user: any = await prisma.user.findFirst({
                where: {
                    idvk: context.senderId
                }
            })
            const count = await context.question(`‚úâ –¢–µ–∫—É—â–∏–π –∫—É—Ä—Å: 15üßô => 5üí∞. . –î–æ—Å—Ç—É–ø–µ–Ω –æ–±–º–µ–Ω ${Math.floor(user.xp/15)*15}üßô –Ω–∞ ${Math.floor(user.xp/15)*15/3}üí∞. –ü—Ä–∏ –ø–æ–ª–Ω–æ–π –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ —É –≤–∞—Å –±—É–¥–µ—Ç ${user.gold + Math.floor(user.xp/15)*15/3}üí∞ –Ω–∞ —Å—á–µ—Ç—É. \n –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∞–≥–∏—á–µ—Å–∫–æ–≥–æ –æ–ø—ã—Ç–∞ –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤ –≥–∞–ª–ª–µ–æ–Ω—ã:`)
            if (Number(count.text) >= 15 && Number(count.text) <= user.xp) {
                const convert_gal = await prisma.user.update({
                    where: {
                        id: user.id
                    },
                    data: {
                        gold: user.gold+Math.floor(count.text/15)*15/3,
                        xp: user.xp-Math.floor(count.text/15)*15
                    }
                })
                console.log(`User ${context.senderId} converted ${Math.floor(count.text/15)*15}MO in ${Math.floor(count.text/15)*15/3}G`)
                context.send(`‚åõ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ${Math.floor(count.text/15)*15}üßô –≤ ${Math.floor(count.text/15)*15/3}üí∞ –ø—Ä–æ–∏–∑–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ`)
            } else {
                context.send(`üí° –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏`)
            }
        }
        async function Convert_Gal(context: any) {
            const user: any = await prisma.user.findFirst({
                where: {
                    idvk: context.senderId
                }
            })
            const count = await context.question(`‚úâ –¢–µ–∫—É—â–∏–π –∫—É—Ä—Å: 1üí∞ => 2üßô. . –î–æ—Å—Ç—É–ø–µ–Ω –æ–±–º–µ–Ω ${user.gold}üí∞ –Ω–∞ ${user.gold*2}üßô. –ü—Ä–∏ –ø–æ–ª–Ω–æ–π –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ —É –≤–∞—Å –±—É–¥–µ—Ç ${user.xp + user.gold*2}üßô –Ω–∞ —Å—á–µ—Ç—É. \n –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–∞–ª–ª–µ–æ–Ω–æ–≤ –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤ –º–∞–≥–∏—á–µ—Å–∫–∏–π –æ–ø—ã—Ç:`)
            if (Number(count.text) >= 0 && Number(count.text) <= user.gold) {
                const convert_gal = await prisma.user.update({
                    where: {
                        id: user.id
                    },
                    data: {
                        gold: user.gold-count.text,
                        xp: user.xp+count.text*2
                    }
                })
                console.log(`User ${context.senderId} converted ${count.text} G in ${count.text*2}MO`)
                context.send(`‚åõ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ${count.text}üí∞ –≤ ${count.text*2}üßô –ø—Ä–æ–∏–∑–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ`)
            } else {
                context.send(`üí° –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏`)
            }
        }
        async function Cancel(context: any) {
            context.send(`üí° –£—Å–ª—É–≥–∏ –æ—Ç–æ–∑–≤–∞–Ω—ã.`)
        }
        const underwear = await prisma.trigger.count({
            where: {    name:   'underwear',
                        value:  true         }
        })
        await Keyboard_Index(context, `üí° ${underwear} —á–µ–ª–æ–≤–µ–∫ —É–∂–µ –∑–∞–ª–æ–∂–∏–ª–æ —Å–≤–æ–∏ —Ç—Ä—É—Å–µ–ª—è, –∫–∞–∫ –Ω–∞ —Å—á—ë—Ç —Ç–≤–æ–∏—Ö?`)
    })
    hearManager.hear(/–µ–Ω–æ—Ç–∏–∫/, async (context: any) => {
        if (await Accessed(context) == 2) {
            context.sendDocuments({
                value: `./prisma/dev.db`,
                filename: `dev.db`
            },
            {
                message: 'üí° –û—Ç–∫—Ä—ã–≤–∞—Ç—å –Ω–∞ —Å–∞–π—Ç–µ: https://sqliteonline.com/'
            }
        );
        }
    })
}

    